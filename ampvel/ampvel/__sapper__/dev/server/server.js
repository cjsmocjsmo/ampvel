'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var sirv = _interopDefault(require('sirv'));
var polka = _interopDefault(require('polka'));
var compression = _interopDefault(require('compression'));
var fs = _interopDefault(require('fs'));
var path = _interopDefault(require('path'));
var Stream = _interopDefault(require('stream'));
var http = _interopDefault(require('http'));
var Url = _interopDefault(require('url'));
var https = _interopDefault(require('https'));
var zlib = _interopDefault(require('zlib'));

function noop() { }
function is_promise(value) {
    return value && typeof value === 'object' && typeof value.then === 'function';
}
function run(fn) {
    return fn();
}
function blank_object() {
    return Object.create(null);
}
function run_all(fns) {
    fns.forEach(run);
}
function safe_not_equal(a, b) {
    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}
function custom_event(type, detail) {
    const e = document.createEvent('CustomEvent');
    e.initCustomEvent(type, false, false, detail);
    return e;
}

let current_component;
function set_current_component(component) {
    current_component = component;
}
function get_current_component() {
    if (!current_component)
        throw new Error(`Function called outside component initialization`);
    return current_component;
}
function onMount(fn) {
    get_current_component().$$.on_mount.push(fn);
}
function afterUpdate(fn) {
    get_current_component().$$.after_update.push(fn);
}
function createEventDispatcher() {
    const component = get_current_component();
    return (type, detail) => {
        const callbacks = component.$$.callbacks[type];
        if (callbacks) {
            // TODO are there situations where events could be dispatched
            // in a server (non-DOM) environment?
            const event = custom_event(type, detail);
            callbacks.slice().forEach(fn => {
                fn.call(component, event);
            });
        }
    };
}
function setContext(key, context) {
    get_current_component().$$.context.set(key, context);
}
const escaped = {
    '"': '&quot;',
    "'": '&#39;',
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;'
};
function escape(html) {
    return String(html).replace(/["'&<>]/g, match => escaped[match]);
}
function each(items, fn) {
    let str = '';
    for (let i = 0; i < items.length; i += 1) {
        str += fn(items[i], i);
    }
    return str;
}
const missing_component = {
    $$render: () => ''
};
function validate_component(component, name) {
    if (!component || !component.$$render) {
        if (name === 'svelte:component')
            name += ' this={...}';
        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);
    }
    return component;
}
let on_destroy;
function create_ssr_component(fn) {
    function $$render(result, props, bindings, slots) {
        const parent_component = current_component;
        const $$ = {
            on_destroy,
            context: new Map(parent_component ? parent_component.$$.context : []),
            // these will be immediately discarded
            on_mount: [],
            before_update: [],
            after_update: [],
            callbacks: blank_object()
        };
        set_current_component({ $$ });
        const html = fn(result, props, bindings, slots);
        set_current_component(parent_component);
        return html;
    }
    return {
        render: (props = {}, options = {}) => {
            on_destroy = [];
            const result = { title: '', head: '', css: new Set() };
            const html = $$render(result, props, {}, options);
            run_all(on_destroy);
            return {
                html,
                css: {
                    code: Array.from(result.css).map(css => css.code).join('\n'),
                    map: null // TODO
                },
                head: result.title + result.head
            };
        },
        $$render
    };
}
function add_attribute(name, value, boolean) {
    if (value == null || (boolean && !value))
        return '';
    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `"${value}"`}`}`;
}

/* src/routes/index.svelte generated by Svelte v3.24.0 */

const css = {
	code: "#MovSetup1.svelte-15stoe6{padding:7px;color:red}#MovSetup2.svelte-15stoe6{padding:7px;color:black}#TVSetup1.svelte-15stoe6{padding:7px;color:red}#TVSetup2.svelte-15stoe6{padding:7px;color:black}#artspan.svelte-15stoe6{color:blue;margin-left:10px}ul.svelte-15stoe6{list-style-type:none;text-align:center}li.svelte-15stoe6{display:inline;padding-left:20px;padding-right:20px;color:black}figure.svelte-15stoe6{text-align:center;margin:0 auto}figure.svelte-15stoe6{margin:0 0 1em 0}img.svelte-15stoe6{width:100%;max-width:400px;margin:0 0 1em 0}button.svelte-15stoe6{width:49%}",
	map: "{\"version\":3,\"file\":\"index.svelte\",\"sources\":[\"index.svelte\"],\"sourcesContent\":[\"<script>\\n\\timport { onMount } from 'svelte';\\n\\tlet STATS;\\n\\tlet artist;\\n\\tlet albums;\\n\\tlet mp3;\\n\\tonMount(async () => {\\n\\t\\tfetch(`http://192.168.0.31:6789/Stats`, {mode: \\\"cors\\\", method: \\\"GET\\\"})\\n\\t\\t.then(r => r.json())\\n\\t\\t.then(data => {\\n\\t\\t\\tSTATS = data.stats;\\n\\t\\t\\tartist = STATS.total_artists\\n\\t\\t\\talbums = STATS.total_albums\\n\\t\\t\\tmp3 = STATS.total_mp3\\n\\t\\t})\\n\\t\\t.catch(err => console.log(err))\\n\\t})\\n\\n\\tlet NASA;\\n\\tonMount(async () => {\\n\\t\\tfetch(`https://api.nasa.gov/planetary/apod?api_key=qdSdMLU2yc4wXQM9goawTdAA7sngW9KoLkDsVhWG`, {mode: \\\"cors\\\", method: \\\"GET\\\"})\\n\\t\\t.then(r => r.json())\\n\\t\\t.then(data => {\\n\\t\\t\\tNASA = data.url;\\n\\t\\t})\\n\\t\\t.catch(err => console.log(err))\\n\\t})\\n\\n\\tlet movcount;\\n\\tonMount(async () => {\\n\\t\\tfetch(`http://192.168.0.42:8888/MovDBCount`, {mode: \\\"cors\\\", method: \\\"GET\\\"})\\n\\t\\t.then(r => r.json())\\n\\t\\t.then(data => {\\n\\t\\t\\tconsole.log(data)\\n\\t\\t\\tmovcount = data;\\n\\t\\t})\\n\\t\\t.catch(err => console.log(err))\\n\\t})\\n\\n\\tlet tvcount;\\n\\tonMount(async () => {\\n\\t\\tfetch(`http://192.168.0.42:9999/TVDBCount`, {mode: \\\"cors\\\", method: \\\"GET\\\"})\\n\\t\\t.then(r => r.json())\\n\\t\\t.then(data => {\\n\\t\\t\\tconsole.log(data)\\n\\t\\t\\ttvcount = data;\\n\\t\\t})\\n\\t\\t.catch(err => console.log(err))\\n\\t})\\n\\n    \\n\\tasync function getMovUpdate() {\\n\\t\\tawait fetch(`http://192.168.0.42:8888/Update`, {mode: \\\"cors\\\", method: \\\"GET\\\"})\\n\\t\\t.then(r => r.json())\\n\\t\\t.then(data => {\\n\\t\\t\\tconsole.log(data)\\n\\t\\t})\\n\\t}\\n\\n\\tlet handleMovUpdateClick = () => {\\n\\t\\tlet promise = getMovUpdate().catch(err => console.log(err));\\n\\t}\\n\\n\\tasync function getTVUpdate() {\\n\\t\\tawait fetch(`http://192.168.0.42:9999/Update`, {mode: \\\"cors\\\", method: \\\"GET\\\"})\\n\\t\\t.then(r => r.json())\\n\\t\\t.then(data => {\\n\\t\\t\\tconsole.log(data)\\n\\t\\t})\\n\\t}\\n\\n\\tlet handleTVUpdateClick = () => {\\n\\t\\tlet promise = getTVUpdate().catch(err => console.log(err));\\n\\t}\\n\\n</script>\\n\\n<svelte:head>\\n\\t<!-- <link href=\\\"https://fonts.googleapis.com/icon?family=Material+Icons\\\" rel=\\\"stylesheet\\\"> -->\\n\\t<title>AmpVel</title>\\n</svelte:head>\\n\\n<ul>\\n\\t<li><a href=\\\"http://192.168.0.42:4566/\\\">YTS-EZTV</a></li>\\n</ul>\\n\\n\\n<figure>\\n\\t<img alt='Success Kid' src={NASA}>\\n\\t<figcaption>NASA Pic Of The Day</figcaption>\\n</figure>\\n\\n<ul>\\n\\t<li><span>Artists:</span> <span id=\\\"artspan\\\">{artist}</span></li>\\n\\t<li><span>Albums:</span><span id=\\\"artspan\\\">{albums}</span></li>\\n\\t<li><span>Songs:</span><span id=\\\"artspan\\\">{mp3}</span></li>\\n</ul>\\n\\n<ul>\\n\\t{#if movcount < 1}\\n\\t\\t<li><span id=\\\"MovSetup1\\\">Movies:</span><span id=\\\"artspan\\\">{movcount}</span></li>\\n\\t{:else}\\n\\t\\t<li><span id=\\\"MovSetup2\\\">Movies:</span><span id=\\\"artspan\\\">{movcount}</span></li>\\n\\t{/if}\\n\\n\\t{#if tvcount < 1}\\n\\t\\t<li><span id=\\\"TVSetup1\\\">TV Shows:</span><span id=\\\"artspan\\\">{tvcount}</span></li>\\n\\t{:else}\\n\\t\\t<li><span id=\\\"TVSetup2\\\">TV Shows:</span><span id=\\\"artspan\\\">{tvcount}</span></li>\\n\\t{/if}\\n</ul>\\n\\n<nav>\\n\\t{#if movcount < 1}\\n\\t\\t<button on:click={handleMovUpdateClick} >Movie Setup</button>\\n\\t{/if}\\n\\t{#if tvcount < 1}\\n\\t\\t<button on:click={handleTVUpdateClick} >TVShows Setup</button>\\n\\t{/if}\\n</nav>\\n<style>\\n\\t#MovSetup1 {\\n\\t\\t/* background-color: red; */\\n\\t\\tpadding: 7px;\\n\\t\\tcolor: red;\\n\\t}\\n\\t#MovSetup2 {\\n\\t\\t/* background-color: green; */\\n\\t\\tpadding: 7px;\\n\\t\\tcolor: black;\\n\\t}\\n\\n\\t#TVSetup1 {\\n\\t\\t/* background-color: red; */\\n\\t\\tpadding: 7px;\\n\\t\\tcolor: red;\\n\\t}\\n\\t#TVSetup2 {\\n\\t\\t/* background-color: green; */\\n\\t\\tpadding: 7px;\\n\\t\\tcolor: black;\\n\\t}\\n\\n\\t#artspan {\\n\\t\\tcolor: blue;\\n\\t\\tmargin-left: 10px;\\n\\t}\\n\\n\\tul {\\n\\t\\tlist-style-type: none;\\n\\t\\ttext-align: center;\\n\\t}\\n\\n\\tli {\\n\\t\\tdisplay: inline;\\n\\t\\tpadding-left: 20px;\\n\\t\\tpadding-right: 20px;\\n\\t\\tcolor: black;\\n\\t}\\n\\tfigure {\\n\\t\\ttext-align: center;\\n\\t\\tmargin: 0 auto;\\n\\t}\\n\\n\\tfigure {\\n\\t\\tmargin: 0 0 1em 0;\\n\\t}\\n\\n\\timg {\\n\\t\\twidth: 100%;\\n\\t\\tmax-width: 400px;\\n\\t\\tmargin: 0 0 1em 0;\\n\\t}\\n\\n\\tbutton {\\n\\t\\twidth: 49%;\\n\\t}\\n\\n\\t/*@media (min-width: 480px) {\\n\\t\\th1 {\\n\\t\\t\\tfont-size: 4em;\\n\\t\\t}\\n\\t} */\\n</style>\"],\"names\":[],\"mappings\":\"AAyHC,UAAU,eAAC,CAAC,AAEX,OAAO,CAAE,GAAG,CACZ,KAAK,CAAE,GAAG,AACX,CAAC,AACD,UAAU,eAAC,CAAC,AAEX,OAAO,CAAE,GAAG,CACZ,KAAK,CAAE,KAAK,AACb,CAAC,AAED,SAAS,eAAC,CAAC,AAEV,OAAO,CAAE,GAAG,CACZ,KAAK,CAAE,GAAG,AACX,CAAC,AACD,SAAS,eAAC,CAAC,AAEV,OAAO,CAAE,GAAG,CACZ,KAAK,CAAE,KAAK,AACb,CAAC,AAED,QAAQ,eAAC,CAAC,AACT,KAAK,CAAE,IAAI,CACX,WAAW,CAAE,IAAI,AAClB,CAAC,AAED,EAAE,eAAC,CAAC,AACH,eAAe,CAAE,IAAI,CACrB,UAAU,CAAE,MAAM,AACnB,CAAC,AAED,EAAE,eAAC,CAAC,AACH,OAAO,CAAE,MAAM,CACf,YAAY,CAAE,IAAI,CAClB,aAAa,CAAE,IAAI,CACnB,KAAK,CAAE,KAAK,AACb,CAAC,AACD,MAAM,eAAC,CAAC,AACP,UAAU,CAAE,MAAM,CAClB,MAAM,CAAE,CAAC,CAAC,IAAI,AACf,CAAC,AAED,MAAM,eAAC,CAAC,AACP,MAAM,CAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,AAClB,CAAC,AAED,GAAG,eAAC,CAAC,AACJ,KAAK,CAAE,IAAI,CACX,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,AAClB,CAAC,AAED,MAAM,eAAC,CAAC,AACP,KAAK,CAAE,GAAG,AACX,CAAC\"}"
};

const Routes = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let STATS;
	let artist;
	let albums;
	let mp3;

	onMount(async () => {
		fetch(`http://192.168.0.31:6789/Stats`, { mode: "cors", method: "GET" }).then(r => r.json()).then(data => {
			STATS = data.stats;
			artist = STATS.total_artists;
			albums = STATS.total_albums;
			mp3 = STATS.total_mp3;
		}).catch(err => console.log(err));
	});

	let NASA;

	onMount(async () => {
		fetch(`https://api.nasa.gov/planetary/apod?api_key=qdSdMLU2yc4wXQM9goawTdAA7sngW9KoLkDsVhWG`, { mode: "cors", method: "GET" }).then(r => r.json()).then(data => {
			NASA = data.url;
		}).catch(err => console.log(err));
	});

	let movcount;

	onMount(async () => {
		fetch(`http://192.168.0.42:8888/MovDBCount`, { mode: "cors", method: "GET" }).then(r => r.json()).then(data => {
			console.log(data);
			movcount = data;
		}).catch(err => console.log(err));
	});

	let tvcount;

	onMount(async () => {
		fetch(`http://192.168.0.42:9999/TVDBCount`, { mode: "cors", method: "GET" }).then(r => r.json()).then(data => {
			console.log(data);
			tvcount = data;
		}).catch(err => console.log(err));
	});

	$$result.css.add(css);

	return `${($$result.head += `${($$result.title = `<title>AmpVel</title>`, "")}`, "")}

<ul class="${"svelte-15stoe6"}"><li class="${"svelte-15stoe6"}"><a href="${"http://192.168.0.42:4566/"}">YTS-EZTV</a></li></ul>


<figure class="${"svelte-15stoe6"}"><img alt="${"Success Kid"}"${add_attribute("src", NASA, 0)} class="${"svelte-15stoe6"}">
	<figcaption>NASA Pic Of The Day</figcaption></figure>

<ul class="${"svelte-15stoe6"}"><li class="${"svelte-15stoe6"}"><span>Artists:</span> <span id="${"artspan"}" class="${"svelte-15stoe6"}">${escape(artist)}</span></li>
	<li class="${"svelte-15stoe6"}"><span>Albums:</span><span id="${"artspan"}" class="${"svelte-15stoe6"}">${escape(albums)}</span></li>
	<li class="${"svelte-15stoe6"}"><span>Songs:</span><span id="${"artspan"}" class="${"svelte-15stoe6"}">${escape(mp3)}</span></li></ul>

<ul class="${"svelte-15stoe6"}">${movcount < 1
	? `<li class="${"svelte-15stoe6"}"><span id="${"MovSetup1"}" class="${"svelte-15stoe6"}">Movies:</span><span id="${"artspan"}" class="${"svelte-15stoe6"}">${escape(movcount)}</span></li>`
	: `<li class="${"svelte-15stoe6"}"><span id="${"MovSetup2"}" class="${"svelte-15stoe6"}">Movies:</span><span id="${"artspan"}" class="${"svelte-15stoe6"}">${escape(movcount)}</span></li>`}

	${tvcount < 1
	? `<li class="${"svelte-15stoe6"}"><span id="${"TVSetup1"}" class="${"svelte-15stoe6"}">TV Shows:</span><span id="${"artspan"}" class="${"svelte-15stoe6"}">${escape(tvcount)}</span></li>`
	: `<li class="${"svelte-15stoe6"}"><span id="${"TVSetup2"}" class="${"svelte-15stoe6"}">TV Shows:</span><span id="${"artspan"}" class="${"svelte-15stoe6"}">${escape(tvcount)}</span></li>`}</ul>

<nav>${movcount < 1
	? `<button class="${"svelte-15stoe6"}">Movie Setup</button>`
	: ``}
	${tvcount < 1
	? `<button class="${"svelte-15stoe6"}">TVShows Setup</button>`
	: ``}
</nav>`;
});

const subscriber_queue = [];
/**
 * Create a `Writable` store that allows both updating and reading by subscription.
 * @param {*=}value initial value
 * @param {StartStopNotifier=}start start and stop notifications for subscriptions
 */
function writable(value, start = noop) {
    let stop;
    const subscribers = [];
    function set(new_value) {
        if (safe_not_equal(value, new_value)) {
            value = new_value;
            if (stop) { // store is ready
                const run_queue = !subscriber_queue.length;
                for (let i = 0; i < subscribers.length; i += 1) {
                    const s = subscribers[i];
                    s[1]();
                    subscriber_queue.push(s, value);
                }
                if (run_queue) {
                    for (let i = 0; i < subscriber_queue.length; i += 2) {
                        subscriber_queue[i][0](subscriber_queue[i + 1]);
                    }
                    subscriber_queue.length = 0;
                }
            }
        }
    }
    function update(fn) {
        set(fn(value));
    }
    function subscribe(run, invalidate = noop) {
        const subscriber = [run, invalidate];
        subscribers.push(subscriber);
        if (subscribers.length === 1) {
            stop = start(set) || noop;
        }
        run(value);
        return () => {
            const index = subscribers.indexOf(subscriber);
            if (index !== -1) {
                subscribers.splice(index, 1);
            }
            if (subscribers.length === 0) {
                stop();
                stop = null;
            }
        };
    }
    return { set, update, subscribe };
}

const playliststore = writable("BOOZE");
const playlistidstore = writable("HOUND");

/* src/components/PlaylistComps/AddRandomPlaylist.svelte generated by Svelte v3.24.0 */

const css$1 = {
	code: "form.svelte-1wja0j{margin-bottom:10px}",
	map: "{\"version\":3,\"file\":\"AddRandomPlaylist.svelte\",\"sources\":[\"AddRandomPlaylist.svelte\"],\"sourcesContent\":[\"<script>\\n    import { playliststore } from './PlaylistListStore'\\n\\n    let radvisible = false;\\n    let randvis = () => {\\n        if (radvisible) {\\n            radvisible = false\\n        } else {\\n            radvisible = true\\n        }\\n    }\\n\\n    let plname;\\n    let plcount;\\n    let playlists;\\n\\n    async function handleSubmit(event) {\\n        radvisible = false;\\n        plname = event.target.plname.value;\\n        plcount = event.target.plcount.value;\\n        let promise = getAddRandomPlaylist().catch(err => console.log(err));\\n    }\\n\\t\\n\\tasync function getAddRandomPlaylist() {\\n\\t\\tawait fetch(`http://192.168.0.31:6789/AddRandomPlaylist?playlistname=${plname}&playlistcount=${plcount}`, {mode: \\\"cors\\\", method: \\\"GET\\\"})\\n\\t\\t.then(r => r.json())\\n\\t\\t.then(data => {\\n            playlists = data.plists;\\n            playliststore.set(playlists)\\n        }).catch(err => console.log(err));\\n\\t}\\n\\n</script>\\n\\n<button on:click={randvis} >Add Random Playlist</button>\\n\\n{#if radvisible}\\n    <form on:submit|preventDefault=\\\"{handleSubmit}\\\">\\n        <input id=\\\"plname\\\" name=\\\"plname\\\" type=\\\"text\\\" />\\n        <label>Playlist Name</label><br />\\n        <input id=\\\"plcount\\\" name=\\\"plcount\\\" type=\\\"text\\\" />\\n        <label>Number Of Songs</label><br />\\n        <input type=\\\"submit\\\" value=\\\"Add\\\" />\\n    </form>\\n{/if}\\n\\n<style>\\n    form {\\n        margin-bottom: 10px;\\n    }\\n</style>\"],\"names\":[],\"mappings\":\"AA+CI,IAAI,cAAC,CAAC,AACF,aAAa,CAAE,IAAI,AACvB,CAAC\"}"
};

const AddRandomPlaylist = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {

	$$result.css.add(css$1);

	return `<button>Add Random Playlist</button>

${ ``}`;
});

/* src/components/PlaylistComps/AddEmptyPlaylist.svelte generated by Svelte v3.24.0 */

const AddEmptyPlaylist = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {

	return `<button>Add Empty Playlist</button>

${ ``}`;
});

/* src/components/PlaylistComps/DeletePlaylist.svelte generated by Svelte v3.24.0 */

const css$2 = {
	code: "button#delete.svelte-1le1i94{background-color:red;color:white;border:none;padding:7px}",
	map: "{\"version\":3,\"file\":\"DeletePlaylist.svelte\",\"sources\":[\"DeletePlaylist.svelte\"],\"sourcesContent\":[\"<script>\\n    import { playliststore } from './PlaylistListStore.js'\\n    export let PLID;\\n    let NPL;\\n\\tasync function getDeletePlaylistFromDB() {\\n        fetch(`http://192.168.0.31:6789/DeletePlaylistFromDB?playlistid=${PLID}`, {mode: \\\"cors\\\", method: \\\"GET\\\"})\\n        .then(r => r.json())\\n        .then(data => {\\n            NPL = data.npl;\\n            playliststore.set(NPL)\\n        })\\n    }\\n    let deleteClick = () => {\\n        let promise = getDeletePlaylistFromDB().catch(err => console.log(err));\\n    }\\n\\n</script>\\n\\n<button id=\\\"delete\\\" on:click={deleteClick} >Delete</button>\\n\\n<style>\\n\\n    button#delete {\\n        background-color: red;\\n        color: white;\\n        border: none;\\n        padding: 7px;\\n    }\\n\\n</style>\"],\"names\":[],\"mappings\":\"AAsBI,MAAM,OAAO,eAAC,CAAC,AACX,gBAAgB,CAAE,GAAG,CACrB,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,GAAG,AAChB,CAAC\"}"
};

const DeletePlaylist = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let { PLID } = $$props;

	if ($$props.PLID === void 0 && $$bindings.PLID && PLID !== void 0) $$bindings.PLID(PLID);
	$$result.css.add(css$2);
	return `<button id="${"delete"}" class="${"svelte-1le1i94"}">Delete</button>`;
});

/* src/components/PlaylistComps/LoadPlaylist.svelte generated by Svelte v3.24.0 */

const css$3 = {
	code: "img.svelte-rmqprw{float:right;margin-right:50px}",
	map: "{\"version\":3,\"file\":\"LoadPlaylist.svelte\",\"sources\":[\"LoadPlaylist.svelte\"],\"sourcesContent\":[\"<script>\\n    export let PLID;\\n    \\n\\n\\tlet SONGS = [];\\n\\tasync function getCreatePlayerPlaylist() {\\n        let addr = `http://192.168.0.31:6789/CreatePlayerPlaylist?playlistid=${PLID}`\\n        console.log(addr)\\n\\t\\tawait fetch(addr, {mode: \\\"cors\\\", method: \\\"GET\\\"})\\n\\t\\t.then(r => r.json())\\n\\t\\t.then(data => {\\n            SONGS = data.makePL;\\n            console.log(SONGS[0])\\n        }).catch(err => console.log(err));\\n    }\\n    \\n    // async function handleLoadSubmit(event) {\\n    async function handleLoadSubmit() {\\n        // console.log(event.target.SONGS)\\n        // plname = event.target.plname.value;\\n        let promise = getCreatePlayerPlaylist().catch(err => console.log(err));\\n        console.log(\\\"this is songs from loadplaylist page\\\")\\n        console.log(SONGS)\\n    }\\n\\n</script>\\n\\n<button id=\\\"playlistLoadBtn\\\" on:click={handleLoadSubmit} >Load</button>\\n\\n{#if PLID !== \\\"\\\"}\\n    {#each SONGS as s}\\n        <div>\\n            <img src={s.thumbnail} alt=\\\"fuck\\\"/>\\n            <p>{s.artist}</p>\\n            <p>{s.album}</p>\\n            <p>{s.name}</p>\\n        </div>\\n    {/each}\\n{:else}\\n    <p>Whoops no Playlist selected</p>\\n{/if}\\n\\n<style>\\n    img {\\n        float: right;\\n        margin-right: 50px;\\n    }\\n</style>\"],\"names\":[],\"mappings\":\"AA2CI,GAAG,cAAC,CAAC,AACD,KAAK,CAAE,KAAK,CACZ,YAAY,CAAE,IAAI,AACtB,CAAC\"}"
};

const LoadPlaylist = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let { PLID } = $$props;
	let SONGS = [];

	if ($$props.PLID === void 0 && $$bindings.PLID && PLID !== void 0) $$bindings.PLID(PLID);
	$$result.css.add(css$3);

	return `<button id="${"playlistLoadBtn"}">Load</button>

${PLID !== ""
	? `${each(SONGS, s => `<div><img${add_attribute("src", s.thumbnail, 0)} alt="${"fuck"}" class="${"svelte-rmqprw"}">
            <p>${escape(s.artist)}</p>
            <p>${escape(s.album)}</p>
            <p>${escape(s.name)}</p>
        </div>`)}`
	: `<p>Whoops no Playlist selected</p>`}`;
});

/* src/components/PlaylistComps/EditPlaylist.svelte generated by Svelte v3.24.0 */

const css$4 = {
	code: "ul.svelte-1bwgj62{list-style-type:none}button#removeBtn.svelte-1bwgj62{float:right}",
	map: "{\"version\":3,\"file\":\"EditPlaylist.svelte\",\"sources\":[\"EditPlaylist.svelte\"],\"sourcesContent\":[\"<script>\\n    export let PLID\\n \\n    let handleAllPlaylistSongsFromDBSubmit = () => {\\n        editvisible = true\\n        let promise = getAllPlaylistSongsFromDB().catch(err => console.log(err));\\n    }\\n\\tlet songlist;\\n    let songlist_count;\\n\\tasync function getAllPlaylistSongsFromDB() {\\n\\t\\tfetch(`http://192.168.0.31:6789/AllPlaylistSongsFromDB?playlistid=${PLID}`, {mode: \\\"cors\\\", method: \\\"GET\\\"})\\n\\t\\t.then(r => r.json())\\n\\t\\t.then(data => {\\n            songlist = data.taz;\\n            songlist_count = songlist.length\\n        }).catch(err => console.log(err));\\n\\t}\\n\\n    let editvisible = true;\\n    let edvi = () => {\\n        if (editvisible) {\\n            editvisible = false\\n        } else {\\n            editvisible = true\\n        }\\n    }\\n\\n    // this is for playlist song removal\\n    // DeleteSongFromPlaylist\\n    // delsongid\\n    // playlistname\\n    // result\\n\\n</script>\\n\\n\\n<button on:click={handleAllPlaylistSongsFromDBSubmit}>Edit</button>\\n{#if editvisible}\\n    {#if songlist_count > 1}\\n        {#each songlist as song}\\n            <ul>\\n                <li>\\n                    <p id={song[1]}>{song[0]}<button id=\\\"removeBtn\\\">Remove</button></p>\\n                </li>\\n            </ul>\\n        {/each}\\n        <button on:click={edvi}>Complete</button>\\n    {:else}\\n        <p>Whoops zero songs</p>\\n    {/if}\\n{/if}\\n\\n<style>\\n    ul {\\n        list-style-type: none;\\n    }\\n    button#removeBtn {\\n        float: right;\\n    }\\n\\n</style>\"],\"names\":[],\"mappings\":\"AAqDI,EAAE,eAAC,CAAC,AACA,eAAe,CAAE,IAAI,AACzB,CAAC,AACD,MAAM,UAAU,eAAC,CAAC,AACd,KAAK,CAAE,KAAK,AAChB,CAAC\"}"
};

const EditPlaylist = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let { PLID } = $$props;

	if ($$props.PLID === void 0 && $$bindings.PLID && PLID !== void 0) $$bindings.PLID(PLID);
	$$result.css.add(css$4);

	return `<button>Edit</button>
${ `${ `<p>Whoops zero songs</p>`}`
	}`;
});

/* src/components/PlaylistList.svelte generated by Svelte v3.24.0 */

const css$5 = {
	code: "nav.svelte-hk3op{margin-bottom:10px}ul.svelte-hk3op{list-style-type:none}",
	map: "{\"version\":3,\"file\":\"PlaylistList.svelte\",\"sources\":[\"PlaylistList.svelte\"],\"sourcesContent\":[\"<script>\\n    import DeletePlaylist from './PlaylistComps/DeletePlaylist.svelte'\\n    import LoadPlaylist from './PlaylistComps/LoadPlaylist.svelte'\\n    import EditPlaylist from './PlaylistComps/EditPlaylist.svelte'\\n    import { playliststore, playlistidstore } from './PlaylistComps/PlaylistListStore.js'\\n    import { onMount } from 'svelte';\\n\\n    let plid = \\\"\\\";\\n    let PLNAMES;\\n    let PLCOUNT = 0;\\n\\n\\tonMount(async function getAllPlaylists() {\\n\\t\\tfetch(`http://192.168.0.31:6789/AllPlaylists`, {mode: \\\"cors\\\", method: \\\"GET\\\"})\\n\\t\\t.then(r => r.json())\\n\\t\\t.then(data => {\\n            let cunt = [];\\n            let voo;\\n            let moo = data.plnames.map((da) => {\\n                voo = {\\n                    playlistname : da[0],\\n                    playlistid : da[1],\\n                }\\n                cunt.push(voo)\\n            })\\n            PLNAMES = cunt\\n            playliststore.set(PLNAMES)\\n            playlistidstore.set(plid)\\n            if (PLNAMES != undefined) {\\n                PLCOUNT = PLNAMES.length\\n            }\\n\\t\\t})\\n    })\\n\\n    let PPLNAMES;\\n    let PPLCOUNT;\\n    const unsubscribe = playliststore.subscribe(value => {\\n        PLNAMES = undefined;\\n        PLCOUNT = undefined;\\n        PPLNAMES = value;\\n        PPLCOUNT = PPLNAMES.length\\n    });\\n    let playlistidstore_value;\\n    const unsubplid = playlistidstore.subscribe(value => {\\n        playlistidstore_value = value\\n    })\\n        // let playlistidstore_value;\\n</script>\\n\\n<div>\\n    <p>Currently selected playlist: {plid}</p>\\n    <form>\\n        <ul>\\n            {#if PLCOUNT > 1}\\n                {#each PLNAMES as pln}\\n                    <li>\\n                        <label for={pln[1]}>{pln[0]}</label>\\n                        <input bind:group={plid} id={pln[1]} name={pln[1]} type=\\\"radio\\\" value={pln[1]}>\\n                    </li>\\n                {/each}\\n            {:else if PLCOUNT < 1}\\n                <p>Whoops no playlists found</p>\\n            {:else}\\n                <!-- <label for={PLNAMES[0]}>{PLNAMES[0]}</label> -->\\n                <!-- <input bind:group={plid} id={PLNAMES[\\\"playlistid\\\"]} name={PLN\\\"playlistname\\\"[\\\"playlistid\\\"]} type=\\\"rad\\\"playlistname\\\"value={PLNAMES[0][0]}> -->\\n            {/if}\\n\\n            {#if PPLCOUNT > 1}\\n                {#each PPLNAMES as pln}\\n                    <li>\\n                        <label for={pln[\\\"playlistid\\\"]}>{pln[\\\"playlistname\\\"]}</label>\\n                        <input bind:group={plid} id={pln[\\\"playlistid\\\"]} name= {pln[\\\"playlistid\\\"]} type=\\\"radio\\\" value={pln[\\\"playlistid\\\"]}>\\n                    </li>\\n                {/each}\\n            {:else if PPLCOUNT < 1}\\n                <p>Whoops no playlists found</p>\\n            {:else}\\n            <p>this is pplnames: {PPLNAMES[0][\\\"playlistid\\\"]}</p>\\n                <label for={PPLNAMES[0][\\\"playlistid\\\"]}>{PPLNAMES[0][\\\"playlistname\\\"]}</label>\\n                <input bind:group={plid} id={PPLNAMES[0][\\\"playlistid\\\"]} name={PPLNAMES[0][\\\"playlistname\\\"]} type=\\\"radio\\\" value={PPLNAMES[0][\\\"playlistname\\\"]}>\\n            {/if}\\n        </ul>\\n    </form>\\n</div>\\n\\n<nav>\\n    <LoadPlaylist PLID={plid} />\\n    <DeletePlaylist PLID={plid}/>\\n    <EditPlaylist PLID={plid} />\\n    \\n</nav>\\n\\n<style>\\n    nav {\\n        margin-bottom: 10px;\\n    }\\n    ul {\\n        list-style-type: none;\\n    }\\n</style>\"],\"names\":[],\"mappings\":\"AA4FI,GAAG,aAAC,CAAC,AACD,aAAa,CAAE,IAAI,AACvB,CAAC,AACD,EAAE,aAAC,CAAC,AACA,eAAe,CAAE,IAAI,AACzB,CAAC\"}"
};

const PlaylistList = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let plid = "";
	let PLNAMES;
	let PLCOUNT = 0;

	onMount(async function getAllPlaylists() {
		fetch(`http://192.168.0.31:6789/AllPlaylists`, { mode: "cors", method: "GET" }).then(r => r.json()).then(data => {
			let cunt = [];
			let voo;

			let moo = data.plnames.map(da => {
				voo = { playlistname: da[0], playlistid: da[1] };
				cunt.push(voo);
			});

			PLNAMES = cunt;
			playliststore.set(PLNAMES);
			playlistidstore.set(plid);

			if (PLNAMES != undefined) {
				PLCOUNT = PLNAMES.length;
			}
		});
	});

	let PPLNAMES;
	let PPLCOUNT;

	const unsubscribe = playliststore.subscribe(value => {
		PLNAMES = undefined;
		PLCOUNT = undefined;
		PPLNAMES = value;
		PPLCOUNT = PPLNAMES.length;
	});

	const unsubplid = playlistidstore.subscribe(value => {
	});

	$$result.css.add(css$5);

	return `<div><p>Currently selected playlist: ${escape(plid)}</p>
    <form><ul class="${"svelte-hk3op"}">${PLCOUNT > 1
	? `${each(PLNAMES, pln => `<li><label${add_attribute("for", pln[1], 0)}>${escape(pln[0])}</label>
                        <input${add_attribute("id", pln[1], 0)}${add_attribute("name", pln[1], 0)} type="${"radio"}"${add_attribute("value", pln[1], 0)}>
                    </li>`)}`
	: `${PLCOUNT < 1
		? `<p>Whoops no playlists found</p>`
		: `
                `}`}

            ${PPLCOUNT > 1
	? `${each(PPLNAMES, pln => `<li><label${add_attribute("for", pln["playlistid"], 0)}>${escape(pln["playlistname"])}</label>
                        <input${add_attribute("id", pln["playlistid"], 0)}${add_attribute("name", pln["playlistid"], 0)} type="${"radio"}"${add_attribute("value", pln["playlistid"], 0)}>
                    </li>`)}`
	: `${PPLCOUNT < 1
		? `<p>Whoops no playlists found</p>`
		: `<p>this is pplnames: ${escape(PPLNAMES[0]["playlistid"])}</p>
                <label${add_attribute("for", PPLNAMES[0]["playlistid"], 0)}>${escape(PPLNAMES[0]["playlistname"])}</label>
                <input${add_attribute("id", PPLNAMES[0]["playlistid"], 0)}${add_attribute("name", PPLNAMES[0]["playlistname"], 0)} type="${"radio"}"${add_attribute("value", PPLNAMES[0]["playlistname"], 0)}>`}`}</ul></form></div>

<nav class="${"svelte-hk3op"}">${validate_component(LoadPlaylist, "LoadPlaylist").$$render($$result, { PLID: plid }, {}, {})}
    ${validate_component(DeletePlaylist, "DeletePlaylist").$$render($$result, { PLID: plid }, {}, {})}
    ${validate_component(EditPlaylist, "EditPlaylist").$$render($$result, { PLID: plid }, {}, {})}
    
</nav>`;
});

/* src/components/PlaylistComps/AudioPlayer.svelte generated by Svelte v3.24.0 */

const css$6 = {
	code: "ol.svelte-1fl1oc6.svelte-1fl1oc6{list-style:none;margin:0;padding:0}ol.svelte-1fl1oc6 li.svelte-1fl1oc6{margin:0;list-style:decimal outside}.svelte-1fl1oc6.svelte-1fl1oc6{-webkit-tap-highlight-color:rgba(0,0,0,0);-webkit-tap-highlight-color:transparent}.player-wrap.svelte-1fl1oc6.svelte-1fl1oc6{margin:0 0 1em;padding:0;background-color:white}.playlist-wrap.svelte-1fl1oc6.svelte-1fl1oc6{background-color:#222}.playlist-wrap.svelte-1fl1oc6 li.svelte-1fl1oc6{margin:0 0 0 3em;padding:.25em 0 .25em .5em;list-style:decimal outside}",
	map: "{\"version\":3,\"file\":\"AudioPlayer.svelte\",\"sources\":[\"AudioPlayer.svelte\"],\"sourcesContent\":[\"<script>\\n    // // HTML5 audio player + playlist controls\\n    let jsPlayer = document.querySelector('.player-wrap');\\n    if (jsPlayer) {\\n        jsPlayer = {\\n            wrap: jsPlayer,\\n            player: (jsPlayer.querySelector('audio') ),\\n    //         player: (jsPlayer.querySelector('audio') || { play: function(){}, pause: function(){} }),\\n\\n    //         play: (jsPlayer.querySelector('.play') || {}),\\n    //         pause: (jsPlayer.querySelector('.pause') || {}),\\n    //         seek: (jsPlayer.querySelector('.seek') || {}),\\n    //         prev: (jsPlayer.querySelector('.prev') || {}),\\n            next: (jsPlayer.querySelector('.next') || {}),\\n    //         button: (jsPlayer.querySelector('.button') || { style: {} }),\\n    //         wrapList: (document.querySelector('.playlist-wrap') || {}),\\n    //         action: (jsPlayer.querySelector('.action') || {}),\\n    //         title: (jsPlayer.querySelector('.title') || {}),\\n    //         current: (jsPlayer.querySelector('.current') || {}),\\n    //         duration: (jsPlayer.querySelector('.duration') || {}),\\n            trackCount: 0,\\n    //     seeking: null,\\n            playing: false,\\n            tracks: [],\\n            track: [],\\n            idx: 0\\n        };\\n\\n    //     jsPlayer.playClicked = function jsPlayerPlayClicked(){\\n    //         jsPlayer.button.style.visibility = 'hidden';\\n    //         jsPlayer.pause.style.display = 'block';\\n    //         jsPlayer.play.style.display = 'none';\\n    //         jsPlayer.playing = true;\\n    //         jsPlayer.action.innerHTML = 'Now Playing&hellip;';\\n    //         jsPlayer.player.play();\\n    //         jsPlayer.updateSeek();\\n    //     };\\n    //     jsPlayer.pauseClicked = function jsPlayerPauseClicked(){\\n    //         jsPlayer.play.style.display = 'block';\\n    //         jsPlayer.pause.style.display = 'none';\\n    //         clearTimeout(jsPlayer.seeking);\\n    //         jsPlayer.playing = false;\\n    //         jsPlayer.action.innerHTML = 'Paused&hellip;';\\n    //         jsPlayer.player.pause();\\n    //     };\\n    //     jsPlayer.loadPlaylist = function jaPlayerLoadPlaylist(){\\n    //         jsPlayer.playlist = jsPlayer.wrapList? jsPlayer.wrapList.querySelectorAll('ol > li') : [];\\n    //         var len = jsPlayer.playlist.length,\\n    //             tmp, i;\\n    //         for (i = 0; i < len; i++) {\\n    //             if (!jsPlayer.playlist[i].dataset) {\\n    //                 jsPlayer.playlist[i].dataset = {};\\n    //             }\\n    //             tmp = jsPlayer.playlist[i].querySelector('a');\\n    //             if (tmp && !jsPlayer.playlist[i].dataset.idx) {\\n    //                 jsPlayer.playlist[i].dataset.idx = i + 1;\\n    //                 jsPlayer.trackCount++;\\n    //                 jsPlayer.tracks.push({\\n    //                     \\\"file\\\": tmp.href,\\n    //                     \\\"name\\\": (tmp.textContent || tmp.innerText).replace(/^\\\\s+|\\\\s+$/g, ''),\\n    //                     \\\"track\\\": i + 1\\n    //                 });\\n    //             }\\n    //         }\\n    //     };\\n    //     jsPlayer.loadTrack = function jsPlayerLoadTrack(idx){\\n    //         var len = jsPlayer.playlist.length,\\n    //             i;\\n    //         for (i=0; i < len; i++) {\\n    //             if (jsPlayer.playlist[i].classList) {\\n    //                 if (i === idx) {\\n    //                     jsPlayer.playlist[i].classList.add('sel');\\n    //                 } else {\\n    //                     jsPlayer.playlist[i].classList.remove('sel');\\n    //                 }\\n    //             }\\n    //         }\\n    //         jsPlayer.title.innerHTML = jsPlayer.tracks[idx].name;\\n    //         jsPlayer.player.src = jsPlayer.tracks[idx].file + '.mp3';\\n    //     };\\n    //     jsPlayer.playTrack = function jsPlayerPlayTrack(idx){\\n    //         jsPlayer.loadTrack(idx);\\n    //         jsPlayer.playing = true;\\n    //         jsPlayer.playClicked();\\n    //     };\\n        jsPlayer.init = function jsPlayerInit(){\\n            var track = (jsPlayer.wrap && jsPlayer.wrap.dataset && jsPlayer.wrap.dataset.url)? jsPlayer.wrap : null,\\n                tmp, i;\\n    //         if (!!document.createElement('audio').canPlayType('audio/mpeg')) {\\n    //             if (jsPlayer.wrapList && jsPlayer.wrapList.querySelectorAll('ol > li').length > 0) {\\n    //                 jsPlayer.loadPlaylist();\\n    //             } else if (track) {\\n    //                 jsPlayer.tracks = [{\\n    //                     \\\"file\\\": track.dataset.url,\\n    //                     \\\"name\\\": (track.dataset.title || ''),\\n    //                     \\\"track\\\": 1\\n    //                 }];\\n    //             }\\n    //             if (jsPlayer.tracks.length > 0) {\\n    //                 if (jsPlayer.player) {\\n    //                     jsPlayer.player.addEventListener('ended', function playerEnded(){\\n    //                         if (jsPlayer.idx + 1 < jsPlayer.trackCount) {\\n    //                             jsPlayer.idx++;\\n    //                             jsPlayer.playTrack(jsPlayer.idx);\\n    //                         } else {\\n    //                             jsPlayer.action.innerHTML = 'Paused&hellip;';\\n    //                             jsPlayer.player.pause();\\n    //                             jsPlayer.idx = 0;\\n    //                             jsPlayer.loadTrack(jsPlayer.idx);\\n    //                         }\\n    //                     }, true);\\n    //                     jsPlayer.player.addEventListener('loadeddata', function playerLoadeddata(){\\n    //                         jsPlayer.setDuration();\\n    //                     }, true);\\n    //                 }\\n    //                 if (jsPlayer.play) {\\n    //                     jsPlayer.play.addEventListener('click', jsPlayer.playClicked, true);\\n    //                 }\\n    //                 if (jsPlayer.pause) {\\n    //                     jsPlayer.pause.addEventListener('click', jsPlayer.pauseClicked, true);\\n    //                 }\\n    //                 if (jsPlayer.button) {\\n    //                     jsPlayer.button.addEventListener('click', function buttonClicked(event){\\n    //                         event.preventDefault();\\n    //                         jsPlayer.playClicked();\\n    //                     }, true);\\n    //                 }\\n    //                 if (jsPlayer.prev) {\\n    //                     jsPlayer.prev.addEventListener('click', function prevClicked(event){\\n    //                         event.preventDefault();\\n    //                         if (jsPlayer.idx - 1 > -1) {\\n    //                             jsPlayer.idx--;\\n    //                             jsPlayer.loadTrack(jsPlayer.idx);\\n    //                             if (jsPlayer.playing) {\\n    //                                 jsPlayer.action.innerHTML = 'Now Playing&hellip;';\\n    //                                 jsPlayer.player.play();\\n    //                             }\\n    //                         } else {\\n    //                             jsPlayer.action.innerHTML = 'Paused&hellip;';\\n    //                             jsPlayer.playing = false;\\n    //                             jsPlayer.player.pause();\\n    //                             jsPlayer.idx = 0;\\n    //                             jsPlayer.loadTrack(jsPlayer.idx);\\n    //                         }\\n    //                     }, true);\\n    //                 }\\n    //                 if (jsPlayer.next) {\\n    //                     jsPlayer.next.addEventListener('click', function nextClicked(event){\\n    //                         event.preventDefault();\\n    //                         if (jsPlayer.idx + 1 < jsPlayer.trackCount) {\\n    //                             jsPlayer.idx++;\\n    //                             jsPlayer.loadTrack(jsPlayer.idx);\\n    //                             if (jsPlayer.playing) {\\n    //                                 jsPlayer.action.innerHTML = 'Now Playing&hellip;';\\n    //                                 jsPlayer.player.play();\\n    //                             }\\n    //                         } else {\\n    //                             jsPlayer.action.innerHTML = 'Paused&hellip;';\\n    //                             jsPlayer.playing = false;\\n    //                             jsPlayer.player.pause();\\n    //                             jsPlayer.idx = 0;\\n    //                             jsPlayer.loadTrack(jsPlayer.idx);\\n    //                         }\\n    //                     }, true);\\n    //                 }\\n    //                 if (jsPlayer.seek) {\\n    //                     jsPlayer.seek.addEventListener('mousedown', function seekClicked(){\\n    //                         clearTimeout(jsPlayer.seeking);\\n    //                         jsPlayer.action.innerHTML = 'Paused&hellip;';\\n    //                         jsPlayer.player.pause();\\n    //                     }, true);\\n    //                     jsPlayer.seek.addEventListener('mouseup', function seekReleased(){\\n    //                         jsPlayer.player.currentTime = jsPlayer.seek.value * jsPlayer.player.duration / 100;\\n    //                         jsPlayer.updateSeek();\\n    //                         if (jsPlayer.playing) {\\n    //                             jsPlayer.action.innerHTML = 'Now Playing&hellip;';\\n    //                             jsPlayer.player.play();\\n    //                         }\\n    //                     }, true);\\n    //                 }\\n    //                 if (jsPlayer.wrapList) {\\n    //                     jsPlayer.wrapList.addEventListener('click', function listClicked(event){\\n    //                         var parent = event.target.parentNode;\\n    //                         if (parent.parentNode.tagName.toLowerCase() === 'ol') {\\n    //                             event.preventDefault();\\n    //                             var len = jsPlayer.playlist.length,\\n    //                             i;\\n    //                             for (i = 0; i < len; i++) {\\n    //                                 if (parent.dataset.idx == i + 1) {\\n    //                                     jsPlayer.idx = i;\\n    //                                     jsPlayer.playTrack(jsPlayer.idx);\\n    //                                     i = len;\\n    //                                 }\\n    //                             }\\n    //                         }\\n    //                     }, true);\\n    //                 }\\n    //                 jsPlayer.setDuration = function setDuration() {\\n    //                     jsPlayer.duration.innerHTML = jsPlayer.formatTime(jsPlayer.player.duration);\\n    //                     jsPlayer.current.innerHTML = jsPlayer.formatTime(jsPlayer.player.currentTime);\\n    //                     jsPlayer.seek.value = jsPlayer.player.currentTime / jsPlayer.player.duration;\\n    //                 };\\n    //                 jsPlayer.updateSeek = function updateSeek() {\\n    //                     jsPlayer.seek.value = 100 * jsPlayer.player.currentTime / jsPlayer.player.duration;\\n    //                     jsPlayer.current.innerHTML = jsPlayer.formatTime(jsPlayer.player.currentTime);\\n    //                     if (jsPlayer.playing) {\\n    //                         jsPlayer.seeking = setTimeout(jsPlayer.updateSeek, 500);\\n    //                     }\\n    //                 };\\n    //                 jsPlayer.formatTime = function formatTime(val) {\\n    //                     var h = 0, m = 0, s;\\n    //                     val = parseInt(val, 10);\\n    //                     if (val > 60 * 60) {\\n    //                         h = parseInt(val / (60 * 60), 10);\\n    //                         val -= h * 60 * 60;\\n    //                     }\\n    //                     if (val > 60) {\\n    //                         m = parseInt(val / 60, 10);\\n    //                         val -= m * 60;\\n    //                     }\\n    //                     s = val;\\n    //                     val = (h > 0)? h + ':' : '';\\n    //                     val += (m > 0)? ((m < 10 && h > 0)? '0' : '') + m + ':' : '0:';\\n    //                     val += ((s < 10)? '0' : '') + s;\\n    //                     return val;\\n    //                 };\\n    //             }\\n    //         }\\n    //         if (jsPlayer.tracks.length > 0) {\\n    //             jsPlayer.wrap.className += ' enabled';\\n    //             jsPlayer.loadTrack(jsPlayer.idx);\\n    //         }\\n        };\\n        jsPlayer.init();\\n    }\\n\\n</script>\\n\\n\\n\\n<!-- <div class=\\\"page\\\"> -->\\n    <!-- <audio src=\\\"boo1.mp3\\\" controls ></audio> -->\\n\\t<!-- <div class=\\\"player-wrap\\\" data-url=\\\"\\\" data-title=\\\"Boo1\\\">\\n            <audio controls ></audio>\\n            <div class=\\\"button\\\">Play</div>\\n\\n        \\n    </div> -->\\n        <!-- <div class=\\\"info\\\"> -->\\n            <!-- <h1>Album: Mythium</h1> -->\\n            <!-- <p class=\\\"action\\\">&nbsp;</p>\\n            <p class=\\\"title ellipsis\\\"></p> -->\\n\\n            <!-- <audio src=\\\"\\\" controls ></audio> -->\\n            \\n            <!-- <div class=\\\"player\\\">\\n                <audio preload controls ></audio> -->\\n                <!-- <div class=\\\"playpause\\\">\\n                    <div class=\\\"play\\\"><svg viewBox=\\\"0 0 2 2\\\"><path d=\\\"M0,0 L0,14 L11,7 L0,0 Z\\\"/></svg></div>\\n                    <div class=\\\"pause\\\"><svg viewBox=\\\"0 0 14 14\\\"><path d=\\\"M0,14 L4,14 L4,0 L0,0 L0,14 L0,14 Z M8,0 L8,14 L12,14 L12,0 L8,0 L8,0 Z\\\"/></svg></div>\\n                </div> -->\\n                <!-- <div class=\\\"timer\\\">\\n                    <div class=\\\"current\\\">0:00:00</div>\\n                    <div>/</div>\\n                    <div class=\\\"duration\\\">0:00:00</div>\\n                </div> -->\\n                <!-- <div><input type=\\\"range\\\" min=\\\"0\\\" max=\\\"100\\\" step=\\\".1\\\" value=\\\"0\\\" class=\\\"seek\\\"></div> -->\\n                <!-- <div class=\\\"prev\\\"><svg viewBox=\\\"0 0 12 12\\\"><path d=\\\"M3.5,6 L12,12 L12,0 L3.5,6 Z M0,0 L0,12 L2,12 L2,0 L0,0 L0,0 Z\\\"/></svg></div>\\n                <div class=\\\"next\\\"><svg viewBox=\\\"0 0 12 12\\\"><path d=\\\"M0,12 L8.5,6 L0,0 L0,12 L0,12 Z M10,0 L10,12 L12,12 L12,0 L10,0 L10,0 Z\\\"/></svg></div> -->\\n            <!-- </div> -->\\n        <!-- </div> -->\\n    <!-- </div> -->\\n\\n<div class=\\\"player-wrap\\\" data-url=\\\"boo1.mp3\\\" data-title=\\\"Boo1\\\" >\\n    <audio src=\\\"\\\" controls ></audio>\\n</div>\\n\\n\\n<div>\\n\\t<div class=\\\"playlist-wrap\\\">\\n\\t\\t<ol>\\n\\t\\t\\t<li><a href=\\\"boo1.mp3\\\">Boo1</a></li>\\n\\t\\t\\t<li><a href=\\\"boo2.mp3\\\">Boo2</a></li>\\n\\t\\t\\t<!-- <li><a href=\\\"//archive.org/download/mythium/BS_ATKM\\\">All The King's Men - Broadwing Studio (Final Mix)</a></li>\\n\\t\\t\\t<li><a href=\\\"//archive.org/download/mythium/BSFM_TF\\\">The Forsaken - Broadwing Studio (First Mix)</a></li>\\n\\t\\t\\t<li><a href=\\\"//archive.org/download/mythium/BSFM_ATKM\\\">All The King's Men - Broadwing Studio (First Mix)</a></li>\\n\\t\\t\\t<li><a href=\\\"//archive.org/download/mythium/AC_ATI\\\">All This Is - Alternate Cuts</a></li>\\n\\t\\t\\t<li><a href=\\\"//archive.org/download/mythium/AC_ATKMTake_1\\\">All The King's Men (Take 1) - Alternate Cuts</a></li>\\n\\t\\t\\t<li><a href=\\\"//archive.org/download/mythium/AC_ATKMTake_2\\\">All The King's Men (Take 2) - Alternate Cuts</a></li>\\n\\t\\t\\t<li><a href=\\\"//archive.org/download/mythium/AC_M\\\">Magus - Alternate Cuts</a></li>\\n\\t\\t\\t<li><a href=\\\"//archive.org/download/mythium/AC_TSOWAfucked_up\\\">The State Of Wearing Address (fucked up) - Alternate Cuts</a></li>\\n\\t\\t\\t<li><a href=\\\"//archive.org/download/mythium/PNY04-05_M\\\">Magus - Popeye's (New Years '04 - '05)</a></li>\\n\\t\\t\\t<li><a href=\\\"//archive.org/download/mythium/PNY04-05_OTW\\\">On The Waterfront - Popeye's (New Years '04 - '05)</a></li>\\n\\t\\t\\t<li><a href=\\\"//archive.org/download/mythium/PNY04-05_T\\\">Trance - Popeye's (New Years '04 - '05)</a></li>\\n\\t\\t\\t<li><a href=\\\"//archive.org/download/mythium/PNY04-05_TF\\\">The Forsaken - Popeye's (New Years '04 - '05)</a></li>\\n\\t\\t\\t<li><a href=\\\"//archive.org/download/mythium/PNY04-05_TSOWA\\\">The State Of Wearing Address - Popeye's (New Years '04 - '05)</a></li>\\n\\t\\t\\t<li><a href=\\\"//archive.org/download/mythium/PVD_M\\\">Magus - Popeye's (Valentine's Day '05)</a></li>\\n\\t\\t\\t<li><a href=\\\"//archive.org/download/mythium/PVD_T\\\">Trance - Popeye's (Valentine's Day '05)</a></li>\\n\\t\\t\\t<li><a href=\\\"//archive.org/download/mythium/PVD_TSOWA\\\">The State Of Wearing Address - Popeye's (Valentine's Day '05)</a></li>\\n\\t\\t\\t<li><a href=\\\"//archive.org/download/mythium/SSB01_08_04_ATI\\\">All This Is - Smith St. Basement (01/08/04)</a></li>\\n\\t\\t\\t<li><a href=\\\"//archive.org/download/mythium/SSB01_08_04_M\\\">Magus - Smith St. Basement (01/08/04)</a></li>\\n\\t\\t\\t<li><a href=\\\"//archive.org/download/mythium/SSB06_06_03_BTPE\\\">Beneath The Painted Eye - Smith St. Basement (06/06/03)</a></li>\\n\\t\\t\\t<li><a href=\\\"//archive.org/download/mythium/SSB06_06_03_I\\\">Innocence - Smith St. Basement (06/06/03)</a></li>\\n\\t\\t\\t<li><a href=\\\"//archive.org/download/mythium/SSB06_06_03_M\\\">Magus - Smith St. Basement (06/06/03)</a></li>\\n\\t\\t\\t<li><a href=\\\"//archive.org/download/mythium/SSB06_06_03_ME\\\">Madness Explored - Smith St. Basement (06/06/03)</a></li>\\n\\t\\t\\t<li><a href=\\\"//archive.org/download/mythium/SSB06_06_03_TF\\\">The Forsaken - Smith St. Basement (06/06/03)</a></li>\\n\\t\\t\\t<li><a href=\\\"//archive.org/download/mythium/SSB12_28_03_ATI\\\">All This Is - Smith St. Basement (12/28/03)</a></li>\\n\\t\\t\\t<li><a href=\\\"//archive.org/download/mythium/SSB12_28_03_M\\\">Magus - Smith St. Basement (12/28/03)</a></li>\\n\\t\\t\\t<li><a href=\\\"//archive.org/download/mythium/SSB12_28_03_ME\\\">Madness Explored - Smith St. Basement (12/28/03)</a></li>\\n\\t\\t\\t<li><a href=\\\"//archive.org/download/mythium/SSB12_28_03_T\\\">Trance - Smith St. Basement (12/28/03)</a></li>\\n\\t\\t\\t<li><a href=\\\"//archive.org/download/mythium/SSB12_28_03_TF\\\">The Forsaken - Smith St. Basement (12/28/03)</a></li>\\n\\t\\t\\t<li><a href=\\\"//archive.org/download/mythium/SSB___11_03_ATITake_1\\\">All This Is (Take 1) - Smith St. Basement (Nov. '03)</a></li>\\n\\t\\t\\t<li><a href=\\\"//archive.org/download/mythium/SSB___11_03_ATITake_2\\\">All This Is (Take 2) - Smith St. Basement (Nov. '03)</a></li>\\n\\t\\t\\t<li><a href=\\\"//archive.org/download/mythium/SSB___11_03_BTPETake_1\\\">Beneath The Painted Eye (Take 1) - Smith St. Basement (Nov. '03)</a></li>\\n\\t\\t\\t<li><a href=\\\"//archive.org/download/mythium/SSB___11_03_BTPETake_2\\\">Beneath The Painted Eye (Take 2) - Smith St. Basement (Nov. '03)</a></li>\\n\\t\\t\\t<li><a href=\\\"//archive.org/download/mythium/SSB___11_03_TFTake_1\\\">The Forsaken (Take 1) - Smith St. Basement (Nov. '03)</a></li>\\n\\t\\t\\t<li><a href=\\\"//archive.org/download/mythium/SSB___11_03_TFTake_2\\\">The Forsaken (Take 2) - Smith St. Basement (Nov. '03)</a></li> -->\\n\\t\\t</ol>\\n\\t</div>\\n</div>\\n\\n<style>\\n    /* >> reset */\\n    /* html, body, div, span, h1, p, a, ol, li, audio {\\n        border: 0;\\n        font: inherit;\\n        font-size: 100%;\\n        margin: 0;\\n        padding: 0;\\n        vertical-align: baseline;\\n    } */\\n    ol {\\n        list-style: none;\\n        margin: 0;\\n        padding: 0;\\n    }\\n    ol li {\\n        margin: 0;\\n        list-style: decimal outside;\\n    }\\n    * {\\n        -webkit-tap-highlight-color: rgba(0,0,0,0);\\n        -webkit-tap-highlight-color: transparent;\\n    }\\n    /* html, body {\\n        margin: 0;\\n        padding: 0;\\n        height: 100%;\\n    } */\\n    /* body {\\n        padding: 5px 0;\\n        background: #111 none;\\n        font: 20px/24px 'Helvetica', 'Arial', sans-serif;\\n        color: #eee;\\n    } */\\n    /* a, a:focus, a:active, a:hover, a:visited {\\n        text-decoration: none;\\n    }\\n    a[href], a[href]:active, a[href]:visited {\\n        color: #ddd;\\n        outline: 0 none;\\n        text-decoration: underline;\\n    }\\n    a[href]:hover, a[href]:focus {\\n        color: #bbb;\\n    } */\\n    /* << reset */\\n\\n    /* page style */\\n    /* .page {\\n        position: relative;\\n        margin: 0 auto;\\n        width: 70%;\\n        min-width: 300px;\\n        max-width: 700px;\\n    } */\\n    /* .ellipsis {\\n    overflow: hidden;\\n    text-overflow: ellipsis;\\n    white-space: nowrap;\\n    } */\\n\\n    /* Audio Player */\\n    .player-wrap {\\n        /* position: relative; */\\n        margin: 0 0 1em;\\n        padding: 0;\\n        background-color: white;\\n        /* background-color: #222; */\\n    }\\n    /* .player-wrap.enabled {\\n        padding-bottom: 4em;\\n    }\\n    .player-wrap .button {\\n        float: left;\\n        display: none;\\n        margin: 1.5em 2em;\\n        width: 5em;\\n        height: 5em;\\n        background-color: #333;\\n        background-color: purple;\\n        line-height: 5em;\\n        text-align: center;\\n        border-radius: 25%;\\n        color: white;\\n    } */\\n    /* .player-wrap .button:hover {\\n    background-color: purple;\\n        cursor: pointer;\\n    }\\n    .player-wrap.enabled .button {\\n        display: block;\\n    }\\n    .player-wrap .info {\\n        margin-left: 10em;\\n    }\\n    .player-wrap h1 {\\n        padding: 1.5em 0;\\n    }\\n    .player-wrap .action {\\n        font-style: italic;\\n    } */\\n    /* .player-wrap .player {\\n        position: absolute;\\n    display: none;\\n        left: 0;\\n        bottom: 0;\\n        padding: 0 1em 0 6em;\\n        width: 100%;\\n        height: 1em;\\n        background-color: #333;\\n        font-size: 2em;\\n        box-sizing: border-box;\\n    }\\n    .player-wrap.enabled .player {\\n        display: block;\\n    }\\n    .player-wrap .player svg {\\n        margin: .25em;\\n        width: .5em;\\n        height: .5em;\\n        fill: currentColor;\\n    } */\\n    /* .player-wrap .player div {\\n        display: block;\\n        height: 1em;\\n    }\\n    .player-wrap audio,\\n    .player-wrap .player .pause {\\n        display: none;\\n    }\\n    .player-wrap .playpause, .player-wrap .timer,\\n    .player-wrap .prev, .player-wrap .next {\\n        position: absolute;\\n        left: 0;\\n        bottom: 0;\\n        display: block;\\n        height: 1em;\\n        line-height: 1em;\\n        text-align: center;\\n    } */\\n    /* .player-wrap .playpause,\\n    .player-wrap .prev, .player-wrap .next {\\n        width: 1em;\\n        cursor: pointer;\\n    }\\n    .player-wrap .playpause {\\n        left: 1em;\\n    }\\n    .player-wrap .next {\\n        left: auto;\\n        right: 0;\\n    }\\n    .player-wrap .playpause:hover,\\n    .player-wrap .prev:hover, .player-wrap .next:hover {\\n        background-color: #444;\\n    }\\n    .player-wrap .playpause, .player-wrap .play, .player-wrap .pause,\\n    .player-wrap .prev::-moz-focus-inner,\\n    .player-wrap .next::-moz-focus-inner {\\n        border: 0;\\n        padding: 0;\\n    } */\\n    /* .player-wrap .timer {\\n        left: 2em;\\n        width: 4em;\\n    }\\n    .player-wrap .timer div {\\n        display: inline-block;\\n        height: 100%;\\n        vertical-align: top;\\n        font-size: .45em;\\n    }\\n    .player-wrap .seek {\\n        box-sizing: border-box;\\n        margin: 0;\\n        padding: 0;\\n        width: 100%;\\n        height: 100%;\\n        color: blue;\\n    } */\\n    .playlist-wrap {\\n        background-color: #222;\\n    }\\n    .playlist-wrap li {\\n        margin: 0 0 0 3em;\\n        padding: .25em 0 .25em .5em;\\n        list-style: decimal outside;\\n    }\\n    /* .playlist-wrap li.sel {\\n        background-color: #333;\\n    }\\n    .playlist-wrap li:hover {\\n        background-color: #444;\\n    } */\\n\\n    /* >> input[type=range] class: seek */\\n    /* input.seek[type=range] {\\n        box-sizing: border-box;\\n\\n        background-color: transparent;\\n        vertical-align: top;\\n        font-size: 1em;\\n        -webkit-appearance: none;\\n    }\\n    input.seek[type=range]:focus {\\n        outline: none;\\n    }\\n    input.seek[type=range]::-webkit-slider-runnable-track {\\n        box-sizing: border-box;\\n        width: 98%;\\n        height: .17em;\\n        background-color: #eee;\\n        cursor: pointer;\\n        border-radius: .1em;\\n        transition: all .2s ease;\\n    }\\n    input.seek[type=range]::-webkit-slider-thumb {\\n        box-sizing: border-box;\\n        width: .17em;\\n        height: .7em;\\n        margin-top: -.27em;\\n        border-radius: .1em;\\n        background-color: #eee;\\n        cursor: pointer;\\n        -webkit-appearance: none;\\n    }\\n    input.seek[type=range]:focus::-webkit-slider-runnable-track {\\n        background-color: #eee;\\n    }\\n    input.seek[type=range]::-moz-range-track {\\n        box-sizing: border-box;\\n        border: 0 solid #eee;\\n        width: 98%;\\n        height: .17em;\\n        background-color: #eee;\\n        cursor: pointer;\\n        border-radius: .1em;\\n        transition: all .2s ease;\\n    }\\n    input.seek[type=range]::-moz-range-thumb {\\n        box-sizing: border-box;\\n        border: 0 solid #eee;\\n        width: .17em;\\n        height: .7em;\\n        background-color: #eee;\\n        cursor: pointer;\\n        border-radius: .1em;\\n    }\\n    input.seek[type=range]::-ms-track {\\n        box-sizing: border-box;\\n        border: 0 none;\\n        width: 98%;\\n        height: .17em;\\n        background-color: transparent;\\n        color: transparent;\\n        cursor: pointer;\\n        transition: all .2s ease;\\n    }\\n    input.seek[type=range]::-ms-fill-lower {\\n        background-color: #eee;\\n        border-radius: .1em;\\n    }\\n    input.seek[type=range]::-ms-fill-upper {\\n        background-color: #eee;\\n        border-radius: .1em;\\n    }\\n    input.seek[type=range]::-ms-thumb {\\n        margin-top: -.01em;\\n        box-sizing: border-box;\\n        width: .17em;\\n        height: .7em;\\n        background-color: #eee;\\n        cursor: pointer;\\n        border-radius: .1em;\\n    }\\n    input.seek[type=range]:focus::-ms-fill-lower {\\n        background-color: #eee;\\n    }\\n    input.seek[type=range]:focus::-ms-fill-upper {\\n        background-color: #eee;\\n    } */\\n    /* << input[type=range] class: seek */\\n\\n</style>\"],\"names\":[],\"mappings\":\"AA2UI,EAAE,8BAAC,CAAC,AACA,UAAU,CAAE,IAAI,CAChB,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,CAAC,AACd,CAAC,AACD,iBAAE,CAAC,EAAE,eAAC,CAAC,AACH,MAAM,CAAE,CAAC,CACT,UAAU,CAAE,OAAO,CAAC,OAAO,AAC/B,CAAC,AACD,8BAAE,CAAC,AACC,2BAA2B,CAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAC1C,2BAA2B,CAAE,WAAW,AAC5C,CAAC,AAwCD,YAAY,8BAAC,CAAC,AAEV,MAAM,CAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CACf,OAAO,CAAE,CAAC,CACV,gBAAgB,CAAE,KAAK,AAE3B,CAAC,AAgHD,cAAc,8BAAC,CAAC,AACZ,gBAAgB,CAAE,IAAI,AAC1B,CAAC,AACD,6BAAc,CAAC,EAAE,eAAC,CAAC,AACf,MAAM,CAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CACjB,OAAO,CAAE,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAC3B,UAAU,CAAE,OAAO,CAAC,OAAO,AAC/B,CAAC\"}"
};

const AudioPlayer = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let jsPlayer = document.querySelector(".player-wrap");

	if (jsPlayer) {
		jsPlayer = {
			wrap: jsPlayer,
			player: jsPlayer.querySelector("audio"),
			//         player: (jsPlayer.querySelector('audio') || { play: function(){}, pause: function(){} }),
			//         play: (jsPlayer.querySelector('.play') || {}),
			//         pause: (jsPlayer.querySelector('.pause') || {}),
			//         seek: (jsPlayer.querySelector('.seek') || {}),
			//         prev: (jsPlayer.querySelector('.prev') || {}),
			next: jsPlayer.querySelector(".next") || {},
			//         button: (jsPlayer.querySelector('.button') || { style: {} }),
			//         wrapList: (document.querySelector('.playlist-wrap') || {}),
			//         action: (jsPlayer.querySelector('.action') || {}),
			//         title: (jsPlayer.querySelector('.title') || {}),
			//         current: (jsPlayer.querySelector('.current') || {}),
			//         duration: (jsPlayer.querySelector('.duration') || {}),
			trackCount: 0,
			//     seeking: null,
			playing: false,
			tracks: [],
			track: [],
			idx: 0
		};

		//     jsPlayer.playClicked = function jsPlayerPlayClicked(){
		//         jsPlayer.button.style.visibility = 'hidden';
		//         jsPlayer.pause.style.display = 'block';
		//         jsPlayer.play.style.display = 'none';
		//         jsPlayer.playing = true;
		//         jsPlayer.action.innerHTML = 'Now Playing&hellip;';
		//         jsPlayer.player.play();
		//         jsPlayer.updateSeek();
		//     };
		//     jsPlayer.pauseClicked = function jsPlayerPauseClicked(){
		//         jsPlayer.play.style.display = 'block';
		//         jsPlayer.pause.style.display = 'none';
		//         clearTimeout(jsPlayer.seeking);
		//         jsPlayer.playing = false;
		//         jsPlayer.action.innerHTML = 'Paused&hellip;';
		//         jsPlayer.player.pause();
		//     };
		//     jsPlayer.loadPlaylist = function jaPlayerLoadPlaylist(){
		//         jsPlayer.playlist = jsPlayer.wrapList? jsPlayer.wrapList.querySelectorAll('ol > li') : [];
		//         var len = jsPlayer.playlist.length,
		//             tmp, i;
		//         for (i = 0; i < len; i++) {
		//             if (!jsPlayer.playlist[i].dataset) {
		//                 jsPlayer.playlist[i].dataset = {};
		//             }
		//             tmp = jsPlayer.playlist[i].querySelector('a');
		//             if (tmp && !jsPlayer.playlist[i].dataset.idx) {
		//                 jsPlayer.playlist[i].dataset.idx = i + 1;
		//                 jsPlayer.trackCount++;
		//                 jsPlayer.tracks.push({
		//                     "file": tmp.href,
		//                     "name": (tmp.textContent || tmp.innerText).replace(/^\s+|\s+$/g, ''),
		//                     "track": i + 1
		//                 });
		//             }
		//         }
		//     };
		//     jsPlayer.loadTrack = function jsPlayerLoadTrack(idx){
		//         var len = jsPlayer.playlist.length,
		//             i;
		//         for (i=0; i < len; i++) {
		//             if (jsPlayer.playlist[i].classList) {
		//                 if (i === idx) {
		//                     jsPlayer.playlist[i].classList.add('sel');
		//                 } else {
		//                     jsPlayer.playlist[i].classList.remove('sel');
		//                 }
		//             }
		//         }
		//         jsPlayer.title.innerHTML = jsPlayer.tracks[idx].name;
		//         jsPlayer.player.src = jsPlayer.tracks[idx].file + '.mp3';
		//     };
		//     jsPlayer.playTrack = function jsPlayerPlayTrack(idx){
		//         jsPlayer.loadTrack(idx);
		//         jsPlayer.playing = true;
		//         jsPlayer.playClicked();
		//     };
		jsPlayer.init = function jsPlayerInit() {
			var track = jsPlayer.wrap && jsPlayer.wrap.dataset && jsPlayer.wrap.dataset.url
				? jsPlayer.wrap
				: null;
		}; //         if (!!document.createElement('audio').canPlayType('audio/mpeg')) {
		//             if (jsPlayer.wrapList && jsPlayer.wrapList.querySelectorAll('ol > li').length > 0) {
		//                 jsPlayer.loadPlaylist();
		//             } else if (track) {

		//                 jsPlayer.tracks = [{
		//                     "file": track.dataset.url,
		//                     "name": (track.dataset.title || ''),
		//                     "track": 1
		//                 }];
		//             }
		//             if (jsPlayer.tracks.length > 0) {
		//                 if (jsPlayer.player) {
		//                     jsPlayer.player.addEventListener('ended', function playerEnded(){
		//                         if (jsPlayer.idx + 1 < jsPlayer.trackCount) {
		//                             jsPlayer.idx++;
		//                             jsPlayer.playTrack(jsPlayer.idx);
		//                         } else {
		//                             jsPlayer.action.innerHTML = 'Paused&hellip;';
		//                             jsPlayer.player.pause();
		//                             jsPlayer.idx = 0;
		//                             jsPlayer.loadTrack(jsPlayer.idx);
		//                         }
		//                     }, true);
		//                     jsPlayer.player.addEventListener('loadeddata', function playerLoadeddata(){
		//                         jsPlayer.setDuration();
		//                     }, true);
		//                 }
		//                 if (jsPlayer.play) {
		//                     jsPlayer.play.addEventListener('click', jsPlayer.playClicked, true);
		//                 }
		//                 if (jsPlayer.pause) {
		//                     jsPlayer.pause.addEventListener('click', jsPlayer.pauseClicked, true);
		//                 }
		//                 if (jsPlayer.button) {
		//                     jsPlayer.button.addEventListener('click', function buttonClicked(event){
		//                         event.preventDefault();
		//                         jsPlayer.playClicked();
		//                     }, true);
		//                 }
		//                 if (jsPlayer.prev) {
		//                     jsPlayer.prev.addEventListener('click', function prevClicked(event){
		//                         event.preventDefault();
		//                         if (jsPlayer.idx - 1 > -1) {
		//                             jsPlayer.idx--;
		//                             jsPlayer.loadTrack(jsPlayer.idx);
		//                             if (jsPlayer.playing) {
		//                                 jsPlayer.action.innerHTML = 'Now Playing&hellip;';
		//                                 jsPlayer.player.play();
		//                             }
		//                         } else {
		//                             jsPlayer.action.innerHTML = 'Paused&hellip;';
		//                             jsPlayer.playing = false;
		//                             jsPlayer.player.pause();
		//                             jsPlayer.idx = 0;
		//                             jsPlayer.loadTrack(jsPlayer.idx);
		//                         }
		//                     }, true);
		//                 }
		//                 if (jsPlayer.next) {
		//                     jsPlayer.next.addEventListener('click', function nextClicked(event){
		//                         event.preventDefault();
		//                         if (jsPlayer.idx + 1 < jsPlayer.trackCount) {
		//                             jsPlayer.idx++;
		//                             jsPlayer.loadTrack(jsPlayer.idx);
		//                             if (jsPlayer.playing) {
		//                                 jsPlayer.action.innerHTML = 'Now Playing&hellip;';
		//                                 jsPlayer.player.play();
		//                             }
		//                         } else {
		//                             jsPlayer.action.innerHTML = 'Paused&hellip;';
		//                             jsPlayer.playing = false;
		//                             jsPlayer.player.pause();
		//                             jsPlayer.idx = 0;
		//                             jsPlayer.loadTrack(jsPlayer.idx);
		//                         }
		//                     }, true);
		//                 }
		//                 if (jsPlayer.seek) {
		//                     jsPlayer.seek.addEventListener('mousedown', function seekClicked(){
		//                         clearTimeout(jsPlayer.seeking);
		//                         jsPlayer.action.innerHTML = 'Paused&hellip;';
		//                         jsPlayer.player.pause();
		//                     }, true);
		//                     jsPlayer.seek.addEventListener('mouseup', function seekReleased(){
		//                         jsPlayer.player.currentTime = jsPlayer.seek.value * jsPlayer.player.duration / 100;
		//                         jsPlayer.updateSeek();
		//                         if (jsPlayer.playing) {
		//                             jsPlayer.action.innerHTML = 'Now Playing&hellip;';
		//                             jsPlayer.player.play();
		//                         }
		//                     }, true);
		//                 }
		//                 if (jsPlayer.wrapList) {
		//                     jsPlayer.wrapList.addEventListener('click', function listClicked(event){
		//                         var parent = event.target.parentNode;
		//                         if (parent.parentNode.tagName.toLowerCase() === 'ol') {
		//                             event.preventDefault();
		//                             var len = jsPlayer.playlist.length,
		//                             i;
		//                             for (i = 0; i < len; i++) {
		//                                 if (parent.dataset.idx == i + 1) {
		//                                     jsPlayer.idx = i;
		//                                     jsPlayer.playTrack(jsPlayer.idx);
		//                                     i = len;
		//                                 }
		//                             }
		//                         }
		//                     }, true);
		//                 }
		//                 jsPlayer.setDuration = function setDuration() {
		//                     jsPlayer.duration.innerHTML = jsPlayer.formatTime(jsPlayer.player.duration);
		//                     jsPlayer.current.innerHTML = jsPlayer.formatTime(jsPlayer.player.currentTime);
		//                     jsPlayer.seek.value = jsPlayer.player.currentTime / jsPlayer.player.duration;
		//                 };
		//                 jsPlayer.updateSeek = function updateSeek() {
		//                     jsPlayer.seek.value = 100 * jsPlayer.player.currentTime / jsPlayer.player.duration;
		//                     jsPlayer.current.innerHTML = jsPlayer.formatTime(jsPlayer.player.currentTime);
		//                     if (jsPlayer.playing) {
		//                         jsPlayer.seeking = setTimeout(jsPlayer.updateSeek, 500);
		//                     }
		//                 };
		//                 jsPlayer.formatTime = function formatTime(val) {
		//                     var h = 0, m = 0, s;
		//                     val = parseInt(val, 10);
		//                     if (val > 60 * 60) {
		//                         h = parseInt(val / (60 * 60), 10);
		//                         val -= h * 60 * 60;
		//                     }
		//                     if (val > 60) {
		//                         m = parseInt(val / 60, 10);
		//                         val -= m * 60;
		//                     }
		//                     s = val;
		//                     val = (h > 0)? h + ':' : '';
		//                     val += (m > 0)? ((m < 10 && h > 0)? '0' : '') + m + ':' : '0:';
		//                     val += ((s < 10)? '0' : '') + s;
		//                     return val;
		//                 };
		//             }
		//         }
		//         if (jsPlayer.tracks.length > 0) {
		//             jsPlayer.wrap.className += ' enabled';
		//             jsPlayer.loadTrack(jsPlayer.idx);
		//         }
		jsPlayer.init();
	}

	$$result.css.add(css$6);

	return `
    
	
        
            
            

            
            
            
                
                
                
                
            
        
    

<div class="${"player-wrap svelte-1fl1oc6"}" data-url="${"boo1.mp3"}" data-title="${"Boo1"}"><audio src="${""}" controls class="${"svelte-1fl1oc6"}"></audio></div>


<div class="${"svelte-1fl1oc6"}"><div class="${"playlist-wrap svelte-1fl1oc6"}"><ol class="${"svelte-1fl1oc6"}"><li class="${"svelte-1fl1oc6"}"><a href="${"boo1.mp3"}" class="${"svelte-1fl1oc6"}">Boo1</a></li>
			<li class="${"svelte-1fl1oc6"}"><a href="${"boo2.mp3"}" class="${"svelte-1fl1oc6"}">Boo2</a></li>
			</ol></div>
</div>`;
});

/* src/routes/playlists.svelte generated by Svelte v3.24.0 */

const Playlists = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	return `${($$result.head += `${($$result.title = `<title>Playlists</title>`, "")}`, "")}




<h2>Playlists</h2>

${validate_component(AddRandomPlaylist, "AddRandomPlaylist").$$render($$result, {}, {}, {})}

${validate_component(AddEmptyPlaylist, "AddEmptyPlaylist").$$render($$result, {}, {}, {})}

${validate_component(PlaylistList, "PlaylistList").$$render($$result, {}, {}, {})}

${validate_component(AudioPlayer, "AudioPlayer").$$render($$result, {}, {}, {})}`;
});

const songURLstore = writable("http://192.168.0.31:6789/Music/Chris_Stapleton/From_A_Room/01_-_Chris_Stapleton_-_From_A_Room_-_Broken_Halos.mp3");
const artiststore = writable("BAR");
const songstore = writable("BAZ");
const songidstore = writable("FOO");
const localplayURL = writable("URL");
const TVlocalplayURL = writable("URL");

/* src/components/AlbumCard.svelte generated by Svelte v3.24.0 */

const css$7 = {
	code: "button.svelte-rppcvz{float:right;margin-right:25px}.card.svelte-rppcvz{box-shadow:0 4px 8px 0 rgba(0,0,0,0.2);transition:0.3s;width:100%;margin-top:20px;margin-bottom:20px;background-color:yellowgreen;border:black;border-style:solid;border-radius:15px}.card.svelte-rppcvz:hover{box-shadow:0 8px 16px 0 rgba(0,0,0,0.2)}.container.svelte-rppcvz{padding-top:20px;padding-right:35px;float:right}img.svelte-rppcvz{padding-top:10px;padding-bottom:4px;padding-left:10px}ul.svelte-rppcvz{background-color:tomato;border:black;border-style:solid;border-radius:15px;list-style-type:none}li.svelte-rppcvz{padding:10px;width:100%}",
	map: "{\"version\":3,\"file\":\"AlbumCard.svelte\",\"sources\":[\"AlbumCard.svelte\"],\"sourcesContent\":[\"<script>\\n    import { songURLstore, artiststore, songstore } from './PlayerStore.js'\\n    import Player from '../components/Player.svelte';\\n    import { component_subscribe } from 'svelte/internal';\\n    export let artist;\\n    export let album;\\n    export let albumid;\\n    export let albumarthttppath;\\n    export let numsongs;\\n    export let songs;\\n\\n    let cardvisible = false;\\n    let cardfuck = () => {\\n      if (cardvisible) {\\n        cardvisible = false;\\n      } else {\\n        cardvisible = true;\\n      }\\n    }\\n    let SONG = \\\"\\\";\\n    let ARTIST = \\\"\\\";\\n    let FOOID = \\\"\\\";\\n    let zoo = (x) => {\\n      let promise = getSongURL().catch(err => console.log(err));\\n      async function getSongURL() {\\n        fetch(`http://192.168.0.31:6789/PathArt?selected=${x}`, {mode: \\\"cors\\\", method: \\\"GET\\\"})\\n        .then(r => r.json())\\n        .then(data => {\\n          let oid = data.HttpMusicPath\\n          FOOID = `http://192.168.0.31:6789` + oid\\n          ARTIST = data.Artist\\n          SONG = data.Song\\n          songURLstore.set(FOOID)\\n          artiststore.set(ARTIST)\\n          songstore.set(SONG)\\n        }).catch(err => console.log(err));\\n      }\\n    }\\n\\n    let handleClick = () => {\\n      promise = getSongURL().catch(err => console.log(err));\\n    }\\n\\n</script>\\n\\n<div id={albumid} class=\\\"card\\\" on:click={cardfuck}>\\n  <div class=\\\"container\\\">\\n    <h4><b>{artist}</b></h4>\\n    <p>{album}</p>\\n    <p>Songs: {numsongs}</p>\\n  </div>\\n  <img src={albumarthttppath} alt={artist}>\\n</div> \\n{#if cardvisible}\\n  <div>\\n    <ul id={albumid}>\\n      {#each songs as s}\\n        <li>\\n            <button>Add</button>\\n            <button on:click={zoo(s[1])}>Play</button>\\n            <span id={s[1]}>{s[0]}</span>\\n        </li>\\n        {/each}\\n    </ul>\\n  </div>\\n{/if}\\n\\n<!-- {#if FOOID != \\\"\\\" && FOOID != undefined}\\n  <Player songURL={FOOID} artist={ARTIST} song={SONG} />\\n{/if} -->\\n\\n<style>\\n\\n    button {\\n      float: right;\\n      margin-right: 25px;\\n    }\\n\\n    .card {\\n      /* Add shadows to create the \\\"card\\\" effect */\\n      box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);\\n      transition: 0.3s;\\n      width: 100%;\\n      margin-top: 20px;\\n      margin-bottom: 20px;\\n      background-color: yellowgreen;\\n      border: black;\\n      border-style: solid;\\n      border-radius: 15px;\\n    }\\n    \\n    /* On mouse-over, add a deeper shadow */\\n    .card:hover {\\n      box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2);\\n    }\\n    \\n    /* Add some padding inside the card container */\\n    .container {\\n      padding-top: 20px;\\n      padding-right: 35px;\\n      float: right;\\n    }\\n    \\n    img {\\n      padding-top: 10px;\\n      padding-bottom: 4px;\\n      padding-left: 10px;\\n    }\\n    \\n    ul {\\n    background-color: tomato;\\n    border: black;\\n    border-style: solid;\\n    border-radius: 15px;\\n    list-style-type: none;\\n    }\\n\\n    li {\\n        padding: 10px;\\n        width: 100%;\\n    }\\n\\n</style>\\n\"],\"names\":[],\"mappings\":\"AAyEI,MAAM,cAAC,CAAC,AACN,KAAK,CAAE,KAAK,CACZ,YAAY,CAAE,IAAI,AACpB,CAAC,AAED,KAAK,cAAC,CAAC,AAEL,UAAU,CAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CACvC,UAAU,CAAE,IAAI,CAChB,KAAK,CAAE,IAAI,CACX,UAAU,CAAE,IAAI,CAChB,aAAa,CAAE,IAAI,CACnB,gBAAgB,CAAE,WAAW,CAC7B,MAAM,CAAE,KAAK,CACb,YAAY,CAAE,KAAK,CACnB,aAAa,CAAE,IAAI,AACrB,CAAC,AAGD,mBAAK,MAAM,AAAC,CAAC,AACX,UAAU,CAAE,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,AAC1C,CAAC,AAGD,UAAU,cAAC,CAAC,AACV,WAAW,CAAE,IAAI,CACjB,aAAa,CAAE,IAAI,CACnB,KAAK,CAAE,KAAK,AACd,CAAC,AAED,GAAG,cAAC,CAAC,AACH,WAAW,CAAE,IAAI,CACjB,cAAc,CAAE,GAAG,CACnB,YAAY,CAAE,IAAI,AACpB,CAAC,AAED,EAAE,cAAC,CAAC,AACJ,gBAAgB,CAAE,MAAM,CACxB,MAAM,CAAE,KAAK,CACb,YAAY,CAAE,KAAK,CACnB,aAAa,CAAE,IAAI,CACnB,eAAe,CAAE,IAAI,AACrB,CAAC,AAED,EAAE,cAAC,CAAC,AACA,OAAO,CAAE,IAAI,CACb,KAAK,CAAE,IAAI,AACf,CAAC\"}"
};

const AlbumCard = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let { artist } = $$props;
	let { album } = $$props;
	let { albumid } = $$props;
	let { albumarthttppath } = $$props;
	let { numsongs } = $$props;
	let { songs } = $$props;

	if ($$props.artist === void 0 && $$bindings.artist && artist !== void 0) $$bindings.artist(artist);
	if ($$props.album === void 0 && $$bindings.album && album !== void 0) $$bindings.album(album);
	if ($$props.albumid === void 0 && $$bindings.albumid && albumid !== void 0) $$bindings.albumid(albumid);
	if ($$props.albumarthttppath === void 0 && $$bindings.albumarthttppath && albumarthttppath !== void 0) $$bindings.albumarthttppath(albumarthttppath);
	if ($$props.numsongs === void 0 && $$bindings.numsongs && numsongs !== void 0) $$bindings.numsongs(numsongs);
	if ($$props.songs === void 0 && $$bindings.songs && songs !== void 0) $$bindings.songs(songs);
	$$result.css.add(css$7);

	return `<div${add_attribute("id", albumid, 0)} class="${"card svelte-rppcvz"}"><div class="${"container svelte-rppcvz"}"><h4><b>${escape(artist)}</b></h4>
    <p>${escape(album)}</p>
    <p>Songs: ${escape(numsongs)}</p></div>
  <img${add_attribute("src", albumarthttppath, 0)}${add_attribute("alt", artist, 0)} class="${"svelte-rppcvz"}"></div> 
${ ``}

`;
});

/* src/components/ArtistAlbums.svelte generated by Svelte v3.24.0 */

const css$8 = {
	code: "ul#bobo.svelte-1enwpj0::after{content:'';display:block;clear:both}img.svelte-1enwpj0{text-align:center}ul#bobo.svelte-1enwpj0{display:inline;list-style-type:none}button.playadd.svelte-1enwpj0{margin-bottom:20px}button.play.svelte-1enwpj0{margin-bottom:20px}.playall.svelte-1enwpj0{width:100%;font-size:17px;padding:7px;background-color:lawngreen;border-radius:15px}",
	map: "{\"version\":3,\"file\":\"ArtistAlbums.svelte\",\"sources\":[\"ArtistAlbums.svelte\"],\"sourcesContent\":[\"<script>\\n    import { songURLstore, artiststore, songstore } from './PlayerStore.js'\\n    import AlbumCard from \\\"./AlbumCard.svelte\\\";\\n    import Player from '../components/Player.svelte'\\n    export let infoalbums = [];\\n\\n    let artalbvisible = false;\\n    let HideShow = () => {\\n        if (artalbvisible) {\\n            artalbvisible = false\\n        } else {\\n            artalbvisible = true\\n        }\\n    }\\n\\n    let selected;\\n    \\n    let handleMyClick = (x) => {\\n        selected = x\\n        let promise = getAlbumInfoalbums2().catch(err => console.log(err));\\n    }\\n\\n    let SONGS = [] ;\\n    let THUMB ; \\n    async function getAlbumInfoalbums2() {\\n        fetch(`http://192.168.0.31:6789/ImageSongsForAlbum?selected=${selected}`, {mode: \\\"cors\\\", method: \\\"GET\\\"})\\n        .then(r => r.json())\\n        .then(data => {\\n            THUMB = data.getimgsonalb.thumbnail\\n            SONGS = data.getimgsonalb.songs\\n        }).catch(err => console.log(err));\\n    }\\n\\n    let handleClick = () => {\\n        promise = getAlbumInfoalbums2().catch(err => console.log(err));\\n    }\\n\\n    let oid;\\n    let SONG = \\\"\\\";\\n    let ARTIST = \\\"\\\";\\n    let FOOID = \\\"\\\";\\n    let handlePlayClick = (x) => {\\n        selected = x\\n        let promise = getSongURL().catch(err => console.log(err));\\n        async function getSongURL() {\\n            fetch(`http://192.168.0.31:6789/PathArt?selected=${x}`, {mode: \\\"cors\\\", method: \\\"GET\\\"})\\n                .then(r => r.json())\\n                .then(data => {\\n                    let oid = data.HttpMusicPath\\n                    ARTIST = data.Artist\\n                    SONG = data.Song\\n                    FOOID = `http://192.168.0.31:6789` + oid\\n                    songURLstore.set(FOOID)\\n                    artiststore.set(ARTIST)\\n                    songstore.set(SONG)\\n                }).catch(err => console.log(err));\\n            }\\n        }\\n\\n</script>\\n\\n<div>\\n    <ul id={infoalbums.ArtistId}>\\n        {#each infoalbums.Albums as alb}\\n            <button id={alb[1]} on:click={handleMyClick(alb[1])} >{alb[0]}</button>\\n        {/each}\\n        <button on:click={HideShow} >+/-</button>\\n    </ul>\\n</div>\\n\\n{#if artalbvisible}\\n    <img  src={THUMB} alt=\\\"fuckme\\\" />\\n    \\n    <div class=\\\"artimg\\\">\\n        <ul id=\\\"bobo\\\">\\n            {#each SONGS as so}\\n                <li>\\n                    <span><h2>{so[0]}</h2></span><button class=\\\"play\\\" on:click={handlePlayClick(so[1])}>Play</button><button class=\\\"playadd\\\">Add</button>\\n                </li>\\n            {/each}\\n        </ul>\\n        \\n    </div>\\n    <button class=\\\"playall\\\">Play All</button>\\n{/if}\\n<!-- {#if FOOID != \\\"\\\" && FOOID != undefined}\\n    <Player songURL={FOOID} artist={ARTIST} song={SONG} />\\n{/if} -->\\n<style>\\n    /* clearfix */\\n\\tul#bobo::after {\\n\\t\\tcontent: '';\\n\\t\\tdisplay: block;\\n\\t\\tclear: both;\\n\\t}\\n    img {\\n        text-align: center;\\n    }\\n    ul#bobo {\\n        display: inline;\\n        list-style-type: none;\\n    }\\n\\n    button.playadd { \\n        margin-bottom: 20px; \\n    }\\n\\n    button.play {\\n        margin-bottom: 20px; \\n    }\\n    \\n    .playall {\\n        width: 100%;\\n        font-size: 17px;\\n        padding: 7px;\\n        background-color: lawngreen;\\n        border-radius: 15px;\\n    }\\n</style>\\n\"],\"names\":[],\"mappings\":\"AA0FC,EAAE,oBAAK,OAAO,AAAC,CAAC,AACf,OAAO,CAAE,EAAE,CACX,OAAO,CAAE,KAAK,CACd,KAAK,CAAE,IAAI,AACZ,CAAC,AACE,GAAG,eAAC,CAAC,AACD,UAAU,CAAE,MAAM,AACtB,CAAC,AACD,EAAE,KAAK,eAAC,CAAC,AACL,OAAO,CAAE,MAAM,CACf,eAAe,CAAE,IAAI,AACzB,CAAC,AAED,MAAM,QAAQ,eAAC,CAAC,AACZ,aAAa,CAAE,IAAI,AACvB,CAAC,AAED,MAAM,KAAK,eAAC,CAAC,AACT,aAAa,CAAE,IAAI,AACvB,CAAC,AAED,QAAQ,eAAC,CAAC,AACN,KAAK,CAAE,IAAI,CACX,SAAS,CAAE,IAAI,CACf,OAAO,CAAE,GAAG,CACZ,gBAAgB,CAAE,SAAS,CAC3B,aAAa,CAAE,IAAI,AACvB,CAAC\"}"
};

const ArtistAlbums = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let { infoalbums = [] } = $$props;

	if ($$props.infoalbums === void 0 && $$bindings.infoalbums && infoalbums !== void 0) $$bindings.infoalbums(infoalbums);
	$$result.css.add(css$8);

	return `<div><ul${add_attribute("id", infoalbums.ArtistId, 0)} class="${"svelte-1enwpj0"}">${each(infoalbums.Albums, alb => `<button${add_attribute("id", alb[1], 0)}>${escape(alb[0])}</button>`)}
        <button>+/-</button></ul></div>

${ ``}
`;
});

/* src/components/PageComp.svelte generated by Svelte v3.24.0 */

const css$9 = {
	code: "#SongsPageButton.svelte-aplvvr{color:black}#SongsPageButton.svelte-aplvvr{border-radius:10px;font-size:17px;padding:7px;width:100%;background-color:lawngreen}.pageUL.svelte-aplvvr{text-align:center;list-style-type:none;font-size:19px}.pageLI.svelte-aplvvr{display:inline;margin:20px}span.svelte-aplvvr{padding-left:17px}",
	map: "{\"version\":3,\"file\":\"PageComp.svelte\",\"sources\":[\"PageComp.svelte\"],\"sourcesContent\":[\"<script>\\n\\timport { createEventDispatcher } from 'svelte';\\n\\tconst dispatch = createEventDispatcher();\\n\\n\\timport { onMount } from 'svelte';\\n\\tlet selected = 1;\\n\\n\\tfunction dispatchMyPageEvent() {\\n\\t\\tdispatch(\\\"message\\\", {\\n\\t\\t\\ttext: selected\\n\\t\\t})\\n\\t}\\n\\n\\texport let ALPHA;\\n    const ADDR = `http://192.168.0.31:6789/${ALPHA}`\\n\\n\\tlet AS = [];\\n\\tonMount(async () => {\\n\\t\\tawait fetch(ADDR, {mode: \\\"cors\\\", method: \\\"GET\\\"})\\n\\t\\t.then(r => r.json())\\n\\t\\t.then(data => {\\n\\t\\t\\tif (ALPHA === \\\"ArtistAlpha\\\") {\\n\\t\\t\\t\\tAS = data.artal\\n\\t\\t\\t} \\n\\t\\t\\tif (ALPHA === \\\"AlbumAlpha\\\") {\\n\\t\\t\\t\\tAS = data.albal\\n\\t\\t\\t}\\n\\t\\t\\tif (ALPHA === \\\"SongAlpha\\\") {\\n\\t\\t\\t\\tAS = data.songal;\\n\\t\\t\\t}\\n\\t\\t})\\n\\t})\\n\\n\\tlet visible = false;\\n    let fuck = () => {\\n        if (visible) {\\n            visible = false\\n        } else {\\n            visible = true\\n        }\\n\\t}\\n\\n\\tlet alphasel = (asel) => {\\n\\t\\tselected = asel\\n\\t\\tvisible = false\\n\\t\\tdispatchMyPageEvent()\\n\\t}\\n</script>\\n\\n<button id=\\\"SongsPageButton\\\" on:click={fuck}>Page<span>{selected}</span></button>\\n\\n{#if visible}\\n\\t<nav>\\n\\t\\t<ul class=\\\"pageUL\\\">\\n\\t\\t\\t{#each AS as p}\\n\\t\\t\\t\\t<li class=\\\"pageLI\\\"><button on:click={alphasel(p)}>{p}</button></li>\\n\\t\\t\\t{/each}\\n\\t\\t</ul>\\n\\t</nav>\\n{/if}\\n\\n<style>\\n\\t#SongsPageButton {\\n\\t\\tcolor: black;\\n\\t}\\n\\t#SongsPageButton {\\n\\t\\tborder-radius: 10px;\\n\\t\\tfont-size: 17px;\\n\\t\\tpadding: 7px;\\n\\t\\twidth: 100%;\\n\\t\\tbackground-color: lawngreen;\\n\\t}\\n\\t.pageUL {\\n\\t\\ttext-align: center;\\n\\t\\tlist-style-type: none;\\n\\t\\tfont-size: 19px;\\n\\t}\\n\\t.pageLI {\\n\\t\\tdisplay: inline;\\n\\t\\tmargin: 20px;\\n\\t}\\n\\tspan {\\n\\t\\tpadding-left: 17px;\\n\\t}\\n</style>\"],\"names\":[],\"mappings\":\"AA8DC,gBAAgB,cAAC,CAAC,AACjB,KAAK,CAAE,KAAK,AACb,CAAC,AACD,gBAAgB,cAAC,CAAC,AACjB,aAAa,CAAE,IAAI,CACnB,SAAS,CAAE,IAAI,CACf,OAAO,CAAE,GAAG,CACZ,KAAK,CAAE,IAAI,CACX,gBAAgB,CAAE,SAAS,AAC5B,CAAC,AACD,OAAO,cAAC,CAAC,AACR,UAAU,CAAE,MAAM,CAClB,eAAe,CAAE,IAAI,CACrB,SAAS,CAAE,IAAI,AAChB,CAAC,AACD,OAAO,cAAC,CAAC,AACR,OAAO,CAAE,MAAM,CACf,MAAM,CAAE,IAAI,AACb,CAAC,AACD,IAAI,cAAC,CAAC,AACL,YAAY,CAAE,IAAI,AACnB,CAAC\"}"
};

const PageComp = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	const dispatch = createEventDispatcher();
	let selected = 1;

	let { ALPHA } = $$props;
	const ADDR = `http://192.168.0.31:6789/${ALPHA}`;
	let AS = [];

	onMount(async () => {
		await fetch(ADDR, { mode: "cors", method: "GET" }).then(r => r.json()).then(data => {
			if (ALPHA === "ArtistAlpha") {
				AS = data.artal;
			}

			if (ALPHA === "AlbumAlpha") {
				AS = data.albal;
			}

			if (ALPHA === "SongAlpha") {
				AS = data.songal;
			}
		});
	});

	if ($$props.ALPHA === void 0 && $$bindings.ALPHA && ALPHA !== void 0) $$bindings.ALPHA(ALPHA);
	$$result.css.add(css$9);

	return `<button id="${"SongsPageButton"}" class="${"svelte-aplvvr"}">Page<span class="${"svelte-aplvvr"}">${escape(selected)}</span></button>

${ ``}`;
});

/* src/routes/artists.svelte generated by Svelte v3.24.0 */

const css$a = {
	code: ".bar.svelte-33flk0{background-color:tomato;border:black;border-style:solid;border-radius:15px;text-align:center;list-style-type:none;width:100%;margin-top:20px}",
	map: "{\"version\":3,\"file\":\"artists.svelte\",\"sources\":[\"artists.svelte\"],\"sourcesContent\":[\"<script>\\n\\timport ArtistAlbums from '../components/ArtistAlbums.svelte'\\n\\timport PageComp from '../components/PageComp.svelte'\\n\\timport { onMount } from 'svelte';\\n\\n\\tlet selected = 1;\\n\\tlet ART = [];\\n\\n\\tlet promise = getArtistInfo().catch(err => console.log(err));\\n\\tasync function getArtistInfo() {\\n\\t\\tawait fetch(`http://192.168.0.31:6789/ArtistInfo?selected=${selected}`, {mode: \\\"cors\\\", method: \\\"GET\\\"})\\n\\t\\t.then(r => r.json())\\n\\t\\t.then(data => {\\n\\t\\t\\tART = data.arts\\n\\t\\t}).catch(err => console.log(err))\\n\\t}\\n\\n    function handleMessage(event) {\\n    \\tselected = event.detail.text\\n\\t\\tpromise = getArtistInfo().catch(err => console.log(err));\\n\\t  }\\n</script>\\n\\n<svelte:head><title>Artists</title></svelte:head>\\n\\n<h2>Artists</h2>\\n\\n<PageComp on:message={handleMessage} ALPHA=\\\"ArtistAlpha\\\" />\\n\\n<div class=\\\"foo\\\">\\n\\t{#each ART as a}\\n\\t\\t<div class=\\\"bar\\\">\\n\\t\\t\\t<h2>{a.Artist}</h2>\\n\\t\\t\\t<ArtistAlbums infoalbums={a} />\\n\\t\\t</div>\\n\\t{/each}\\n</div>\\n\\n<style>\\n\\n\\t.bar {\\n\\t\\tbackground-color: tomato;\\n\\t\\tborder: black;\\n\\t\\tborder-style: solid;\\n\\t\\tborder-radius: 15px;\\n\\t\\ttext-align: center;\\n\\t\\tlist-style-type: none;\\n\\t\\twidth: 100%;\\n\\t\\tmargin-top: 20px;\\n\\t}\\n\\n</style>\"],\"names\":[],\"mappings\":\"AAwCC,IAAI,cAAC,CAAC,AACL,gBAAgB,CAAE,MAAM,CACxB,MAAM,CAAE,KAAK,CACb,YAAY,CAAE,KAAK,CACnB,aAAa,CAAE,IAAI,CACnB,UAAU,CAAE,MAAM,CAClB,eAAe,CAAE,IAAI,CACrB,KAAK,CAAE,IAAI,CACX,UAAU,CAAE,IAAI,AACjB,CAAC\"}"
};

const Artists = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let selected = 1;
	let ART = [];
	let promise = getArtistInfo().catch(err => console.log(err));

	async function getArtistInfo() {
		await fetch(`http://192.168.0.31:6789/ArtistInfo?selected=${selected}`, { mode: "cors", method: "GET" }).then(r => r.json()).then(data => {
			ART = data.arts;
		}).catch(err => console.log(err));
	}

	$$result.css.add(css$a);

	return `${($$result.head += `${($$result.title = `<title>Artists</title>`, "")}`, "")}

<h2>Artists</h2>

${validate_component(PageComp, "PageComp").$$render($$result, { ALPHA: "ArtistAlpha" }, {}, {})}

<div class="${"foo"}">${each(ART, a => `<div class="${"bar svelte-33flk0"}"><h2>${escape(a.Artist)}</h2>
			${validate_component(ArtistAlbums, "ArtistAlbums").$$render($$result, { infoalbums: a }, {}, {})}
		</div>`)}
</div>`;
});

/* src/components/TVComps/Discovery.svelte generated by Svelte v3.24.0 */

const css$b = {
	code: "span.svelte-11aboip{margin-left:20px}ul.svelte-11aboip{list-style:none}li.svelte-11aboip{margin:10px;text-decoration:underline}a.svelte-11aboip{color:blue}",
	map: "{\"version\":3,\"file\":\"Discovery.svelte\",\"sources\":[\"Discovery.svelte\"],\"sourcesContent\":[\"<script>\\n    import { onMount } from \\\"svelte\\\";\\n    import { TVlocalplayURL } from '../PlayerStore'\\n    export let LP;\\n\\n    let showlist;\\n    let showlistcount;\\n    let visibleDis = false\\n\\n    onMount(\\n        async function getDiscovery() {\\n            let addr = `http://192.168.0.42:9999/intDiscovery?season=01`\\n            fetch(addr, {mode: \\\"cors\\\", method: \\\"GET\\\"})\\n            .then(r => r.json())\\n            .then(data => {\\n                console.log(data)\\n                console.log(data[0].episode)\\n                showlist = data\\n                showlistcount = data.length\\n            }).catch(err => console.log(err));\\n        }\\n    )\\n\\n    let fuckDis = () => {\\n        if (visibleDis) {\\n            visibleDis = false\\n        } else {\\n            visibleDis = true\\n        }\\n    }\\n\\n    async function getPlayMedia(x) {\\n        let addr = `http://192.168.0.42:9999/playMediaReact?tvshow=${x}`\\n        fetch(addr, {mode: \\\"cors\\\", method: \\\"GET\\\"})\\n        .then(r => r.json())\\n        .then(data => {\\n            console.log(data)\\n        }).catch(err => console.log(err));\\n    }\\n\\n    let handleDiscovery = (media) => {\\n        if (LP) {\\n            console.log(media)\\n\\n            let foo = media.split(\\\"TVShows\\\", 2)\\n            let newpath = `http://192.168.0.42:8082` + foo[1]\\n            console.log(newpath)\\n            TVlocalplayURL.set(newpath)\\n            visibleDis = false\\n        } else {\\n            let promise = getPlayMedia(media).catch(err => console.log(err));\\n            visibleDis = false\\n        }\\n        \\n    }\\n</script>\\n\\n<button on:click={fuckDis}>Discovery</button>\\n\\n{#if visibleDis}\\n    <ul>\\n        {#if showlistcount > 0}\\n            {#each showlist as sshow }\\n                <li>\\n                    <a href=\\\"tvshows\\\" on:click={handleDiscovery(sshow.movfspath)}>{sshow.title}</a>\\n                    <span>{sshow.episode}</span>\\n                </li>\\n            {/each}\\n        {/if}\\n    </ul>\\n{/if}\\n\\n<style>\\n    span {\\n        margin-left: 20px;\\n    }\\n    ul {\\n        list-style: none;\\n    }\\n\\n    li {\\n        margin: 10px;\\n        text-decoration: underline;\\n        \\n    }\\n    a {\\n        color: blue;\\n    }\\n</style>\"],\"names\":[],\"mappings\":\"AAyEI,IAAI,eAAC,CAAC,AACF,WAAW,CAAE,IAAI,AACrB,CAAC,AACD,EAAE,eAAC,CAAC,AACA,UAAU,CAAE,IAAI,AACpB,CAAC,AAED,EAAE,eAAC,CAAC,AACA,MAAM,CAAE,IAAI,CACZ,eAAe,CAAE,SAAS,AAE9B,CAAC,AACD,CAAC,eAAC,CAAC,AACC,KAAK,CAAE,IAAI,AACf,CAAC\"}"
};

const Discovery = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let { LP } = $$props;
	let showlistcount;

	onMount(async function getDiscovery() {
		let addr = `http://192.168.0.42:9999/intDiscovery?season=01`;

		fetch(addr, { mode: "cors", method: "GET" }).then(r => r.json()).then(data => {
			console.log(data);
			console.log(data[0].episode);
			showlistcount = data.length;
		}).catch(err => console.log(err));
	});

	if ($$props.LP === void 0 && $$bindings.LP && LP !== void 0) $$bindings.LP(LP);
	$$result.css.add(css$b);

	return `<button>Discovery</button>

${ ``}`;
});

/* src/components/TVComps/Enterprise.svelte generated by Svelte v3.24.0 */

const css$c = {
	code: "span.svelte-13j0val{margin-left:20px}ul.svelte-13j0val{list-style:none}li.svelte-13j0val{margin:10px;text-decoration:underline}a.svelte-13j0val{color:blue}",
	map: "{\"version\":3,\"file\":\"Enterprise.svelte\",\"sources\":[\"Enterprise.svelte\"],\"sourcesContent\":[\"<script>\\n    import { TVlocalplayURL } from '../PlayerStore'\\n    export let LP;\\n    let Entshowlist;\\n    let Entshowlistcount;\\n    let visibleEnt = false\\n\\n    async function getEnterprise(x) {\\n        let addr = `http://192.168.0.42:9999/intEnterprise?season=${x}`\\n        fetch(addr, {mode: \\\"cors\\\", method: \\\"GET\\\"})\\n        .then(r => r.json())\\n        .then(data => {\\n            Entshowlist = data\\n            Entshowlistcount = data.length\\n        }).catch(err => console.log(err));\\n    }\\n\\n    let handleEnterprise1 = () => {\\n        let promise = getEnterprise(`01`).catch(err => console.log(err));\\n    }\\n\\n    let handleEnterprise2 = () => {\\n        let promise = getEnterprise(`02`).catch(err => console.log(err));\\n    }\\n    let handleEnterprise3 = () => {\\n        let promise = getEnterprise(`03`).catch(err => console.log(err));\\n    }\\n    let handleEnterprise4 = () => {\\n        let promise = getEnterprise(`04`).catch(err => console.log(err));\\n    }\\n\\n    let fuckEnt = () => {\\n        if (visibleEnt) {\\n            visibleEnt = false\\n        } else {\\n            visibleEnt = true\\n        }\\n    }\\n\\n    async function getPlayMedia(x) {\\n        let addr = `http://192.168.0.42:9999/playMediaReact?tvshow=${x}`\\n        fetch(addr, {mode: \\\"cors\\\", method: \\\"GET\\\"})\\n        .then(r => r.json())\\n        .then(data => {\\n            console.log(data)\\n        }).catch(err => console.log(err));\\n    }\\n\\n    let handlePlayShow = (media) => {\\n        if (LP) {\\n            console.log(media)\\n\\n            let foo = media.split(\\\"TVShows\\\", 2)\\n            let newpath = `http://192.168.0.42:8082` + foo[1]\\n            console.log(newpath)\\n            TVlocalplayURL.set(newpath)\\n            visibleEnt = false\\n        } else {\\n            let promise = getPlayMedia(media).catch(err => console.log(err));\\n            visibleEnt = false\\n        }\\n    }\\n\\n</script>\\n\\n<button on:click={fuckEnt} >Enterprise</button>\\n\\n{#if visibleEnt}\\n    <nav>\\n        <button on:click={handleEnterprise1}>s1</button>\\n        <button on:click={handleEnterprise2}>s2</button>\\n        <button on:click={handleEnterprise3}>s3</button>\\n        <button on:click={handleEnterprise4}>s4</button>\\n    </nav>\\n\\n    <ul>\\n        {#if Entshowlistcount > 0}\\n            {#each Entshowlist as sshow }\\n                <li>\\n                    <a href=\\\"tvshows\\\" on:click={handlePlayShow(sshow.movfspath)}>{sshow.title}</a>\\n                    <span>{sshow.episode}</span>\\n                </li>\\n            {/each}\\n        {/if}\\n    </ul>\\n{/if}\\n\\n<style>\\n    span {\\n        margin-left: 20px;\\n    }\\n\\n    ul {\\n        list-style: none;\\n    }\\n\\n    li {\\n        margin: 10px;\\n        text-decoration: underline;\\n    }\\n\\n    a {\\n        color: blue;\\n    }\\n\\n\\n</style>\"],\"names\":[],\"mappings\":\"AAwFI,IAAI,eAAC,CAAC,AACF,WAAW,CAAE,IAAI,AACrB,CAAC,AAED,EAAE,eAAC,CAAC,AACA,UAAU,CAAE,IAAI,AACpB,CAAC,AAED,EAAE,eAAC,CAAC,AACA,MAAM,CAAE,IAAI,CACZ,eAAe,CAAE,SAAS,AAC9B,CAAC,AAED,CAAC,eAAC,CAAC,AACC,KAAK,CAAE,IAAI,AACf,CAAC\"}"
};

const Enterprise = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let { LP } = $$props;

	if ($$props.LP === void 0 && $$bindings.LP && LP !== void 0) $$bindings.LP(LP);
	$$result.css.add(css$c);

	return `<button>Enterprise</button>

${ ``}`;
});

/* src/components/TVComps/Orville.svelte generated by Svelte v3.24.0 */

const css$d = {
	code: "span.svelte-nhp1xt{margin-left:20px}ul.svelte-nhp1xt{list-style:none}li.svelte-nhp1xt{margin:10px;text-decoration:underline}a.svelte-nhp1xt{color:blue}",
	map: "{\"version\":3,\"file\":\"Orville.svelte\",\"sources\":[\"Orville.svelte\"],\"sourcesContent\":[\"<script>\\n    import { onMount } from \\\"svelte\\\";\\n    import { TVlocalplayURL } from '../PlayerStore'\\n    export let LP;\\n    let ORVshowlist;\\n    let ORVshowlistcount;\\n    let visibleOrv = false\\n\\n\\n    async function getOrville(x) {\\n        let addr = `http://192.168.0.42:9999/intOrville?season=${x}`\\n        fetch(addr, {mode: \\\"cors\\\", method: \\\"GET\\\"})\\n        .then(r => r.json())\\n        .then(data => {\\n            ORVshowlist = data\\n            ORVshowlistcount = data.length\\n        }).catch(err => console.log(err));\\n    }\\n    let handleOR1 = () => {\\n        let promise = getOrville(`01`).catch(err => console.log(err));\\n    }\\n    let handleOR2 = () => {\\n        let promise = getOrville(`02`).catch(err => console.log(err));\\n    }\\n\\n\\n    let fuckOrv = () => {\\n        if (visibleOrv) {\\n            visibleOrv = false\\n        } else {\\n            visibleOrv = true\\n        }\\n    }\\n\\n    async function getPlayMedia(x) {\\n        let addr = `http://192.168.0.42:9999/playMediaReact?tvshow=${x}`\\n        fetch(addr, {mode: \\\"cors\\\", method: \\\"GET\\\"})\\n        .then(r => r.json())\\n        .then(data => {\\n            console.log(data)\\n        }).catch(err => console.log(err));\\n    }\\n\\n    let handlePlayShowOr = (media) => {\\n        if (LP) {\\n            console.log(media)\\n            let foo = media.split(\\\"TVShows\\\", 2)\\n            let newpath = `http://192.168.0.42:8082` + foo[1]\\n            console.log(newpath)\\n            TVlocalplayURL.set(newpath)\\n            visibleOrv = false\\n        } else {\\n            let promise = getPlayMedia(media).catch(err => console.log(err));\\n            visibleOrv = false\\n        }\\n    }\\n</script>\\n\\n<button on:click={fuckOrv}>Orville</button>\\n\\n{#if visibleOrv}\\n    <nav>\\n        <button on:click={handleOR1}>s1</button>\\n        <button on:click={handleOR2}>s2</button>\\n    </nav>\\n\\n    <ul>\\n        {#if ORVshowlistcount > 0}\\n            {#each ORVshowlist as sshow }\\n                <li>\\n                    <a href=\\\"tvshows\\\" on:click={handlePlayShowOr(sshow.movfspath)}>{sshow.title}</a>\\n                    <span>{sshow.episode}</span>\\n                </li>\\n            {/each}\\n        {/if}\\n    </ul>\\n{/if}\\n\\n<style>\\n    span {\\n        margin-left: 20px;\\n    }\\n\\n    ul {\\n        list-style: none;\\n    }\\n\\n    li {\\n        margin: 10px;\\n        text-decoration: underline;\\n    }\\n\\n    a {\\n        color: blue;\\n    }\\n    \\n</style>\"],\"names\":[],\"mappings\":\"AA+EI,IAAI,cAAC,CAAC,AACF,WAAW,CAAE,IAAI,AACrB,CAAC,AAED,EAAE,cAAC,CAAC,AACA,UAAU,CAAE,IAAI,AACpB,CAAC,AAED,EAAE,cAAC,CAAC,AACA,MAAM,CAAE,IAAI,CACZ,eAAe,CAAE,SAAS,AAC9B,CAAC,AAED,CAAC,cAAC,CAAC,AACC,KAAK,CAAE,IAAI,AACf,CAAC\"}"
};

const Orville = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let { LP } = $$props;

	if ($$props.LP === void 0 && $$bindings.LP && LP !== void 0) $$bindings.LP(LP);
	$$result.css.add(css$d);

	return `<button>Orville</button>

${ ``}`;
});

/* src/components/TVComps/STTV.svelte generated by Svelte v3.24.0 */

const css$e = {
	code: "span.svelte-10dqnzh{margin-left:20px}ul.svelte-10dqnzh{list-style:none}li.svelte-10dqnzh{margin:10px;text-decoration:underline}a.svelte-10dqnzh{color:blue}",
	map: "{\"version\":3,\"file\":\"STTV.svelte\",\"sources\":[\"STTV.svelte\"],\"sourcesContent\":[\"<script>\\n    import { TVlocalplayURL } from '../PlayerStore'\\n    export let LP;\\n    let showlist;\\n    let showlistcount;\\n    let visibleDis = false\\n\\n    async function getSTTV(x) {\\n        let addr = `http://192.168.0.42:9999/intSTTV?season=${x}`\\n        fetch(addr, {mode: \\\"cors\\\", method: \\\"GET\\\"})\\n        .then(r => r.json())\\n        .then(data => {\\n            showlist = data\\n            showlistcount = data.length\\n        }).catch(err => console.log(err));\\n    }\\n\\n    let handleSTTVClick1 = () => {\\n        let promise = getSTTV(`01`).catch(err => console.log(err));\\n    }\\n\\n    let handleSTTVClick2 = () => {\\n        let promise = getSTTV(`02`).catch(err => console.log(err));\\n    }\\n    let handleSTTVClick3 = () => {\\n        let promise = getSTTV(`03`).catch(err => console.log(err));\\n    }\\n\\n    let fuckDis = () => {\\n        if (visibleDis) {\\n            visibleDis = false\\n        } else {\\n            visibleDis = true\\n        }\\n    }\\n\\n    async function getPlayMedia(x) {\\n        let addr = `http://192.168.0.42:9999/playMediaReact?tvshow=${x}`\\n        fetch(addr, {mode: \\\"cors\\\", method: \\\"GET\\\"})\\n        .then(r => r.json())\\n        .then(data => {\\n            console.log(data)\\n        }).catch(err => console.log(err));\\n    }\\n\\n    let handlePlayShowSTTV = (media) => {\\n        if (LP) {\\n            console.log(media)\\n\\n            let foo = media.split(\\\"TVShows\\\", 2)\\n            let newpath = `http://192.168.0.42:8082` + foo[1]\\n            console.log(newpath)\\n            TVlocalplayURL.set(newpath)\\n            visibleDis = false\\n        } else {\\n            let promise = getPlayMedia(media).catch(err => console.log(err));\\n            visibleDis = false\\n        }\\n    }\\n\\n</script>\\n\\n<button on:click={fuckDis} >STTV</button>\\n\\n{#if visibleDis}\\n    <nav>\\n        <button on:click={handleSTTVClick1}>s1</button>\\n        <button on:click={handleSTTVClick2}>s2</button>\\n        <button on:click={handleSTTVClick3}>s3</button>\\n    </nav>\\n\\n    <ul>\\n        {#if showlistcount > 0}\\n            {#each showlist as sshow }\\n                <li>\\n                    <a href=\\\"tvshows\\\" on:click={handlePlayShowSTTV(sshow.movfspath)}>{sshow.title}</a>\\n                    <span>{sshow.episode}</span>\\n                </li>\\n            {/each}\\n        {/if}\\n    </ul>\\n{/if}\\n\\n<style>\\n    span {\\n        margin-left: 20px;\\n    }\\n\\n    ul {\\n        list-style: none;\\n    }\\n\\n    li {\\n        margin: 10px;\\n        text-decoration: underline;\\n    }\\n    \\n    a {\\n        color: blue;\\n    }\\n</style>\"],\"names\":[],\"mappings\":\"AAoFI,IAAI,eAAC,CAAC,AACF,WAAW,CAAE,IAAI,AACrB,CAAC,AAED,EAAE,eAAC,CAAC,AACA,UAAU,CAAE,IAAI,AACpB,CAAC,AAED,EAAE,eAAC,CAAC,AACA,MAAM,CAAE,IAAI,CACZ,eAAe,CAAE,SAAS,AAC9B,CAAC,AAED,CAAC,eAAC,CAAC,AACC,KAAK,CAAE,IAAI,AACf,CAAC\"}"
};

const STTV = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let { LP } = $$props;

	if ($$props.LP === void 0 && $$bindings.LP && LP !== void 0) $$bindings.LP(LP);
	$$result.css.add(css$e);

	return `<button>STTV</button>

${ ``}`;
});

/* src/components/TVComps/TNG.svelte generated by Svelte v3.24.0 */

const css$f = {
	code: "span.svelte-nhp1xt{margin-left:20px}ul.svelte-nhp1xt{list-style:none}li.svelte-nhp1xt{margin:10px;text-decoration:underline}a.svelte-nhp1xt{color:blue}",
	map: "{\"version\":3,\"file\":\"TNG.svelte\",\"sources\":[\"TNG.svelte\"],\"sourcesContent\":[\"<script>\\n    import { TVlocalplayURL } from '../PlayerStore'\\n    export let LP;\\n    let TNGshowlist;\\n    let TNGshowlistcount;\\n    let visibleTNG = false\\n\\n    async function getTNG(x) {\\n        let addr = `http://192.168.0.42:9999/intTNG?season=${x}`\\n        fetch(addr, {mode: \\\"cors\\\", method: \\\"GET\\\"})\\n        .then(r => r.json())\\n        .then(data => {\\n            TNGshowlist = data\\n            TNGshowlistcount = data.length\\n        }).catch(err => console.log(err));\\n    }\\n\\n    let handleTNG1 = () => {\\n        let promise = getTNG(`01`).catch(err => console.log(err));\\n    }\\n\\n    let handleTNG2 = () => {\\n        let promise = getTNG(`02`).catch(err => console.log(err));\\n    }\\n    let handleTNG3 = () => {\\n        let promise = getTNG(`03`).catch(err => console.log(err));\\n    }\\n    let handleTNG4 = () => {\\n        let promise = getTNG(`04`).catch(err => console.log(err));\\n    }\\n\\n    let handleTNG5 = () => {\\n        let promise = getTNG(`05`).catch(err => console.log(err));\\n    }\\n\\n    let handleTNG6 = () => {\\n        let promise = getTNG(`06`).catch(err => console.log(err));\\n    }\\n\\n    let handleTNG7 = () => {\\n        let promise = getTNG(`07`).catch(err => console.log(err));\\n    }\\n\\n    let fuckTNG = () => {\\n        if (visibleTNG) {\\n            visibleTNG = false\\n        } else {\\n            visibleTNG = true\\n        }\\n    }\\n\\n    async function getPlayMedia(x) {\\n        let addr = `http://192.168.0.42:9999/playMediaReact?tvshow=${x}`\\n        fetch(addr, {mode: \\\"cors\\\", method: \\\"GET\\\"})\\n        .then(r => r.json())\\n        .then(data => {\\n            console.log(data)\\n        }).catch(err => console.log(err));\\n    }\\n\\n    let handlePlayTNG = (media) => {\\n        if (LP) {\\n            console.log(media)\\n\\n            let foo = media.split(\\\"TVShows\\\", 2)\\n            let newpath = `http://192.168.0.42:8082` + foo[1]\\n            console.log(newpath)\\n            TVlocalplayURL.set(newpath)\\n            visibleTNG = false\\n        } else {\\n            let promise = getPlayMedia(media).catch(err => console.log(err));\\n            visibleTNG = false\\n        }\\n    }\\n\\n</script>\\n\\n<button on:click={fuckTNG}>The Next Generation</button>\\n\\n{#if visibleTNG}\\n    <nav>\\n        <button on:click={handleTNG1}>s1</button>\\n        <button on:click={handleTNG2}>s2</button>\\n        <button on:click={handleTNG3}>s3</button>\\n        <button on:click={handleTNG4}>s4</button>\\n        <button on:click={handleTNG5}>s5</button>\\n        <button on:click={handleTNG6}>s6</button>\\n        <button on:click={handleTNG7}>s7</button>\\n    </nav>\\n\\n    <ul>\\n        {#if TNGshowlistcount > 0}\\n            {#each TNGshowlist as sshow }\\n                <li>\\n                    <a href=\\\"tvshows\\\" on:click={handlePlayTNG(sshow.movfspath)}>{sshow.title}</a>\\n                    <span>{sshow.episode}</span>\\n                </li>\\n            {/each}\\n        {/if}\\n    </ul>\\n{/if}\\n\\n<style>\\n    span {\\n        margin-left: 20px;\\n    }\\n\\n    ul {\\n        list-style: none;\\n    }\\n\\n    li {\\n        margin: 10px;\\n        text-decoration: underline;\\n    }\\n\\n    a {\\n        color: blue;\\n    }\\n    \\n</style>\"],\"names\":[],\"mappings\":\"AAuGI,IAAI,cAAC,CAAC,AACF,WAAW,CAAE,IAAI,AACrB,CAAC,AAED,EAAE,cAAC,CAAC,AACA,UAAU,CAAE,IAAI,AACpB,CAAC,AAED,EAAE,cAAC,CAAC,AACA,MAAM,CAAE,IAAI,CACZ,eAAe,CAAE,SAAS,AAC9B,CAAC,AAED,CAAC,cAAC,CAAC,AACC,KAAK,CAAE,IAAI,AACf,CAAC\"}"
};

const TNG = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let { LP } = $$props;

	if ($$props.LP === void 0 && $$bindings.LP && LP !== void 0) $$bindings.LP(LP);
	$$result.css.add(css$f);

	return `<button>The Next Generation</button>

${ ``}`;
});

/* src/components/TVComps/Voyager.svelte generated by Svelte v3.24.0 */

const css$g = {
	code: "span.svelte-10dqnzh{margin-left:20px}ul.svelte-10dqnzh{list-style:none}li.svelte-10dqnzh{margin:10px;text-decoration:underline}a.svelte-10dqnzh{color:blue}",
	map: "{\"version\":3,\"file\":\"Voyager.svelte\",\"sources\":[\"Voyager.svelte\"],\"sourcesContent\":[\"<script>\\n    import { TVlocalplayURL } from '../PlayerStore'\\n    export let LP;\\n    let VOYshowlist;\\n    let VOYshowlistcount;\\n    let visibleVoy = false\\n\\n    async function getVOY(x) {\\n        let addr = `http://192.168.0.42:9999/intVoyager?season=${x}`\\n        fetch(addr, {mode: \\\"cors\\\", method: \\\"GET\\\"})\\n        .then(r => r.json())\\n        .then(data => {\\n            VOYshowlist = data\\n            VOYshowlistcount = data.length\\n        }).catch(err => console.log(err));\\n    }\\n\\n    let handleVOY1 = () => {\\n        let promise = getVOY(`01`).catch(err => console.log(err));\\n    }\\n\\n    let handleVOY2 = () => {\\n        let promise = getVOY(`02`).catch(err => console.log(err));\\n    }\\n    let handleVOY3 = () => {\\n        let promise = getVOY(`03`).catch(err => console.log(err));\\n    }\\n    let handleVOY4 = () => {\\n        let promise = getVOY(`04`).catch(err => console.log(err));\\n    }\\n\\n    let handleVOY5 = () => {\\n        let promise = getVOY(`05`).catch(err => console.log(err));\\n    }\\n\\n    let handleVOY6 = () => {\\n        let promise = getVOY(`06`).catch(err => console.log(err));\\n    }\\n\\n    let handleVOY7 = () => {\\n        let promise = getVOY(`07`).catch(err => console.log(err));\\n    }\\n\\n    let fuckVOY = () => {\\n        if (visibleVoy) {\\n            visibleVoy = false\\n        } else {\\n            visibleVoy = true\\n        }\\n    }\\n\\n    async function getPlayMedia(x) {\\n        let addr = `http://192.168.0.42:9999/playMediaReact?tvshow=${x}`\\n        fetch(addr, {mode: \\\"cors\\\", method: \\\"GET\\\"})\\n        .then(r => r.json())\\n        .then(data => {\\n            console.log(data)\\n        }).catch(err => console.log(err));\\n    }\\n\\n    let handlePlayVOY = (media) => {\\n        if (LP) {\\n            console.log(media)\\n\\n            let foo = media.split(\\\"TVShows\\\", 2)\\n            let newpath = `http://192.168.0.42:8082` + foo[1]\\n            console.log(newpath)\\n            TVlocalplayURL.set(newpath)\\n            visibleVOY = false\\n        } else {\\n            let promise = getPlayMedia(media).catch(err => console.log(err));\\n            visibleVOY = false\\n        }\\n    }\\n\\n</script>\\n\\n<button on:click={fuckVOY}>Voyager</button>\\n\\n{#if visibleVoy}\\n    <nav>\\n        <button on:click={handleVOY1}>s1</button>\\n        <button on:click={handleVOY2}>s2</button>\\n        <button on:click={handleVOY3}>s3</button>\\n        <button on:click={handleVOY4}>s4</button>\\n        <button on:click={handleVOY5}>s5</button>\\n        <button on:click={handleVOY6}>s6</button>\\n        <button on:click={handleVOY7}>s7</button>\\n    </nav>\\n\\n    <ul>\\n        {#if VOYshowlistcount > 0}\\n            {#each VOYshowlist as sshow }\\n                <li>\\n                    <a href=\\\"tvshows\\\" on:click={handlePlayVOY(sshow.movfspath)}>{sshow.title}</a>\\n                    <span>{sshow.episode}</span>\\n                </li>\\n            {/each}\\n        {/if}\\n    </ul>\\n{/if}\\n\\n<style>\\n    span {\\n        margin-left: 20px;\\n    }\\n\\n    ul {\\n        list-style: none;\\n    }\\n\\n    li {\\n        margin: 10px;\\n        text-decoration: underline;\\n    }\\n    \\n    a {\\n        color: blue;\\n    }\\n</style>\"],\"names\":[],\"mappings\":\"AAuGI,IAAI,eAAC,CAAC,AACF,WAAW,CAAE,IAAI,AACrB,CAAC,AAED,EAAE,eAAC,CAAC,AACA,UAAU,CAAE,IAAI,AACpB,CAAC,AAED,EAAE,eAAC,CAAC,AACA,MAAM,CAAE,IAAI,CACZ,eAAe,CAAE,SAAS,AAC9B,CAAC,AAED,CAAC,eAAC,CAAC,AACC,KAAK,CAAE,IAAI,AACf,CAAC\"}"
};

const Voyager = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let { LP } = $$props;

	if ($$props.LP === void 0 && $$bindings.LP && LP !== void 0) $$bindings.LP(LP);
	$$result.css.add(css$g);

	return `<button>Voyager</button>

${ ``}`;
});

/* src/components/TVComps/LastShip.svelte generated by Svelte v3.24.0 */

const css$h = {
	code: "span.svelte-1omye9l{margin-left:20px}ul.svelte-1omye9l{list-style:none}li.svelte-1omye9l{margin:10px;text-decoration:underline}a.svelte-1omye9l{color:blue}",
	map: "{\"version\":3,\"file\":\"LastShip.svelte\",\"sources\":[\"LastShip.svelte\"],\"sourcesContent\":[\"<script>\\n    import { TVlocalplayURL } from '../PlayerStore'\\n    export let LP;\\n    let LSshowlist;\\n    let LSshowlistcount;\\n\\n    async function getLS(x) {\\n        let addr = `http://192.168.0.42:9999/intLastShip?season=${x}`\\n        fetch(addr, {mode: \\\"cors\\\", method: \\\"GET\\\"})\\n        .then(r => r.json())\\n        .then(data => {\\n            LSshowlist = data\\n            LSshowlistcount = data.length\\n        }).catch(err => console.log(err));\\n    }\\n\\n    let handleLS1 = () => {\\n        let promise = getLS(`01`).catch(err => console.log(err));\\n    }\\n\\n    let handleLS2 = () => {\\n        let promise = getLS(`02`).catch(err => console.log(err));\\n    }\\n    let handleLS3 = () => {\\n        let promise = getLS(`03`).catch(err => console.log(err));\\n    }\\n    let handleLS4 = () => {\\n        let promise = getLS(`04`).catch(err => console.log(err));\\n    }\\n\\n\\n    let visibleLS = false\\n    let fuckLS = () => {\\n        if (visibleLS) {\\n            visibleLS = false\\n        } else {\\n            visibleLS = true\\n        }\\n    }\\n\\n    async function getPlayMedia(x) {\\n        let addr = `http://192.168.0.42:9999/playMediaReact?tvshow=${x}`\\n        fetch(addr, {mode: \\\"cors\\\", method: \\\"GET\\\"})\\n        .then(r => r.json())\\n        .then(data => {\\n            console.log(data)\\n        }).catch(err => console.log(err));\\n    }\\n\\n    let handlePlayLS = (media) => {\\n        if (LP) {\\n            console.log(media)\\n\\n            let foo = media.split(\\\"TVShows\\\", 2)\\n            let newpath = `http://192.168.0.42:8082` + foo[1]\\n            console.log(newpath)\\n            TVlocalplayURL.set(newpath)\\n            visibleLS = false\\n        } else {\\n            let promise = getPlayMedia(media).catch(err => console.log(err));\\n            visibleLS = false\\n        }\\n    }\\n\\n</script>\\n\\n<button on:click={fuckLS} >The Last Ship</button>\\n\\n{#if visibleLS}\\n    <nav>\\n        <button on:click={handleLS1}>s1</button>\\n        <button on:click={handleLS2}>s2</button>\\n        <button on:click={handleLS3}>s3</button>\\n        <button on:click={handleLS4}>s4</button>\\n    </nav>\\n\\n    <ul>\\n        {#if LSshowlistcount > 0}\\n            {#each LSshowlist as sshow }\\n                <li>\\n                    <a href=\\\"tvshows\\\" on:click={handlePlayLS(sshow.movfspath)}>{sshow.title}</a>\\n                    <span>{sshow.episode}</span>\\n                </li>\\n            {/each}\\n        {/if}\\n    </ul>\\n{/if}\\n\\n<style>\\n    span {\\n        margin-left: 20px;\\n    }\\n\\n    ul {\\n        list-style: none;\\n    }\\n\\n    li {\\n        margin: 10px;\\n        text-decoration: underline;\\n    }\\n\\n    a { \\n        color: blue;\\n    }\\n    \\n</style>\"],\"names\":[],\"mappings\":\"AAyFI,IAAI,eAAC,CAAC,AACF,WAAW,CAAE,IAAI,AACrB,CAAC,AAED,EAAE,eAAC,CAAC,AACA,UAAU,CAAE,IAAI,AACpB,CAAC,AAED,EAAE,eAAC,CAAC,AACA,MAAM,CAAE,IAAI,CACZ,eAAe,CAAE,SAAS,AAC9B,CAAC,AAED,CAAC,eAAC,CAAC,AACC,KAAK,CAAE,IAAI,AACf,CAAC\"}"
};

const LastShip = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let { LP } = $$props;

	if ($$props.LP === void 0 && $$bindings.LP && LP !== void 0) $$bindings.LP(LP);
	$$result.css.add(css$h);

	return `<button>The Last Ship</button>

${ ``}`;
});

/* src/components/TVComps/LostInSpace.svelte generated by Svelte v3.24.0 */

const css$i = {
	code: "span.svelte-nhp1xt{margin-left:20px}ul.svelte-nhp1xt{list-style:none}li.svelte-nhp1xt{margin:10px;text-decoration:underline}a.svelte-nhp1xt{color:blue}",
	map: "{\"version\":3,\"file\":\"LostInSpace.svelte\",\"sources\":[\"LostInSpace.svelte\"],\"sourcesContent\":[\"<script>\\n    import { onMount } from \\\"svelte\\\";\\n    import { TVlocalplayURL } from '../PlayerStore'\\n    export let LP;\\n    let LISshowlist;\\n    let LISshowlistcount;\\n    let visibleLIS = false\\n\\n\\n    async function getLostInSpace(x) {\\n        let addr = `http://192.168.0.42:9999/intLostInSpace?season=${x}`\\n        console.log(addr)\\n        fetch(addr, {mode: \\\"cors\\\", method: \\\"GET\\\"})\\n        .then(r => r.json())\\n        .then(data => {\\n            console.log(data)\\n            LISshowlist = data\\n            LISshowlistcount = data.length\\n        }).catch(err => console.log(err));\\n    }\\n    let handleLIS1 = () => {\\n        let promise = getLostInSpace(`01`).catch(err => console.log(err));\\n    }\\n    let handleLIS2 = () => {\\n        let promise = getLostInSpace(`02`).catch(err => console.log(err));\\n    }\\n\\n\\n    let fuckLIS = () => {\\n        if (visibleLIS) {\\n            visibleLIS = false\\n        } else {\\n            visibleLIS = true\\n        }\\n    }\\n\\n    async function getPlayMedia(x) {\\n        let addr = `http://192.168.0.42:9999/playMediaReact?tvshow=${x}`\\n        fetch(addr, {mode: \\\"cors\\\", method: \\\"GET\\\"})\\n        .then(r => r.json())\\n        .then(data => {\\n            console.log(data)\\n        }).catch(err => console.log(err));\\n    }\\n\\n    let handlePlayShowLIS = (media) => {\\n        if (LP) {\\n            console.log(media)\\n            let foo = media.split(\\\"TVShows\\\", 2)\\n            let newpath = `http://192.168.0.42:8082` + foo[1]\\n            console.log(newpath)\\n            TVlocalplayURL.set(newpath)\\n            visibleLIS = false\\n        } else {\\n            let promise = getPlayMedia(media).catch(err => console.log(err));\\n            visibleLIS = false\\n        }\\n    }\\n</script>\\n\\n<button on:click={fuckLIS}>Lost In Space</button>\\n\\n{#if visibleLIS}\\n    <nav>\\n        <button on:click={handleLIS1}>s1</button>\\n        <button on:click={handleLIS2}>s2</button>\\n    </nav>\\n\\n    <ul>\\n        {#if LISshowlistcount > 0}\\n            {#each LISshowlist as sshow }\\n                <li>\\n                    <a href=\\\"tvshows\\\" on:click={handlePlayShowLIS(sshow.movfspath)}>{sshow.title}</a>\\n                    <span>{sshow.episode}</span>\\n                </li>\\n            {/each}\\n        {/if}\\n    </ul>\\n{/if}\\n\\n<style>\\n    span {\\n        margin-left: 20px;\\n    }\\n\\n    ul {\\n        list-style: none;\\n    }\\n\\n    li {\\n        margin: 10px;\\n        text-decoration: underline;\\n    }\\n\\n    a {\\n        color: blue;\\n    }\\n    \\n</style>\"],\"names\":[],\"mappings\":\"AAiFI,IAAI,cAAC,CAAC,AACF,WAAW,CAAE,IAAI,AACrB,CAAC,AAED,EAAE,cAAC,CAAC,AACA,UAAU,CAAE,IAAI,AACpB,CAAC,AAED,EAAE,cAAC,CAAC,AACA,MAAM,CAAE,IAAI,CACZ,eAAe,CAAE,SAAS,AAC9B,CAAC,AAED,CAAC,cAAC,CAAC,AACC,KAAK,CAAE,IAAI,AACf,CAAC\"}"
};

const LostInSpace = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let { LP } = $$props;

	if ($$props.LP === void 0 && $$bindings.LP && LP !== void 0) $$bindings.LP(LP);
	$$result.css.add(css$i);

	return `<button>Lost In Space</button>

${ ``}`;
});

/* src/components/TVShowsListComp.svelte generated by Svelte v3.24.0 */

const css$j = {
	code: "nav.svelte-14m8txd{text-align:center}",
	map: "{\"version\":3,\"file\":\"TVShowsListComp.svelte\",\"sources\":[\"TVShowsListComp.svelte\"],\"sourcesContent\":[\"<script>\\n    import { set_store_value } from \\\"svelte/internal\\\";\\n    import Discovery from '../components/TVComps/Discovery.svelte'\\n    import Enterprise from '../components/TVComps/Enterprise.svelte'\\n    import Orville from '../components/TVComps/Orville.svelte'\\n    import STTV from '../components/TVComps/STTV.svelte'\\n    import TNG from '../components/TVComps/TNG.svelte'\\n    import VOY from '../components/TVComps/Voyager.svelte'\\n    import LS from '../components/TVComps/LastShip.svelte'\\n    import LIS from '../components/TVComps/LostInSpace.svelte'\\n    export let LOCALPLAY;\\n</script>\\n\\n<nav>\\n    <Discovery LP={LOCALPLAY}/>\\n    <Enterprise LP={LOCALPLAY}/>\\n    <Orville LP={LOCALPLAY}/>\\n    <STTV LP={LOCALPLAY}/>\\n    <TNG LP={LOCALPLAY}/>\\n    <VOY LP={LOCALPLAY}/>\\n    <LS LP={LOCALPLAY}/>\\n    <LIS LP={LOCALPLAY} />\\n</nav>\\n\\n<style>\\n    nav {\\n        text-align: center;\\n    }\\n</style>\\n\"],\"names\":[],\"mappings\":\"AAyBI,GAAG,eAAC,CAAC,AACD,UAAU,CAAE,MAAM,AACtB,CAAC\"}"
};

const TVShowsListComp = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let { LOCALPLAY } = $$props;
	if ($$props.LOCALPLAY === void 0 && $$bindings.LOCALPLAY && LOCALPLAY !== void 0) $$bindings.LOCALPLAY(LOCALPLAY);
	$$result.css.add(css$j);

	return `<nav class="${"svelte-14m8txd"}">${validate_component(Discovery, "Discovery").$$render($$result, { LP: LOCALPLAY }, {}, {})}
    ${validate_component(Enterprise, "Enterprise").$$render($$result, { LP: LOCALPLAY }, {}, {})}
    ${validate_component(Orville, "Orville").$$render($$result, { LP: LOCALPLAY }, {}, {})}
    ${validate_component(STTV, "STTV").$$render($$result, { LP: LOCALPLAY }, {}, {})}
    ${validate_component(TNG, "TNG").$$render($$result, { LP: LOCALPLAY }, {}, {})}
    ${validate_component(Voyager, "VOY").$$render($$result, { LP: LOCALPLAY }, {}, {})}
    ${validate_component(LastShip, "LS").$$render($$result, { LP: LOCALPLAY }, {}, {})}
    ${validate_component(LostInSpace, "LIS").$$render($$result, { LP: LOCALPLAY }, {}, {})}
</nav>`;
});

/* src/components/Controls.svelte generated by Svelte v3.24.0 */

const css$k = {
	code: "button.svelte-1fzjfwg{background-color:lawngreen;border-radius:7px;border-color:black;padding:7px;width:24%;color:black}",
	map: "{\"version\":3,\"file\":\"Controls.svelte\",\"sources\":[\"Controls.svelte\"],\"sourcesContent\":[\"<script>\\n\\t\\n    async function getNext() {\\n\\t\\tfetch(`http://192.168.0.42:8181/Next`, {mode: \\\"cors\\\", method: \\\"GET\\\"})\\n\\t\\t.then(r => r.json())\\n\\t\\t.then(data => {\\n            console.log(data)\\n        }).catch(err => console.log(err));\\n\\t}\\n    let handleNextSubmit = () => {\\n        let promise = getNext().catch(err => console.log(err));\\n    }\\n\\n\\tasync function getStop() {\\n\\t\\tfetch(`http://192.168.0.42:8181/Stop`, {mode: \\\"cors\\\", method: \\\"GET\\\"})\\n\\t\\t.then(r => r.json())\\n\\t\\t.then(data => {\\n            console.log(data)\\n        }).catch(err => console.log(err));\\n\\t}\\n    let handleStopSubmit = () => {\\n        let promise = getStop().catch(err => console.log(err));\\n\\t}\\n\\t\\n\\tasync function getPrevious() {\\n\\t\\tfetch(`http://192.168.0.42:8181/Previous`, {mode: \\\"cors\\\", method: \\\"GET\\\"})\\n\\t\\t.then(r => r.json())\\n\\t\\t.then(data => {\\n            console.log(data)\\n        }).catch(err => console.log(err));\\n\\t}\\n    let handlePreviousSubmit = () => {\\n        let promise = getPrevious().catch(err => console.log(err));\\n\\t}\\n\\n\\tasync function getPause() {\\n\\t\\tfetch(`http://192.168.0.42:8181/Pause`, {mode: \\\"cors\\\", method: \\\"GET\\\"})\\n\\t\\t.then(r => r.json())\\n\\t\\t.then(data => {\\n            console.log(data)\\n        }).catch(err => console.log(err));\\n\\t}\\n    let handlePauseSubmit = () => {\\n\\t    let promise = getPause().catch(err => console.log(err));\\n\\t\\tfuck()\\n\\t}\\n\\n\\tasync function getPlay() {\\n\\t\\tfetch(`http://192.168.0.42:8181/Play`, {mode: \\\"cors\\\", method: \\\"GET\\\"})\\n\\t\\t.then(r => r.json())\\n\\t\\t.then(data => {\\n            console.log(data)\\n        }).catch(err => console.log(err));\\n\\t}\\n    let handlePlaySubmit = () => {\\n\\t    let promise = getPlay().catch(err => console.log(err));\\n\\t\\tfuck()\\n\\t}\\n\\n\\tlet visible = false;\\n    let fuck = () => {\\n        if (visible) {\\n            visible = false\\n        } else {\\n            visible = true\\n        }\\n\\t}\\n</script>\\n\\n<nav>\\n\\t<ul>\\n\\t\\t<button on:click={handlePreviousSubmit} >previous</button>\\n\\t\\t{#if visible}\\n\\t\\t\\t<button on:click={handlePlaySubmit}>play</button>\\n\\t\\t{:else}\\n\\t\\t\\t<button on:click={handlePauseSubmit}>pause</button>\\n\\t\\t{/if}\\n\\t\\t<button on:click={handleStopSubmit} >stop</button>\\n\\t\\t<button on:click={handleNextSubmit} >next</button>\\n\\t</ul>\\n</nav>\\n\\n<style>\\n\\n\\tbutton {\\n\\t\\tbackground-color: lawngreen;\\n\\t\\tborder-radius: 7px;\\n\\t\\tborder-color: black;\\n\\t\\tpadding: 7px;\\n\\t\\twidth: 24%;\\n\\t\\tcolor: black;\\n\\t}\\n\\n</style>\"],\"names\":[],\"mappings\":\"AAoFC,MAAM,eAAC,CAAC,AACP,gBAAgB,CAAE,SAAS,CAC3B,aAAa,CAAE,GAAG,CAClB,YAAY,CAAE,KAAK,CACnB,OAAO,CAAE,GAAG,CACZ,KAAK,CAAE,GAAG,CACV,KAAK,CAAE,KAAK,AACb,CAAC\"}"
};

const Controls = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {

	$$result.css.add(css$k);

	return `<nav><ul><button class="${"svelte-1fzjfwg"}">previous</button>
		${ `<button class="${"svelte-1fzjfwg"}">pause</button>`}
		<button class="${"svelte-1fzjfwg"}">stop</button>
		<button class="${"svelte-1fzjfwg"}">next</button></ul>
</nav>`;
});

/* src/routes/tvshows.svelte generated by Svelte v3.24.0 */

const css$l = {
	code: "#vid2.svelte-calnre{text-align:center}video.svelte-calnre{width:85%}",
	map: "{\"version\":3,\"file\":\"tvshows.svelte\",\"sources\":[\"tvshows.svelte\"],\"sourcesContent\":[\"<script>\\n    import TVShows from '../components/TVShowsListComp.svelte'\\n    import Controls from '../components/Controls.svelte'\\n    import { TVlocalplayURL } from '../components/PlayerStore'\\n    \\n    let visible = false\\n    let visible3 = false\\n\\n\\tlet fuck = () => {\\n        if (visible) {\\n            visible = false\\n        } else {\\n            visible = true\\n        }\\n    }\\n\\n    let fuck3 = () => {\\n        if (visible3) {\\n            visible3 = false\\n        } else {\\n            visible3 = true\\n        }\\n    }\\n\\n    let TVlocalplayURL_value\\n\\tconst unsubplid = TVlocalplayURL.subscribe(value => {\\n        TVlocalplayURL_value = value\\n    })\\n\\n</script>\\n\\n<svelte:head><title>TV Shows</title></svelte:head>\\n\\n{#if visible3}\\n    <div id=\\\"vid2\\\">\\n        <!-- \\\"http://192.168.0.42:8081/Action/12 Strong (2018).mp4\\\" -->\\n        <video src={TVlocalplayURL_value} controls autoplay></video>\\n    </div>\\n{/if}\\n\\n<input type=\\\"checkbox\\\" bind:checked={visible3} value=\\\"fuck\\\">\\n<lable>localplay</lable>\\n\\n{#if !visible3}\\n    <Controls />\\n    <!-- <button class=\\\"controller\\\" on:click={fuck} >controls</button> -->\\n{/if}\\n\\n<TVShows LOCALPLAY={visible3} />\\n\\n<style>\\n\\n    #vid2 {\\n        text-align: center;\\n    }\\n\\n    video {\\n        width: 85%;\\n    }\\n\\n</style>\"],\"names\":[],\"mappings\":\"AAoDI,KAAK,cAAC,CAAC,AACH,UAAU,CAAE,MAAM,AACtB,CAAC,AAED,KAAK,cAAC,CAAC,AACH,KAAK,CAAE,GAAG,AACd,CAAC\"}"
};

const Tvshows = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let visible3 = false;

	const unsubplid = TVlocalplayURL.subscribe(value => {
	});

	$$result.css.add(css$l);

	return `${($$result.head += `${($$result.title = `<title>TV Shows</title>`, "")}`, "")}

${ ``}

<input type="${"checkbox"}" value="${"fuck"}"${add_attribute("checked", visible3, 1)}>
<lable>localplay</lable>

${ `${validate_component(Controls, "Controls").$$render($$result, {}, {}, {})}
    `
	}

${validate_component(TVShowsListComp, "TVShows").$$render($$result, { LOCALPLAY: visible3 }, {}, {})}`;
});

/* src/routes/albums.svelte generated by Svelte v3.24.0 */

const css$m = {
	code: "#pad.svelte-a1wug1{margin-bottom:100px}",
	map: "{\"version\":3,\"file\":\"albums.svelte\",\"sources\":[\"albums.svelte\"],\"sourcesContent\":[\"<script>\\n\\timport AlbumCard from '../components/AlbumCard.svelte';\\n\\timport PageComp from '../components/PageComp.svelte'\\n\\timport { onMount } from 'svelte';\\n\\n\\tlet selected = 1;\\n\\tlet ALBSA = [];\\n\\tlet ALBUMS ;\\n\\n\\tlet promise = getAlbumInfo().catch(err => console.log(err));\\n\\t\\n\\tasync function getAlbumInfo() {\\n\\t\\tawait fetch(`http://192.168.0.31:6789/AlbumInfo?selected=${selected}`, {mode: \\\"cors\\\", method: \\\"GET\\\"})\\n\\t\\t.then(r => r.json())\\n\\t\\t.then(data => {\\n\\t\\t\\tif (data.albs.length != 0) {\\n\\t\\t\\t\\tALBUMS = data.albs;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tALBUMS = 0\\n\\t\\t\\t}\\n\\t\\t}).catch(err => console.log(err));\\n\\t}\\n\\n    let handleMessage = (event) => {\\n    \\tselected = event.detail.text\\n\\t\\tpromise = getAlbumInfo().catch(err => console.log(err));\\n\\t  }\\n\\n</script>\\n\\n<svelte:head><title>Albums</title></svelte:head>\\n\\n<h2>Albums</h2>\\n\\n<PageComp on:message={handleMessage} ALPHA=\\\"AlbumAlpha\\\"/>\\n\\n{#await promise then value}\\n    {#if ALBUMS != 0}\\n        {#each ALBUMS as alb}\\n\\t\\t\\t<AlbumCard artist={alb.Artist} \\n\\t\\t\\t\\talbum={alb.Album}\\n\\t\\t\\t\\talbumid={alb.AlbumId}\\n\\t\\t\\t\\talbumarthttppath={alb.Smallthumb} \\n\\t\\t\\t\\tnumsongs={alb.NumSongs} \\n\\t\\t\\t\\tsongs={alb.Songs}/>\\n        {/each}\\n    {:else}\\n        <p>Make a Selections</p>\\n    {/if}\\n{/await}\\n\\n<div id=\\\"pad\\\"></div>\\n\\n<style>\\n\\n\\t#pad {\\n\\t\\tmargin-bottom: 100px;\\n\\t}\\n\\n</style>\"],\"names\":[],\"mappings\":\"AAuDC,IAAI,cAAC,CAAC,AACL,aAAa,CAAE,KAAK,AACrB,CAAC\"}"
};

const Albums = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let selected = 1;
	let ALBUMS;
	let promise = getAlbumInfo().catch(err => console.log(err));

	async function getAlbumInfo() {
		await fetch(`http://192.168.0.31:6789/AlbumInfo?selected=${selected}`, { mode: "cors", method: "GET" }).then(r => r.json()).then(data => {
			if (data.albs.length != 0) {
				ALBUMS = data.albs;
			} else {
				ALBUMS = 0;
			}
		}).catch(err => console.log(err));
	}

	$$result.css.add(css$m);

	return `${($$result.head += `${($$result.title = `<title>Albums</title>`, "")}`, "")}

<h2>Albums</h2>

${validate_component(PageComp, "PageComp").$$render($$result, { ALPHA: "AlbumAlpha" }, {}, {})}

${(function (__value) {
		if (is_promise(__value)) return ``;

		return (function (value) {
			return `
    ${ALBUMS != 0
			? `${each(ALBUMS, alb => `${validate_component(AlbumCard, "AlbumCard").$$render(
					$$result,
					{
						artist: alb.Artist,
						album: alb.Album,
						albumid: alb.AlbumId,
						albumarthttppath: alb.Smallthumb,
						numsongs: alb.NumSongs,
						songs: alb.Songs
					},
					{},
					{}
				)}`)}`
			: `<p>Make a Selections</p>`}
`;
		})();
	})(promise)}

<div id="${"pad"}" class="${"svelte-a1wug1"}"></div>`;
});

/* src/components/MoviesListComp.svelte generated by Svelte v3.24.0 */

const css$n = {
	code: "nav.svelte-156xawh{text-align:center}img.svelte-156xawh{width:130px;height:195px;padding:1px}",
	map: "{\"version\":3,\"file\":\"MoviesListComp.svelte\",\"sources\":[\"MoviesListComp.svelte\"],\"sourcesContent\":[\"<script>\\n    export let MYDATA = [];\\n    export let movLOCALPLAY\\n    import { localplayURL } from './PlayerStore'\\n\\n\\tasync function getPlayMov(mov) {\\n\\t\\tawait fetch(`http://192.168.0.42:8888/playMediaReact?movie=${mov}`, {mode: \\\"cors\\\", method: \\\"GET\\\"})\\n\\t\\t.then(r => r.json())\\n\\t\\t.then(data => {\\n            console.log(data)\\n\\t\\t}).catch(err => console.log(err));\\n\\t}\\n\\tlet handlegetMovClick = (x) => {\\n        if (movLOCALPLAY) {\\n            let foo = x.split(\\\"Movies\\\", 2)\\n            let newpath = `http://192.168.0.42:8081` + foo[1]\\n            localplayURL.set(newpath)\\n            console.log(newpath)\\n        } else {\\n            let promise = getPlayMov(x).catch(err => console.log(err));\\n        }\\n\\t}\\n\\n</script>\\n\\n{#if MYDATA != \\\"\\\"}\\n    <nav>\\n        {#each MYDATA as mydat}\\n            <img on:click={handlegetMovClick(mydat[6])}  src={mydat[9]} alt={mydat[7]}/>\\n        {/each}\\n    </nav>\\n{/if}\\n\\n<style>\\n\\n    nav {\\n        text-align: center;\\n    }\\n\\n    img {\\n        width: 130px;\\n        height: 195px;\\n        padding: 1px;\\n    }\\n    \\n</style>\"],\"names\":[],\"mappings\":\"AAmCI,GAAG,eAAC,CAAC,AACD,UAAU,CAAE,MAAM,AACtB,CAAC,AAED,GAAG,eAAC,CAAC,AACD,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,KAAK,CACb,OAAO,CAAE,GAAG,AAChB,CAAC\"}"
};

const MoviesListComp = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let { MYDATA = [] } = $$props;
	let { movLOCALPLAY } = $$props;

	if ($$props.MYDATA === void 0 && $$bindings.MYDATA && MYDATA !== void 0) $$bindings.MYDATA(MYDATA);
	if ($$props.movLOCALPLAY === void 0 && $$bindings.movLOCALPLAY && movLOCALPLAY !== void 0) $$bindings.movLOCALPLAY(movLOCALPLAY);
	$$result.css.add(css$n);

	return `${MYDATA != ""
	? `<nav class="${"svelte-156xawh"}">${each(MYDATA, mydat => `<img${add_attribute("src", mydat[9], 0)}${add_attribute("alt", mydat[7], 0)} class="${"svelte-156xawh"}">`)}</nav>`
	: ``}`;
});

/* src/routes/movies.svelte generated by Svelte v3.24.0 */

const css$o = {
	code: "lable.svelte-1hvc1od,input.svelte-1hvc1od{margin-bottom:25px}video.svelte-1hvc1od{width:85%}div#vid1.svelte-1hvc1od{text-align:center}",
	map: "{\"version\":3,\"file\":\"movies.svelte\",\"sources\":[\"movies.svelte\"],\"sourcesContent\":[\"<script>\\n\\timport MoviesListComp from '../components/MoviesListComp.svelte'\\n\\timport Controls from '../components/Controls.svelte'\\n\\timport {localplayURL} from '../components/PlayerStore'\\n\\n\\t\\n\\tlet NewDat;\\n\\tasync function getMovies(x) {\\n\\t\\tawait fetch(`http://192.168.0.42:8888/${x}`, {mode: \\\"cors\\\", method: \\\"GET\\\"})\\n\\t\\t.then(r => r.json())\\n\\t\\t.then(data => {\\n\\t\\t\\t// console.log(data)\\n\\t\\t\\tNewDat = data.map(da => {\\n\\t\\t\\t\\t// console.log(da.movname)\\n\\t\\t\\t\\tconst carosthumb = da.carosthumb\\n\\t\\t\\t\\tconst catagory = da.catagory\\n\\t\\t\\t\\tconst dirpath = da.dirpath\\n\\t\\t\\t\\tconst filepath = da.filepath\\n\\t\\t\\t\\tconst genre = da.genre\\n\\t\\t\\t\\tconst mediaid = da.mediaid\\n\\t\\t\\t\\tconst movfspath = da.movfspath\\n\\t\\t\\t\\tconst movname = da.movname\\n\\t\\t\\t\\tconst movyear = da.movyear\\n\\t\\t\\t\\tlet np = da.thumbpath.split(\\\"/\\\", 5)\\n\\t\\t\\t\\tconst thumbpath = np[4]\\n\\t\\t\\t\\treturn [carosthumb, catagory, dirpath, filepath, genre, mediaid, movfspath, movname, movyear, thumbpath]\\n\\t\\t\\t})\\n\\t\\t}).catch(err => console.log(err));\\n\\t}\\n\\n\\tlet handleActionClick = () => {\\n\\t\\tlet movs = \\\"intAction\\\"\\n\\t\\tlet promise = getMovies(movs).catch(err => console.log(err));\\n\\t}\\n\\n\\tlet handleCartoonsClick = () => {\\n\\t\\tlet movs = \\\"intCartoons\\\"\\n\\t\\tlet promise = getMovies(movs).catch(err => console.log(err));\\n\\t}\\n\\n\\tlet handleComedyClick = () => {\\n\\t\\tlet movs = \\\"intComedy\\\"\\n\\t\\tlet promise = getMovies(movs).catch(err => console.log(err));\\n\\t}\\n\\n\\tlet handleDramaClick = () => {\\n\\t\\tlet movs = \\\"intDrama\\\"\\n\\t\\tlet promise = getMovies(movs).catch(err => console.log(err));\\n\\t}\\n\\n\\tlet handleSciFiClick = () => {\\n\\t\\tlet movs = \\\"intSciFi\\\"\\n\\t\\tlet promise = getMovies(movs).catch(err => console.log(err));\\n\\t}\\n\\n\\tlet handleMiscClick = () => {\\n\\t\\tlet movs = \\\"intMisc\\\"\\n\\t\\tlet promise = getMovies(movs).catch(err => console.log(err));\\n\\t}\\n\\n\\tlet handleDieHardClick = () => {\\n\\t\\tlet movs = \\\"intDieHard\\\"\\n\\t\\tlet promise = getMovies(movs).catch(err => console.log(err));\\n\\t}\\n\\n\\tlet handleGodzillaClick = () => {\\n\\t\\tlet movs = \\\"intGodzilla\\\"\\n\\t\\tlet promise = getMovies(movs).catch(err => console.log(err));\\n\\t}\\n\\n\\tlet handleHarryPotterClick = () => {\\n\\t\\tlet movs = \\\"intHarryPotter\\\"\\n\\t\\tlet promise = getMovies(movs).catch(err => console.log(err));\\n\\t}\\n\\n\\tlet handleIndianaJonesClick = () => {\\n\\t\\tlet movs = \\\"intIndianaJones\\\"\\n\\t\\tlet promise = getMovies(movs).catch(err => console.log(err));\\n\\t}\\n\\n\\tlet handleJohnWayneClick = () => {\\n\\t\\tlet movs = \\\"intJohnWayne\\\"\\n\\t\\tlet promise = getMovies(movs).catch(err => console.log(err));\\n\\t}\\n\\n\\tlet handleJohnWickClick = () => {\\n\\t\\tlet movs = \\\"intJohnWick\\\"\\n\\t\\tlet promise = getMovies(movs).catch(err => console.log(err));\\n\\t}\\n\\n\\tlet handleKingsMenClick = () => {\\n\\t\\tlet movs = \\\"intKingsMan\\\"\\n\\t\\tlet promise = getMovies(movs).catch(err => console.log(err));\\n\\t}\\n\\n\\tlet handlePiratesClick = () => {\\n\\t\\tlet movs = \\\"intPirates\\\"\\n\\t\\tlet promise = getMovies(movs).catch(err => console.log(err));\\n\\t}\\n\\n\\tlet handleStarTrekClick = () => {\\n\\t\\tlet movs = \\\"intStarTrek\\\"\\n\\t\\tlet promise = getMovies(movs).catch(err => console.log(err));\\n\\t}\\n\\n\\tlet handleStarWarsClick = () => {\\n\\t\\tlet movs = \\\"intStarWars\\\"\\n\\t\\tlet promise = getMovies(movs).catch(err => console.log(err));\\n\\t}\\n\\n\\tlet handleSuperHerosClick = () => {\\n\\t\\tlet movs = \\\"intSuperHeros\\\"\\n\\t\\tlet promise = getMovies(movs).catch(err => console.log(err));\\n\\t}\\n\\n\\tlet handleTremorsClick = () => {\\n\\t\\tlet movs = \\\"intTremors\\\"\\n\\t\\tlet promise = getMovies(movs).catch(err => console.log(err));\\n\\t}\\n\\n\\tlet handleMenInBlackClick = () => {\\n\\t\\tlet movs = \\\"intMenInBlack\\\"\\n\\t\\tlet promise = getMovies(movs).catch(err => console.log(err));\\n\\t}\\n\\n\\tlet visible = false\\n\\tlet fuck = () => {\\n        if (visible) {\\n\\t\\t\\tvisible = false\\n        } else {\\n            visible = true\\n        }\\n\\t}\\n\\n\\tlet localplayURL_value\\n\\tconst unsubplid = localplayURL.subscribe(value => {\\n        localplayURL_value = value\\n    })\\n</script>\\n\\n<svelte:head><title>Movies</title></svelte:head>\\n\\n<input type=\\\"checkbox\\\" bind:checked={visible} value=\\\"fuck\\\">\\n<lable>localplay</lable>\\n<span></span>\\n{#if visible}\\n\\t<div id=\\\"vid1\\\">\\n\\t\\t<video controls autoplay src={localplayURL_value}></video>\\n\\t\\t<!-- <video controls src={localplayURL_value}></video> -->\\n\\t</div>\\n{:else}\\n\\t<Controls />\\n{/if}\\n\\n<nav>\\n\\t<ul>\\n\\t\\t<button on:click={handleActionClick}>Action</button>\\n\\t\\t<button on:click={handleCartoonsClick}>Cartoons</button>\\n\\t\\t<button on:click={handleComedyClick}>Comedy</button>\\n\\t\\t<button on:click={handleDramaClick}>Drama</button>\\n\\t\\t<button on:click={handleSciFiClick}>SciFi</button>\\n\\t\\t<button on:click={handleMiscClick}>Misc</button>\\n\\t\\t<button on:click={handleDieHardClick}>Die Hard</button>\\n\\t\\t<button on:click={handleGodzillaClick}>Godzilla</button>\\n\\t\\t<button on:click={handleHarryPotterClick}>Harry Potter</button>\\n\\t\\t<button on:click={handleIndianaJonesClick}>Indiana Jones</button>\\n\\t\\t<button on:click={handleJohnWayneClick}>John Wayne</button>\\n\\t\\t<button on:click={handleJohnWickClick}>John Wick</button>\\n\\t\\t<button on:click={handleKingsMenClick}>KingsMen</button>\\n\\t\\t<button on:click={handlePiratesClick}>Pirates</button>\\n\\t\\t<button on:click={handleStarTrekClick}>Star Trek</button>\\n\\t\\t<button on:click={handleStarWarsClick}>Star Wars</button>\\n\\t\\t<button on:click={handleSuperHerosClick}>Super Heros</button>\\n\\t\\t<button on:click={handleTremorsClick}>Tremors</button>\\n\\t\\t<button on:click={handleMenInBlackClick}>Men In Black</button>\\n\\t</ul>\\n</nav>\\n\\n<MoviesListComp movLOCALPLAY={visible}  MYDATA={NewDat}/>\\n\\n<style>\\n\\n\\tlable, input {\\n\\t\\tmargin-bottom: 25px;\\n\\t}\\n\\n\\tvideo {\\n\\t\\twidth: 85%;\\n\\t}\\n\\t\\n\\tdiv#vid1 {\\n\\t\\ttext-align: center;\\n\\t\\t\\n\\t}\\n\\n</style>\"],\"names\":[],\"mappings\":\"AAsLC,oBAAK,CAAE,KAAK,eAAC,CAAC,AACb,aAAa,CAAE,IAAI,AACpB,CAAC,AAED,KAAK,eAAC,CAAC,AACN,KAAK,CAAE,GAAG,AACX,CAAC,AAED,GAAG,KAAK,eAAC,CAAC,AACT,UAAU,CAAE,MAAM,AAEnB,CAAC\"}"
};

const Movies = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let NewDat;

	let visible = false;

	const unsubplid = localplayURL.subscribe(value => {
	});

	$$result.css.add(css$o);

	return `${($$result.head += `${($$result.title = `<title>Movies</title>`, "")}`, "")}

<input type="${"checkbox"}" value="${"fuck"}" class="${"svelte-1hvc1od"}"${add_attribute("checked", visible, 1)}>
<lable class="${"svelte-1hvc1od"}">localplay</lable>
<span></span>
${ `${validate_component(Controls, "Controls").$$render($$result, {}, {}, {})}`}

<nav><ul><button>Action</button>
		<button>Cartoons</button>
		<button>Comedy</button>
		<button>Drama</button>
		<button>SciFi</button>
		<button>Misc</button>
		<button>Die Hard</button>
		<button>Godzilla</button>
		<button>Harry Potter</button>
		<button>Indiana Jones</button>
		<button>John Wayne</button>
		<button>John Wick</button>
		<button>KingsMen</button>
		<button>Pirates</button>
		<button>Star Trek</button>
		<button>Star Wars</button>
		<button>Super Heros</button>
		<button>Tremors</button>
		<button>Men In Black</button></ul></nav>

${validate_component(MoviesListComp, "MoviesListComp").$$render($$result, { movLOCALPLAY: visible, MYDATA: NewDat }, {}, {})}`;
});

/* src/components/SongPage.svelte generated by Svelte v3.24.0 */

const css$p = {
	code: "ul.svelte-1dvefsq{background-color:tomato;border:black;border-style:solid;border-radius:15px;text-align:center;list-style-type:none;width:95%}li.svelte-1dvefsq{color:black}",
	map: "{\"version\":3,\"file\":\"SongPage.svelte\",\"sources\":[\"SongPage.svelte\"],\"sourcesContent\":[\"<script>\\n    import { songURLstore, artiststore, songstore, songidstore } from './PlayerStore.js'\\n    import { playlistidstore } from './PlaylistComps/PlaylistListStore.js'\\n    import { each } from 'svelte/internal';\\n    export let songs;\\n\\n    async function getSongURL(x) {\\n        fetch(`http://192.168.0.31:6789/PathArt?selected=${x}`, {mode: \\\"cors\\\", method: \\\"GET\\\"})\\n        .then(r => r.json())\\n        .then(data => {\\n          let SONGURL = `http://192.168.0.31:6789` + data.HttpMusicPath\\n          songURLstore.set(SONGURL)\\n          artiststore.set(data.Artist)\\n          songstore.set(data.Song)\\n          songidstore.set(x)\\n        }).catch(err => console.log(err));\\n      }\\n\\n    let zoo = (z) => {\\n      let promise = getSongURL(z).catch(err => console.log(err));\\n    }\\n\\n    export let songURLstore_value;\\n\\t  export let artiststore_value;\\n    export let songstore_value;\\n    export let songidstore_value;\\n    export let playlistidstore_value;\\n\\n\\t  const unsubSongUrl = songURLstore.subscribe(value => {\\n      songURLstore_value = value\\n      console.log(songURLstore_value)\\n    })\\n\\n    const unsubArtist = artiststore.subscribe(value => {\\n      artiststore_value = value\\n    })\\n\\n    const unsubSong = songstore.subscribe(value => {\\n      songstore_value = value\\n    })\\n\\n    const unsubSongId = songidstore.subscribe(value => {\\n      songidstore_value = value\\n    })\\n\\n    const unsubPlaylistId = playlistidstore.subscribe(value => {\\n      playlistidstore_value = value\\n    })\\n\\n    console.log(songURLstore_value)\\n    console.log(songstore_value)\\n    console.log(songidstore_value)\\n    console.log(playlistidstore_value)\\n\\n    // this is for add song to playlist\\n    // AddSongsToPlistDB\\n    // songname\\n    // songid\\n    // playlistid\\n</script>\\n\\n{#each songs as so}\\n    <ul id={so.SongId} >\\n        <li><h2>{so.Song}</h2></li>\\n        <li><p>{so.Artist}</p></li>\\n        <li>\\n          <button on:click={zoo(so.SongId)}>Play</button>\\n          <button>Add</button>\\n        </li>\\n    </ul>\\n{/each}\\n\\n<style>\\n\\n    ul {\\n        background-color: tomato;\\n        border: black;\\n        border-style: solid;\\n        border-radius: 15px;\\n        text-align: center;\\n        list-style-type: none;\\n        width: 95%;\\n    }\\n\\n    li {\\n        color: black;\\n    }\\n\\n</style>\"],\"names\":[],\"mappings\":\"AA0EI,EAAE,eAAC,CAAC,AACA,gBAAgB,CAAE,MAAM,CACxB,MAAM,CAAE,KAAK,CACb,YAAY,CAAE,KAAK,CACnB,aAAa,CAAE,IAAI,CACnB,UAAU,CAAE,MAAM,CAClB,eAAe,CAAE,IAAI,CACrB,KAAK,CAAE,GAAG,AACd,CAAC,AAED,EAAE,eAAC,CAAC,AACA,KAAK,CAAE,KAAK,AAChB,CAAC\"}"
};

const SongPage = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let { songs } = $$props;

	let { songURLstore_value } = $$props;
	let { artiststore_value } = $$props;
	let { songstore_value } = $$props;
	let { songidstore_value } = $$props;
	let { playlistidstore_value } = $$props;

	const unsubSongUrl = songURLstore.subscribe(value => {
		songURLstore_value = value;
		console.log(songURLstore_value);
	});

	const unsubArtist = artiststore.subscribe(value => {
		artiststore_value = value;
	});

	const unsubSong = songstore.subscribe(value => {
		songstore_value = value;
	});

	const unsubSongId = songidstore.subscribe(value => {
		songidstore_value = value;
	});

	const unsubPlaylistId = playlistidstore.subscribe(value => {
		playlistidstore_value = value;
	});

	console.log(songURLstore_value);
	console.log(songstore_value);
	console.log(songidstore_value);
	console.log(playlistidstore_value);
	if ($$props.songs === void 0 && $$bindings.songs && songs !== void 0) $$bindings.songs(songs);
	if ($$props.songURLstore_value === void 0 && $$bindings.songURLstore_value && songURLstore_value !== void 0) $$bindings.songURLstore_value(songURLstore_value);
	if ($$props.artiststore_value === void 0 && $$bindings.artiststore_value && artiststore_value !== void 0) $$bindings.artiststore_value(artiststore_value);
	if ($$props.songstore_value === void 0 && $$bindings.songstore_value && songstore_value !== void 0) $$bindings.songstore_value(songstore_value);
	if ($$props.songidstore_value === void 0 && $$bindings.songidstore_value && songidstore_value !== void 0) $$bindings.songidstore_value(songidstore_value);
	if ($$props.playlistidstore_value === void 0 && $$bindings.playlistidstore_value && playlistidstore_value !== void 0) $$bindings.playlistidstore_value(playlistidstore_value);
	$$result.css.add(css$p);

	return `${each(songs, so => `<ul${add_attribute("id", so.SongId, 0)} class="${"svelte-1dvefsq"}"><li class="${"svelte-1dvefsq"}"><h2>${escape(so.Song)}</h2></li>
        <li class="${"svelte-1dvefsq"}"><p>${escape(so.Artist)}</p></li>
        <li class="${"svelte-1dvefsq"}"><button>Play</button>
          <button>Add</button></li>
    </ul>`)}`;
});

/* src/routes/songs.svelte generated by Svelte v3.24.0 */

const Songs = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let selected = 1;
	let SONGS = [];
	let promise = getSongInfo().catch(err => console.log(err));

	async function getSongInfo() {
		await fetch(`http://192.168.0.31:6789/SongInfo?selected=${selected}`, { mode: "cors", method: "GET" }).then(r => r.json()).then(data => {
			SONGS = data.song;
		});
	}

	return `${($$result.head += `${($$result.title = `<title>Songs</title>`, "")}`, "")}

<h2>Songs</h2>

${validate_component(PageComp, "PageComp").$$render($$result, { ALPHA: "SongAlpha" }, {}, {})}

${validate_component(SongPage, "SongPage").$$render($$result, { songs: SONGS }, {}, {})}`;
});

/* src/components/Nav.svelte generated by Svelte v3.24.0 */

const css$q = {
	code: "nav.svelte-aiqo7t{border-bottom:1px solid rgba(255,62,0,0.1);font-weight:300;padding:0 1em}ul.svelte-aiqo7t{margin:0;padding:0}ul.svelte-aiqo7t::after{content:'';display:block;clear:both}li.svelte-aiqo7t{display:block;float:left}a.svelte-aiqo7t{text-decoration:none;padding:1em 0.5em;display:block;color:white}",
	map: "{\"version\":3,\"file\":\"Nav.svelte\",\"sources\":[\"Nav.svelte\"],\"sourcesContent\":[\"<script>\\n\\t// export let segment;\\n</script>\\n\\n<style>\\n\\tnav {\\n\\t\\tborder-bottom: 1px solid rgba(255,62,0,0.1);\\n\\t\\tfont-weight: 300;\\n\\t\\tpadding: 0 1em;\\n\\t}\\n\\n\\tul {\\n\\t\\tmargin: 0;\\n\\t\\tpadding: 0;\\n\\t}\\n\\n\\t/* clearfix */\\n\\tul::after {\\n\\t\\tcontent: '';\\n\\t\\tdisplay: block;\\n\\t\\tclear: both;\\n\\t}\\n\\n\\tli {\\n\\t\\tdisplay: block;\\n\\t\\tfloat: left;\\n\\t}\\n\\t\\n\\ta {\\n\\t\\ttext-decoration: none;\\n\\t\\tpadding: 1em 0.5em;\\n\\t\\tdisplay: block;\\n\\t\\tcolor: white;\\n\\t}\\n\\t/* .foo {\\n\\t\\tcolor: lawngreen;\\n\\t} */\\n\\n</style>\\n\\n<nav>\\n\\t<ul>\\n\\t\\t<li><a href=\\\".\\\">home</a></li>\\n\\t\\t<li><a href=\\\"movies\\\">movies</a></li>\\n\\t\\t<li><a href=\\\"tvshows\\\">tvshows</a></li>\\n\\t\\t<li><a href=\\\"artists\\\">artists</a></li>\\n\\t\\t<li><a href=\\\"albums\\\">albums</a></li>\\n\\t\\t<li><a  href=\\\"songs\\\">songs</a></li>\\n\\t\\t<li><a href=\\\"playlists\\\">playlists</a></li>\\n\\t\\t<!-- <li><a class=\\\"foo\\\" href=\\\"http://192.168.0.42:4566/\\\">YTS-EZTV</a></li>\\n\\t\\t<li><a class=\\\"foo\\\" href=\\\"http://192.168.0.42:8081/\\\">ReGoMo</a></li> -->\\n\\t</ul>\\n</nav>\\n\"],\"names\":[],\"mappings\":\"AAKC,GAAG,cAAC,CAAC,AACJ,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAC3C,WAAW,CAAE,GAAG,CAChB,OAAO,CAAE,CAAC,CAAC,GAAG,AACf,CAAC,AAED,EAAE,cAAC,CAAC,AACH,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,CAAC,AACX,CAAC,AAGD,gBAAE,OAAO,AAAC,CAAC,AACV,OAAO,CAAE,EAAE,CACX,OAAO,CAAE,KAAK,CACd,KAAK,CAAE,IAAI,AACZ,CAAC,AAED,EAAE,cAAC,CAAC,AACH,OAAO,CAAE,KAAK,CACd,KAAK,CAAE,IAAI,AACZ,CAAC,AAED,CAAC,cAAC,CAAC,AACF,eAAe,CAAE,IAAI,CACrB,OAAO,CAAE,GAAG,CAAC,KAAK,CAClB,OAAO,CAAE,KAAK,CACd,KAAK,CAAE,KAAK,AACb,CAAC\"}"
};

const Nav = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	$$result.css.add(css$q);

	return `<nav class="${"svelte-aiqo7t"}"><ul class="${"svelte-aiqo7t"}"><li class="${"svelte-aiqo7t"}"><a href="${"."}" class="${"svelte-aiqo7t"}">home</a></li>
		<li class="${"svelte-aiqo7t"}"><a href="${"movies"}" class="${"svelte-aiqo7t"}">movies</a></li>
		<li class="${"svelte-aiqo7t"}"><a href="${"tvshows"}" class="${"svelte-aiqo7t"}">tvshows</a></li>
		<li class="${"svelte-aiqo7t"}"><a href="${"artists"}" class="${"svelte-aiqo7t"}">artists</a></li>
		<li class="${"svelte-aiqo7t"}"><a href="${"albums"}" class="${"svelte-aiqo7t"}">albums</a></li>
		<li class="${"svelte-aiqo7t"}"><a href="${"songs"}" class="${"svelte-aiqo7t"}">songs</a></li>
		<li class="${"svelte-aiqo7t"}"><a href="${"playlists"}" class="${"svelte-aiqo7t"}">playlists</a></li>
		</ul></nav>`;
});

/* src/routes/_layout.svelte generated by Svelte v3.24.0 */

const css$r = {
	code: "body{background-color:black}main.svelte-sq9ub{position:relative;max-width:56em;background-color:white;padding:2em;margin:0 auto;box-sizing:border-box;background-color:pink}nav.svelte-sq9ub{text-align:center}audio.svelte-sq9ub{width:100%;margin-top:7px}button.svelte-sq9ub{background-color:black;color:gold;border:none;width:25%}",
	map: "{\"version\":3,\"file\":\"_layout.svelte\",\"sources\":[\"_layout.svelte\"],\"sourcesContent\":[\"<script>\\n\\timport Nav from '../components/Nav.svelte';\\n\\timport {songURLstore, artiststore, songstore} from '../components/PlayerStore.js'\\n\\n\\t\\n\\t\\n\\tlet songURLstore_value;\\n\\tlet artiststore_value;\\n\\tlet songstore_value;\\n\\t\\n\\tconst unsubscribe = songURLstore.subscribe(value => {\\n\\t\\tsongURLstore_value = value\\n\\t})\\n\\n\\tconst unsubscribe2 = artiststore.subscribe(value2 => {\\n\\t\\tartiststore_value = value2\\n\\t})\\n\\n\\tconst unsubscribe3 = songstore.subscribe(value3 => {\\n\\t\\tsongstore_value = value3\\n\\t})\\n\\n\\n\\n\\n\\n\\n\\n\\n</script>\\n\\n<Nav />\\n<!-- <Nav {segment}/> -->\\n\\n<nav>\\n\\t<button>{artiststore_value}</button>\\n\\t<button>{songstore_value}</button>\\n</nav>\\n\\n<audio id=\\\"audio1\\\" src={songURLstore_value} controls autoplay></audio>\\n\\n\\n\\n<main>\\n\\t<slot></slot>\\n</main>\\n\\n<style>\\n\\n\\t:global(body) {\\n\\t\\tbackground-color: black;\\n\\t}\\n\\n\\tmain {\\n\\t\\tposition: relative;\\n\\t\\tmax-width: 56em;\\n\\t\\tbackground-color: white;\\n\\t\\tpadding: 2em;\\n\\t\\tmargin: 0 auto;\\n\\t\\tbox-sizing: border-box;\\n\\t\\tbackground-color: pink;\\n\\t}\\n\\n\\tnav {\\n\\t\\ttext-align: center;\\n\\t}\\n\\n\\taudio {\\n\\t\\twidth: 100%;\\n\\t\\tmargin-top: 7px;\\n\\t}\\n\\n\\tbutton {\\n\\t\\tbackground-color: black;\\n\\t\\tcolor: gold;\\n\\t\\tborder: none;\\n\\t\\twidth: 25%;\\n\\t}\\n\\t\\n</style>\"],\"names\":[],\"mappings\":\"AAiDS,IAAI,AAAE,CAAC,AACd,gBAAgB,CAAE,KAAK,AACxB,CAAC,AAED,IAAI,aAAC,CAAC,AACL,QAAQ,CAAE,QAAQ,CAClB,SAAS,CAAE,IAAI,CACf,gBAAgB,CAAE,KAAK,CACvB,OAAO,CAAE,GAAG,CACZ,MAAM,CAAE,CAAC,CAAC,IAAI,CACd,UAAU,CAAE,UAAU,CACtB,gBAAgB,CAAE,IAAI,AACvB,CAAC,AAED,GAAG,aAAC,CAAC,AACJ,UAAU,CAAE,MAAM,AACnB,CAAC,AAED,KAAK,aAAC,CAAC,AACN,KAAK,CAAE,IAAI,CACX,UAAU,CAAE,GAAG,AAChB,CAAC,AAED,MAAM,aAAC,CAAC,AACP,gBAAgB,CAAE,KAAK,CACvB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,GAAG,AACX,CAAC\"}"
};

const Layout = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let songURLstore_value;
	let artiststore_value;
	let songstore_value;

	const unsubscribe = songURLstore.subscribe(value => {
		songURLstore_value = value;
	});

	const unsubscribe2 = artiststore.subscribe(value2 => {
		artiststore_value = value2;
	});

	const unsubscribe3 = songstore.subscribe(value3 => {
		songstore_value = value3;
	});

	$$result.css.add(css$r);

	return `${validate_component(Nav, "Nav").$$render($$result, {}, {}, {})}


<nav class="${"svelte-sq9ub"}"><button class="${"svelte-sq9ub"}">${escape(artiststore_value)}</button>
	<button class="${"svelte-sq9ub"}">${escape(songstore_value)}</button></nav>

<audio id="${"audio1"}"${add_attribute("src", songURLstore_value, 0)} controls autoplay class="${"svelte-sq9ub"}"></audio>



<main class="${"svelte-sq9ub"}">${$$slots.default ? $$slots.default({}) : ``}
</main>`;
});

/* src/routes/_error.svelte generated by Svelte v3.24.0 */

const css$s = {
	code: "h1.svelte-8od9u6,p.svelte-8od9u6{margin:0 auto}h1.svelte-8od9u6{font-size:2.8em;font-weight:700;margin:0 0 0.5em 0}p.svelte-8od9u6{margin:1em auto}@media(min-width: 480px){h1.svelte-8od9u6{font-size:4em}}",
	map: "{\"version\":3,\"file\":\"_error.svelte\",\"sources\":[\"_error.svelte\"],\"sourcesContent\":[\"<script>\\n\\texport let status;\\n\\texport let error;\\n\\n\\tconst dev = \\\"development\\\" === 'development';\\n</script>\\n\\n<style>\\n\\th1, p {\\n\\t\\tmargin: 0 auto;\\n\\t}\\n\\n\\th1 {\\n\\t\\tfont-size: 2.8em;\\n\\t\\tfont-weight: 700;\\n\\t\\tmargin: 0 0 0.5em 0;\\n\\t}\\n\\n\\tp {\\n\\t\\tmargin: 1em auto;\\n\\t}\\n\\n\\t@media (min-width: 480px) {\\n\\t\\th1 {\\n\\t\\t\\tfont-size: 4em;\\n\\t\\t}\\n\\t}\\n</style>\\n\\n<svelte:head>\\n\\t<title>{status}</title>\\n</svelte:head>\\n\\n<h1>{status}</h1>\\n\\n<p>{error.message}</p>\\n\\n{#if dev && error.stack}\\n\\t<pre>{error.stack}</pre>\\n{/if}\\n\"],\"names\":[],\"mappings\":\"AAQC,gBAAE,CAAE,CAAC,cAAC,CAAC,AACN,MAAM,CAAE,CAAC,CAAC,IAAI,AACf,CAAC,AAED,EAAE,cAAC,CAAC,AACH,SAAS,CAAE,KAAK,CAChB,WAAW,CAAE,GAAG,CAChB,MAAM,CAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,AACpB,CAAC,AAED,CAAC,cAAC,CAAC,AACF,MAAM,CAAE,GAAG,CAAC,IAAI,AACjB,CAAC,AAED,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AAC1B,EAAE,cAAC,CAAC,AACH,SAAS,CAAE,GAAG,AACf,CAAC,AACF,CAAC\"}"
};

const Error$1 = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let { status } = $$props;
	let { error } = $$props;
	if ($$props.status === void 0 && $$bindings.status && status !== void 0) $$bindings.status(status);
	if ($$props.error === void 0 && $$bindings.error && error !== void 0) $$bindings.error(error);
	$$result.css.add(css$s);

	return `${($$result.head += `${($$result.title = `<title>${escape(status)}</title>`, "")}`, "")}

<h1 class="${"svelte-8od9u6"}">${escape(status)}</h1>

<p class="${"svelte-8od9u6"}">${escape(error.message)}</p>

${ error.stack
	? `<pre>${escape(error.stack)}</pre>`
	: ``}`;
});

// This file is generated by Sapper — do not edit it!

const manifest = {
	server_routes: [
		
	],

	pages: [
		{
			// index.svelte
			pattern: /^\/$/,
			parts: [
				{ name: "index", file: "index.svelte", component: Routes }
			]
		},

		{
			// playlists.svelte
			pattern: /^\/playlists\/?$/,
			parts: [
				{ name: "playlists", file: "playlists.svelte", component: Playlists }
			]
		},

		{
			// artists.svelte
			pattern: /^\/artists\/?$/,
			parts: [
				{ name: "artists", file: "artists.svelte", component: Artists }
			]
		},

		{
			// tvshows.svelte
			pattern: /^\/tvshows\/?$/,
			parts: [
				{ name: "tvshows", file: "tvshows.svelte", component: Tvshows }
			]
		},

		{
			// albums.svelte
			pattern: /^\/albums\/?$/,
			parts: [
				{ name: "albums", file: "albums.svelte", component: Albums }
			]
		},

		{
			// movies.svelte
			pattern: /^\/movies\/?$/,
			parts: [
				{ name: "movies", file: "movies.svelte", component: Movies }
			]
		},

		{
			// songs.svelte
			pattern: /^\/songs\/?$/,
			parts: [
				{ name: "songs", file: "songs.svelte", component: Songs }
			]
		}
	],

	root: Layout,
	root_preload: () => {},
	error: Error$1
};

const build_dir = "__sapper__/dev";

const src_dir = "src";

const CONTEXT_KEY = {};

/* src/node_modules/@sapper/internal/App.svelte generated by Svelte v3.24.0 */

const App = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let { stores } = $$props;
	let { error } = $$props;
	let { status } = $$props;
	let { segments } = $$props;
	let { level0 } = $$props;
	let { level1 = null } = $$props;
	let { notify } = $$props;
	afterUpdate(notify);
	setContext(CONTEXT_KEY, stores);
	if ($$props.stores === void 0 && $$bindings.stores && stores !== void 0) $$bindings.stores(stores);
	if ($$props.error === void 0 && $$bindings.error && error !== void 0) $$bindings.error(error);
	if ($$props.status === void 0 && $$bindings.status && status !== void 0) $$bindings.status(status);
	if ($$props.segments === void 0 && $$bindings.segments && segments !== void 0) $$bindings.segments(segments);
	if ($$props.level0 === void 0 && $$bindings.level0 && level0 !== void 0) $$bindings.level0(level0);
	if ($$props.level1 === void 0 && $$bindings.level1 && level1 !== void 0) $$bindings.level1(level1);
	if ($$props.notify === void 0 && $$bindings.notify && notify !== void 0) $$bindings.notify(notify);

	return `


${validate_component(Layout, "Layout").$$render($$result, Object.assign({ segment: segments[0] }, level0.props), {}, {
		default: () => `${error
		? `${validate_component(Error$1, "Error").$$render($$result, { error, status }, {}, {})}`
		: `${validate_component(level1.component || missing_component, "svelte:component").$$render($$result, Object.assign(level1.props), {}, {})}`}`
	})}`;
});

/**
 * @param typeMap [Object] Map of MIME type -> Array[extensions]
 * @param ...
 */
function Mime() {
  this._types = Object.create(null);
  this._extensions = Object.create(null);

  for (var i = 0; i < arguments.length; i++) {
    this.define(arguments[i]);
  }

  this.define = this.define.bind(this);
  this.getType = this.getType.bind(this);
  this.getExtension = this.getExtension.bind(this);
}

/**
 * Define mimetype -> extension mappings.  Each key is a mime-type that maps
 * to an array of extensions associated with the type.  The first extension is
 * used as the default extension for the type.
 *
 * e.g. mime.define({'audio/ogg', ['oga', 'ogg', 'spx']});
 *
 * If a type declares an extension that has already been defined, an error will
 * be thrown.  To suppress this error and force the extension to be associated
 * with the new type, pass `force`=true.  Alternatively, you may prefix the
 * extension with "*" to map the type to extension, without mapping the
 * extension to the type.
 *
 * e.g. mime.define({'audio/wav', ['wav']}, {'audio/x-wav', ['*wav']});
 *
 *
 * @param map (Object) type definitions
 * @param force (Boolean) if true, force overriding of existing definitions
 */
Mime.prototype.define = function(typeMap, force) {
  for (var type in typeMap) {
    var extensions = typeMap[type].map(function(t) {return t.toLowerCase()});
    type = type.toLowerCase();

    for (var i = 0; i < extensions.length; i++) {
      var ext = extensions[i];

      // '*' prefix = not the preferred type for this extension.  So fixup the
      // extension, and skip it.
      if (ext[0] == '*') {
        continue;
      }

      if (!force && (ext in this._types)) {
        throw new Error(
          'Attempt to change mapping for "' + ext +
          '" extension from "' + this._types[ext] + '" to "' + type +
          '". Pass `force=true` to allow this, otherwise remove "' + ext +
          '" from the list of extensions for "' + type + '".'
        );
      }

      this._types[ext] = type;
    }

    // Use first extension as default
    if (force || !this._extensions[type]) {
      var ext = extensions[0];
      this._extensions[type] = (ext[0] != '*') ? ext : ext.substr(1);
    }
  }
};

/**
 * Lookup a mime type based on extension
 */
Mime.prototype.getType = function(path) {
  path = String(path);
  var last = path.replace(/^.*[/\\]/, '').toLowerCase();
  var ext = last.replace(/^.*\./, '').toLowerCase();

  var hasPath = last.length < path.length;
  var hasDot = ext.length < last.length - 1;

  return (hasDot || !hasPath) && this._types[ext] || null;
};

/**
 * Return file extension associated with a mime type
 */
Mime.prototype.getExtension = function(type) {
  type = /^\s*([^;\s]*)/.test(type) && RegExp.$1;
  return type && this._extensions[type.toLowerCase()] || null;
};

var Mime_1 = Mime;

var standard = {"application/andrew-inset":["ez"],"application/applixware":["aw"],"application/atom+xml":["atom"],"application/atomcat+xml":["atomcat"],"application/atomsvc+xml":["atomsvc"],"application/bdoc":["bdoc"],"application/ccxml+xml":["ccxml"],"application/cdmi-capability":["cdmia"],"application/cdmi-container":["cdmic"],"application/cdmi-domain":["cdmid"],"application/cdmi-object":["cdmio"],"application/cdmi-queue":["cdmiq"],"application/cu-seeme":["cu"],"application/dash+xml":["mpd"],"application/davmount+xml":["davmount"],"application/docbook+xml":["dbk"],"application/dssc+der":["dssc"],"application/dssc+xml":["xdssc"],"application/ecmascript":["ecma","es"],"application/emma+xml":["emma"],"application/epub+zip":["epub"],"application/exi":["exi"],"application/font-tdpfr":["pfr"],"application/geo+json":["geojson"],"application/gml+xml":["gml"],"application/gpx+xml":["gpx"],"application/gxf":["gxf"],"application/gzip":["gz"],"application/hjson":["hjson"],"application/hyperstudio":["stk"],"application/inkml+xml":["ink","inkml"],"application/ipfix":["ipfix"],"application/java-archive":["jar","war","ear"],"application/java-serialized-object":["ser"],"application/java-vm":["class"],"application/javascript":["js","mjs"],"application/json":["json","map"],"application/json5":["json5"],"application/jsonml+json":["jsonml"],"application/ld+json":["jsonld"],"application/lost+xml":["lostxml"],"application/mac-binhex40":["hqx"],"application/mac-compactpro":["cpt"],"application/mads+xml":["mads"],"application/manifest+json":["webmanifest"],"application/marc":["mrc"],"application/marcxml+xml":["mrcx"],"application/mathematica":["ma","nb","mb"],"application/mathml+xml":["mathml"],"application/mbox":["mbox"],"application/mediaservercontrol+xml":["mscml"],"application/metalink+xml":["metalink"],"application/metalink4+xml":["meta4"],"application/mets+xml":["mets"],"application/mods+xml":["mods"],"application/mp21":["m21","mp21"],"application/mp4":["mp4s","m4p"],"application/msword":["doc","dot"],"application/mxf":["mxf"],"application/n-quads":["nq"],"application/n-triples":["nt"],"application/octet-stream":["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"],"application/oda":["oda"],"application/oebps-package+xml":["opf"],"application/ogg":["ogx"],"application/omdoc+xml":["omdoc"],"application/onenote":["onetoc","onetoc2","onetmp","onepkg"],"application/oxps":["oxps"],"application/patch-ops-error+xml":["xer"],"application/pdf":["pdf"],"application/pgp-encrypted":["pgp"],"application/pgp-signature":["asc","sig"],"application/pics-rules":["prf"],"application/pkcs10":["p10"],"application/pkcs7-mime":["p7m","p7c"],"application/pkcs7-signature":["p7s"],"application/pkcs8":["p8"],"application/pkix-attr-cert":["ac"],"application/pkix-cert":["cer"],"application/pkix-crl":["crl"],"application/pkix-pkipath":["pkipath"],"application/pkixcmp":["pki"],"application/pls+xml":["pls"],"application/postscript":["ai","eps","ps"],"application/pskc+xml":["pskcxml"],"application/raml+yaml":["raml"],"application/rdf+xml":["rdf","owl"],"application/reginfo+xml":["rif"],"application/relax-ng-compact-syntax":["rnc"],"application/resource-lists+xml":["rl"],"application/resource-lists-diff+xml":["rld"],"application/rls-services+xml":["rs"],"application/rpki-ghostbusters":["gbr"],"application/rpki-manifest":["mft"],"application/rpki-roa":["roa"],"application/rsd+xml":["rsd"],"application/rss+xml":["rss"],"application/rtf":["rtf"],"application/sbml+xml":["sbml"],"application/scvp-cv-request":["scq"],"application/scvp-cv-response":["scs"],"application/scvp-vp-request":["spq"],"application/scvp-vp-response":["spp"],"application/sdp":["sdp"],"application/set-payment-initiation":["setpay"],"application/set-registration-initiation":["setreg"],"application/shf+xml":["shf"],"application/sieve":["siv","sieve"],"application/smil+xml":["smi","smil"],"application/sparql-query":["rq"],"application/sparql-results+xml":["srx"],"application/srgs":["gram"],"application/srgs+xml":["grxml"],"application/sru+xml":["sru"],"application/ssdl+xml":["ssdl"],"application/ssml+xml":["ssml"],"application/tei+xml":["tei","teicorpus"],"application/thraud+xml":["tfi"],"application/timestamped-data":["tsd"],"application/voicexml+xml":["vxml"],"application/wasm":["wasm"],"application/widget":["wgt"],"application/winhlp":["hlp"],"application/wsdl+xml":["wsdl"],"application/wspolicy+xml":["wspolicy"],"application/xaml+xml":["xaml"],"application/xcap-diff+xml":["xdf"],"application/xenc+xml":["xenc"],"application/xhtml+xml":["xhtml","xht"],"application/xml":["xml","xsl","xsd","rng"],"application/xml-dtd":["dtd"],"application/xop+xml":["xop"],"application/xproc+xml":["xpl"],"application/xslt+xml":["xslt"],"application/xspf+xml":["xspf"],"application/xv+xml":["mxml","xhvml","xvml","xvm"],"application/yang":["yang"],"application/yin+xml":["yin"],"application/zip":["zip"],"audio/3gpp":["*3gpp"],"audio/adpcm":["adp"],"audio/basic":["au","snd"],"audio/midi":["mid","midi","kar","rmi"],"audio/mp3":["*mp3"],"audio/mp4":["m4a","mp4a"],"audio/mpeg":["mpga","mp2","mp2a","mp3","m2a","m3a"],"audio/ogg":["oga","ogg","spx"],"audio/s3m":["s3m"],"audio/silk":["sil"],"audio/wav":["wav"],"audio/wave":["*wav"],"audio/webm":["weba"],"audio/xm":["xm"],"font/collection":["ttc"],"font/otf":["otf"],"font/ttf":["ttf"],"font/woff":["woff"],"font/woff2":["woff2"],"image/aces":["exr"],"image/apng":["apng"],"image/bmp":["bmp"],"image/cgm":["cgm"],"image/dicom-rle":["drle"],"image/emf":["emf"],"image/fits":["fits"],"image/g3fax":["g3"],"image/gif":["gif"],"image/heic":["heic"],"image/heic-sequence":["heics"],"image/heif":["heif"],"image/heif-sequence":["heifs"],"image/ief":["ief"],"image/jls":["jls"],"image/jp2":["jp2","jpg2"],"image/jpeg":["jpeg","jpg","jpe"],"image/jpm":["jpm"],"image/jpx":["jpx","jpf"],"image/jxr":["jxr"],"image/ktx":["ktx"],"image/png":["png"],"image/sgi":["sgi"],"image/svg+xml":["svg","svgz"],"image/t38":["t38"],"image/tiff":["tif","tiff"],"image/tiff-fx":["tfx"],"image/webp":["webp"],"image/wmf":["wmf"],"message/disposition-notification":["disposition-notification"],"message/global":["u8msg"],"message/global-delivery-status":["u8dsn"],"message/global-disposition-notification":["u8mdn"],"message/global-headers":["u8hdr"],"message/rfc822":["eml","mime"],"model/3mf":["3mf"],"model/gltf+json":["gltf"],"model/gltf-binary":["glb"],"model/iges":["igs","iges"],"model/mesh":["msh","mesh","silo"],"model/stl":["stl"],"model/vrml":["wrl","vrml"],"model/x3d+binary":["*x3db","x3dbz"],"model/x3d+fastinfoset":["x3db"],"model/x3d+vrml":["*x3dv","x3dvz"],"model/x3d+xml":["x3d","x3dz"],"model/x3d-vrml":["x3dv"],"text/cache-manifest":["appcache","manifest"],"text/calendar":["ics","ifb"],"text/coffeescript":["coffee","litcoffee"],"text/css":["css"],"text/csv":["csv"],"text/html":["html","htm","shtml"],"text/jade":["jade"],"text/jsx":["jsx"],"text/less":["less"],"text/markdown":["markdown","md"],"text/mathml":["mml"],"text/mdx":["mdx"],"text/n3":["n3"],"text/plain":["txt","text","conf","def","list","log","in","ini"],"text/richtext":["rtx"],"text/rtf":["*rtf"],"text/sgml":["sgml","sgm"],"text/shex":["shex"],"text/slim":["slim","slm"],"text/stylus":["stylus","styl"],"text/tab-separated-values":["tsv"],"text/troff":["t","tr","roff","man","me","ms"],"text/turtle":["ttl"],"text/uri-list":["uri","uris","urls"],"text/vcard":["vcard"],"text/vtt":["vtt"],"text/xml":["*xml"],"text/yaml":["yaml","yml"],"video/3gpp":["3gp","3gpp"],"video/3gpp2":["3g2"],"video/h261":["h261"],"video/h263":["h263"],"video/h264":["h264"],"video/jpeg":["jpgv"],"video/jpm":["*jpm","jpgm"],"video/mj2":["mj2","mjp2"],"video/mp2t":["ts"],"video/mp4":["mp4","mp4v","mpg4"],"video/mpeg":["mpeg","mpg","mpe","m1v","m2v"],"video/ogg":["ogv"],"video/quicktime":["qt","mov"],"video/webm":["webm"]};

var lite = new Mime_1(standard);

function get_server_route_handler(routes) {
	async function handle_route(route, req, res, next) {
		req.params = route.params(route.pattern.exec(req.path));

		const method = req.method.toLowerCase();
		// 'delete' cannot be exported from a module because it is a keyword,
		// so check for 'del' instead
		const method_export = method === 'delete' ? 'del' : method;
		const handle_method = route.handlers[method_export];
		if (handle_method) {
			if (process.env.SAPPER_EXPORT) {
				const { write, end, setHeader } = res;
				const chunks = [];
				const headers = {};

				// intercept data so that it can be exported
				res.write = function(chunk) {
					chunks.push(Buffer.from(chunk));
					write.apply(res, arguments);
				};

				res.setHeader = function(name, value) {
					headers[name.toLowerCase()] = value;
					setHeader.apply(res, arguments);
				};

				res.end = function(chunk) {
					if (chunk) chunks.push(Buffer.from(chunk));
					end.apply(res, arguments);

					process.send({
						__sapper__: true,
						event: 'file',
						url: req.url,
						method: req.method,
						status: res.statusCode,
						type: headers['content-type'],
						body: Buffer.concat(chunks).toString()
					});
				};
			}

			const handle_next = (err) => {
				if (err) {
					res.statusCode = 500;
					res.end(err.message);
				} else {
					process.nextTick(next);
				}
			};

			try {
				await handle_method(req, res, handle_next);
			} catch (err) {
				console.error(err);
				handle_next(err);
			}
		} else {
			// no matching handler for method
			process.nextTick(next);
		}
	}

	return function find_route(req, res, next) {
		for (const route of routes) {
			if (route.pattern.test(req.path)) {
				handle_route(route, req, res, next);
				return;
			}
		}

		next();
	};
}

/*!
 * cookie
 * Copyright(c) 2012-2014 Roman Shtylman
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * Module exports.
 * @public
 */

var parse_1 = parse;
var serialize_1 = serialize;

/**
 * Module variables.
 * @private
 */

var decode = decodeURIComponent;
var encode = encodeURIComponent;
var pairSplitRegExp = /; */;

/**
 * RegExp to match field-content in RFC 7230 sec 3.2
 *
 * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]
 * field-vchar   = VCHAR / obs-text
 * obs-text      = %x80-FF
 */

var fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;

/**
 * Parse a cookie header.
 *
 * Parse the given cookie header string into an object
 * The object has the various cookies as keys(names) => values
 *
 * @param {string} str
 * @param {object} [options]
 * @return {object}
 * @public
 */

function parse(str, options) {
  if (typeof str !== 'string') {
    throw new TypeError('argument str must be a string');
  }

  var obj = {};
  var opt = options || {};
  var pairs = str.split(pairSplitRegExp);
  var dec = opt.decode || decode;

  for (var i = 0; i < pairs.length; i++) {
    var pair = pairs[i];
    var eq_idx = pair.indexOf('=');

    // skip things that don't look like key=value
    if (eq_idx < 0) {
      continue;
    }

    var key = pair.substr(0, eq_idx).trim();
    var val = pair.substr(++eq_idx, pair.length).trim();

    // quoted values
    if ('"' == val[0]) {
      val = val.slice(1, -1);
    }

    // only assign once
    if (undefined == obj[key]) {
      obj[key] = tryDecode(val, dec);
    }
  }

  return obj;
}

/**
 * Serialize data into a cookie header.
 *
 * Serialize the a name value pair into a cookie string suitable for
 * http headers. An optional options object specified cookie parameters.
 *
 * serialize('foo', 'bar', { httpOnly: true })
 *   => "foo=bar; httpOnly"
 *
 * @param {string} name
 * @param {string} val
 * @param {object} [options]
 * @return {string}
 * @public
 */

function serialize(name, val, options) {
  var opt = options || {};
  var enc = opt.encode || encode;

  if (typeof enc !== 'function') {
    throw new TypeError('option encode is invalid');
  }

  if (!fieldContentRegExp.test(name)) {
    throw new TypeError('argument name is invalid');
  }

  var value = enc(val);

  if (value && !fieldContentRegExp.test(value)) {
    throw new TypeError('argument val is invalid');
  }

  var str = name + '=' + value;

  if (null != opt.maxAge) {
    var maxAge = opt.maxAge - 0;
    if (isNaN(maxAge)) throw new Error('maxAge should be a Number');
    str += '; Max-Age=' + Math.floor(maxAge);
  }

  if (opt.domain) {
    if (!fieldContentRegExp.test(opt.domain)) {
      throw new TypeError('option domain is invalid');
    }

    str += '; Domain=' + opt.domain;
  }

  if (opt.path) {
    if (!fieldContentRegExp.test(opt.path)) {
      throw new TypeError('option path is invalid');
    }

    str += '; Path=' + opt.path;
  }

  if (opt.expires) {
    if (typeof opt.expires.toUTCString !== 'function') {
      throw new TypeError('option expires is invalid');
    }

    str += '; Expires=' + opt.expires.toUTCString();
  }

  if (opt.httpOnly) {
    str += '; HttpOnly';
  }

  if (opt.secure) {
    str += '; Secure';
  }

  if (opt.sameSite) {
    var sameSite = typeof opt.sameSite === 'string'
      ? opt.sameSite.toLowerCase() : opt.sameSite;

    switch (sameSite) {
      case true:
        str += '; SameSite=Strict';
        break;
      case 'lax':
        str += '; SameSite=Lax';
        break;
      case 'strict':
        str += '; SameSite=Strict';
        break;
      case 'none':
        str += '; SameSite=None';
        break;
      default:
        throw new TypeError('option sameSite is invalid');
    }
  }

  return str;
}

/**
 * Try decoding a string using a decoding function.
 *
 * @param {string} str
 * @param {function} decode
 * @private
 */

function tryDecode(str, decode) {
  try {
    return decode(str);
  } catch (e) {
    return str;
  }
}

var cookie = {
	parse: parse_1,
	serialize: serialize_1
};

var chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_$';
var unsafeChars = /[<>\b\f\n\r\t\0\u2028\u2029]/g;
var reserved = /^(?:do|if|in|for|int|let|new|try|var|byte|case|char|else|enum|goto|long|this|void|with|await|break|catch|class|const|final|float|short|super|throw|while|yield|delete|double|export|import|native|return|switch|throws|typeof|boolean|default|extends|finally|package|private|abstract|continue|debugger|function|volatile|interface|protected|transient|implements|instanceof|synchronized)$/;
var escaped$1 = {
    '<': '\\u003C',
    '>': '\\u003E',
    '/': '\\u002F',
    '\\': '\\\\',
    '\b': '\\b',
    '\f': '\\f',
    '\n': '\\n',
    '\r': '\\r',
    '\t': '\\t',
    '\0': '\\0',
    '\u2028': '\\u2028',
    '\u2029': '\\u2029'
};
var objectProtoOwnPropertyNames = Object.getOwnPropertyNames(Object.prototype).sort().join('\0');
function devalue(value) {
    var counts = new Map();
    function walk(thing) {
        if (typeof thing === 'function') {
            throw new Error("Cannot stringify a function");
        }
        if (counts.has(thing)) {
            counts.set(thing, counts.get(thing) + 1);
            return;
        }
        counts.set(thing, 1);
        if (!isPrimitive(thing)) {
            var type = getType(thing);
            switch (type) {
                case 'Number':
                case 'String':
                case 'Boolean':
                case 'Date':
                case 'RegExp':
                    return;
                case 'Array':
                    thing.forEach(walk);
                    break;
                case 'Set':
                case 'Map':
                    Array.from(thing).forEach(walk);
                    break;
                default:
                    var proto = Object.getPrototypeOf(thing);
                    if (proto !== Object.prototype &&
                        proto !== null &&
                        Object.getOwnPropertyNames(proto).sort().join('\0') !== objectProtoOwnPropertyNames) {
                        throw new Error("Cannot stringify arbitrary non-POJOs");
                    }
                    if (Object.getOwnPropertySymbols(thing).length > 0) {
                        throw new Error("Cannot stringify POJOs with symbolic keys");
                    }
                    Object.keys(thing).forEach(function (key) { return walk(thing[key]); });
            }
        }
    }
    walk(value);
    var names = new Map();
    Array.from(counts)
        .filter(function (entry) { return entry[1] > 1; })
        .sort(function (a, b) { return b[1] - a[1]; })
        .forEach(function (entry, i) {
        names.set(entry[0], getName(i));
    });
    function stringify(thing) {
        if (names.has(thing)) {
            return names.get(thing);
        }
        if (isPrimitive(thing)) {
            return stringifyPrimitive(thing);
        }
        var type = getType(thing);
        switch (type) {
            case 'Number':
            case 'String':
            case 'Boolean':
                return "Object(" + stringify(thing.valueOf()) + ")";
            case 'RegExp':
                return thing.toString();
            case 'Date':
                return "new Date(" + thing.getTime() + ")";
            case 'Array':
                var members = thing.map(function (v, i) { return i in thing ? stringify(v) : ''; });
                var tail = thing.length === 0 || (thing.length - 1 in thing) ? '' : ',';
                return "[" + members.join(',') + tail + "]";
            case 'Set':
            case 'Map':
                return "new " + type + "([" + Array.from(thing).map(stringify).join(',') + "])";
            default:
                var obj = "{" + Object.keys(thing).map(function (key) { return safeKey(key) + ":" + stringify(thing[key]); }).join(',') + "}";
                var proto = Object.getPrototypeOf(thing);
                if (proto === null) {
                    return Object.keys(thing).length > 0
                        ? "Object.assign(Object.create(null)," + obj + ")"
                        : "Object.create(null)";
                }
                return obj;
        }
    }
    var str = stringify(value);
    if (names.size) {
        var params_1 = [];
        var statements_1 = [];
        var values_1 = [];
        names.forEach(function (name, thing) {
            params_1.push(name);
            if (isPrimitive(thing)) {
                values_1.push(stringifyPrimitive(thing));
                return;
            }
            var type = getType(thing);
            switch (type) {
                case 'Number':
                case 'String':
                case 'Boolean':
                    values_1.push("Object(" + stringify(thing.valueOf()) + ")");
                    break;
                case 'RegExp':
                    values_1.push(thing.toString());
                    break;
                case 'Date':
                    values_1.push("new Date(" + thing.getTime() + ")");
                    break;
                case 'Array':
                    values_1.push("Array(" + thing.length + ")");
                    thing.forEach(function (v, i) {
                        statements_1.push(name + "[" + i + "]=" + stringify(v));
                    });
                    break;
                case 'Set':
                    values_1.push("new Set");
                    statements_1.push(name + "." + Array.from(thing).map(function (v) { return "add(" + stringify(v) + ")"; }).join('.'));
                    break;
                case 'Map':
                    values_1.push("new Map");
                    statements_1.push(name + "." + Array.from(thing).map(function (_a) {
                        var k = _a[0], v = _a[1];
                        return "set(" + stringify(k) + ", " + stringify(v) + ")";
                    }).join('.'));
                    break;
                default:
                    values_1.push(Object.getPrototypeOf(thing) === null ? 'Object.create(null)' : '{}');
                    Object.keys(thing).forEach(function (key) {
                        statements_1.push("" + name + safeProp(key) + "=" + stringify(thing[key]));
                    });
            }
        });
        statements_1.push("return " + str);
        return "(function(" + params_1.join(',') + "){" + statements_1.join(';') + "}(" + values_1.join(',') + "))";
    }
    else {
        return str;
    }
}
function getName(num) {
    var name = '';
    do {
        name = chars[num % chars.length] + name;
        num = ~~(num / chars.length) - 1;
    } while (num >= 0);
    return reserved.test(name) ? name + "_" : name;
}
function isPrimitive(thing) {
    return Object(thing) !== thing;
}
function stringifyPrimitive(thing) {
    if (typeof thing === 'string')
        return stringifyString(thing);
    if (thing === void 0)
        return 'void 0';
    if (thing === 0 && 1 / thing < 0)
        return '-0';
    var str = String(thing);
    if (typeof thing === 'number')
        return str.replace(/^(-)?0\./, '$1.');
    return str;
}
function getType(thing) {
    return Object.prototype.toString.call(thing).slice(8, -1);
}
function escapeUnsafeChar(c) {
    return escaped$1[c] || c;
}
function escapeUnsafeChars(str) {
    return str.replace(unsafeChars, escapeUnsafeChar);
}
function safeKey(key) {
    return /^[_$a-zA-Z][_$a-zA-Z0-9]*$/.test(key) ? key : escapeUnsafeChars(JSON.stringify(key));
}
function safeProp(key) {
    return /^[_$a-zA-Z][_$a-zA-Z0-9]*$/.test(key) ? "." + key : "[" + escapeUnsafeChars(JSON.stringify(key)) + "]";
}
function stringifyString(str) {
    var result = '"';
    for (var i = 0; i < str.length; i += 1) {
        var char = str.charAt(i);
        var code = char.charCodeAt(0);
        if (char === '"') {
            result += '\\"';
        }
        else if (char in escaped$1) {
            result += escaped$1[char];
        }
        else if (code >= 0xd800 && code <= 0xdfff) {
            var next = str.charCodeAt(i + 1);
            // If this is the beginning of a [high, low] surrogate pair,
            // add the next two characters, otherwise escape
            if (code <= 0xdbff && (next >= 0xdc00 && next <= 0xdfff)) {
                result += char + str[++i];
            }
            else {
                result += "\\u" + code.toString(16).toUpperCase();
            }
        }
        else {
            result += char;
        }
    }
    result += '"';
    return result;
}

// Based on https://github.com/tmpvar/jsdom/blob/aa85b2abf07766ff7bf5c1f6daafb3726f2f2db5/lib/jsdom/living/blob.js

// fix for "Readable" isn't a named export issue
const Readable = Stream.Readable;

const BUFFER = Symbol('buffer');
const TYPE = Symbol('type');

class Blob {
	constructor() {
		this[TYPE] = '';

		const blobParts = arguments[0];
		const options = arguments[1];

		const buffers = [];
		let size = 0;

		if (blobParts) {
			const a = blobParts;
			const length = Number(a.length);
			for (let i = 0; i < length; i++) {
				const element = a[i];
				let buffer;
				if (element instanceof Buffer) {
					buffer = element;
				} else if (ArrayBuffer.isView(element)) {
					buffer = Buffer.from(element.buffer, element.byteOffset, element.byteLength);
				} else if (element instanceof ArrayBuffer) {
					buffer = Buffer.from(element);
				} else if (element instanceof Blob) {
					buffer = element[BUFFER];
				} else {
					buffer = Buffer.from(typeof element === 'string' ? element : String(element));
				}
				size += buffer.length;
				buffers.push(buffer);
			}
		}

		this[BUFFER] = Buffer.concat(buffers);

		let type = options && options.type !== undefined && String(options.type).toLowerCase();
		if (type && !/[^\u0020-\u007E]/.test(type)) {
			this[TYPE] = type;
		}
	}
	get size() {
		return this[BUFFER].length;
	}
	get type() {
		return this[TYPE];
	}
	text() {
		return Promise.resolve(this[BUFFER].toString());
	}
	arrayBuffer() {
		const buf = this[BUFFER];
		const ab = buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
		return Promise.resolve(ab);
	}
	stream() {
		const readable = new Readable();
		readable._read = function () {};
		readable.push(this[BUFFER]);
		readable.push(null);
		return readable;
	}
	toString() {
		return '[object Blob]';
	}
	slice() {
		const size = this.size;

		const start = arguments[0];
		const end = arguments[1];
		let relativeStart, relativeEnd;
		if (start === undefined) {
			relativeStart = 0;
		} else if (start < 0) {
			relativeStart = Math.max(size + start, 0);
		} else {
			relativeStart = Math.min(start, size);
		}
		if (end === undefined) {
			relativeEnd = size;
		} else if (end < 0) {
			relativeEnd = Math.max(size + end, 0);
		} else {
			relativeEnd = Math.min(end, size);
		}
		const span = Math.max(relativeEnd - relativeStart, 0);

		const buffer = this[BUFFER];
		const slicedBuffer = buffer.slice(relativeStart, relativeStart + span);
		const blob = new Blob([], { type: arguments[2] });
		blob[BUFFER] = slicedBuffer;
		return blob;
	}
}

Object.defineProperties(Blob.prototype, {
	size: { enumerable: true },
	type: { enumerable: true },
	slice: { enumerable: true }
});

Object.defineProperty(Blob.prototype, Symbol.toStringTag, {
	value: 'Blob',
	writable: false,
	enumerable: false,
	configurable: true
});

/**
 * fetch-error.js
 *
 * FetchError interface for operational errors
 */

/**
 * Create FetchError instance
 *
 * @param   String      message      Error message for human
 * @param   String      type         Error type for machine
 * @param   String      systemError  For Node.js system error
 * @return  FetchError
 */
function FetchError(message, type, systemError) {
  Error.call(this, message);

  this.message = message;
  this.type = type;

  // when err.type is `system`, err.code contains system error code
  if (systemError) {
    this.code = this.errno = systemError.code;
  }

  // hide custom error implementation details from end-users
  Error.captureStackTrace(this, this.constructor);
}

FetchError.prototype = Object.create(Error.prototype);
FetchError.prototype.constructor = FetchError;
FetchError.prototype.name = 'FetchError';

let convert;
try {
	convert = require('encoding').convert;
} catch (e) {}

const INTERNALS = Symbol('Body internals');

// fix an issue where "PassThrough" isn't a named export for node <10
const PassThrough = Stream.PassThrough;

/**
 * Body mixin
 *
 * Ref: https://fetch.spec.whatwg.org/#body
 *
 * @param   Stream  body  Readable stream
 * @param   Object  opts  Response options
 * @return  Void
 */
function Body(body) {
	var _this = this;

	var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	    _ref$size = _ref.size;

	let size = _ref$size === undefined ? 0 : _ref$size;
	var _ref$timeout = _ref.timeout;
	let timeout = _ref$timeout === undefined ? 0 : _ref$timeout;

	if (body == null) {
		// body is undefined or null
		body = null;
	} else if (isURLSearchParams(body)) {
		// body is a URLSearchParams
		body = Buffer.from(body.toString());
	} else if (isBlob(body)) ; else if (Buffer.isBuffer(body)) ; else if (Object.prototype.toString.call(body) === '[object ArrayBuffer]') {
		// body is ArrayBuffer
		body = Buffer.from(body);
	} else if (ArrayBuffer.isView(body)) {
		// body is ArrayBufferView
		body = Buffer.from(body.buffer, body.byteOffset, body.byteLength);
	} else if (body instanceof Stream) ; else {
		// none of the above
		// coerce to string then buffer
		body = Buffer.from(String(body));
	}
	this[INTERNALS] = {
		body,
		disturbed: false,
		error: null
	};
	this.size = size;
	this.timeout = timeout;

	if (body instanceof Stream) {
		body.on('error', function (err) {
			const error = err.name === 'AbortError' ? err : new FetchError(`Invalid response body while trying to fetch ${_this.url}: ${err.message}`, 'system', err);
			_this[INTERNALS].error = error;
		});
	}
}

Body.prototype = {
	get body() {
		return this[INTERNALS].body;
	},

	get bodyUsed() {
		return this[INTERNALS].disturbed;
	},

	/**
  * Decode response as ArrayBuffer
  *
  * @return  Promise
  */
	arrayBuffer() {
		return consumeBody.call(this).then(function (buf) {
			return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
		});
	},

	/**
  * Return raw response as Blob
  *
  * @return Promise
  */
	blob() {
		let ct = this.headers && this.headers.get('content-type') || '';
		return consumeBody.call(this).then(function (buf) {
			return Object.assign(
			// Prevent copying
			new Blob([], {
				type: ct.toLowerCase()
			}), {
				[BUFFER]: buf
			});
		});
	},

	/**
  * Decode response as json
  *
  * @return  Promise
  */
	json() {
		var _this2 = this;

		return consumeBody.call(this).then(function (buffer) {
			try {
				return JSON.parse(buffer.toString());
			} catch (err) {
				return Body.Promise.reject(new FetchError(`invalid json response body at ${_this2.url} reason: ${err.message}`, 'invalid-json'));
			}
		});
	},

	/**
  * Decode response as text
  *
  * @return  Promise
  */
	text() {
		return consumeBody.call(this).then(function (buffer) {
			return buffer.toString();
		});
	},

	/**
  * Decode response as buffer (non-spec api)
  *
  * @return  Promise
  */
	buffer() {
		return consumeBody.call(this);
	},

	/**
  * Decode response as text, while automatically detecting the encoding and
  * trying to decode to UTF-8 (non-spec api)
  *
  * @return  Promise
  */
	textConverted() {
		var _this3 = this;

		return consumeBody.call(this).then(function (buffer) {
			return convertBody(buffer, _this3.headers);
		});
	}
};

// In browsers, all properties are enumerable.
Object.defineProperties(Body.prototype, {
	body: { enumerable: true },
	bodyUsed: { enumerable: true },
	arrayBuffer: { enumerable: true },
	blob: { enumerable: true },
	json: { enumerable: true },
	text: { enumerable: true }
});

Body.mixIn = function (proto) {
	for (const name of Object.getOwnPropertyNames(Body.prototype)) {
		// istanbul ignore else: future proof
		if (!(name in proto)) {
			const desc = Object.getOwnPropertyDescriptor(Body.prototype, name);
			Object.defineProperty(proto, name, desc);
		}
	}
};

/**
 * Consume and convert an entire Body to a Buffer.
 *
 * Ref: https://fetch.spec.whatwg.org/#concept-body-consume-body
 *
 * @return  Promise
 */
function consumeBody() {
	var _this4 = this;

	if (this[INTERNALS].disturbed) {
		return Body.Promise.reject(new TypeError(`body used already for: ${this.url}`));
	}

	this[INTERNALS].disturbed = true;

	if (this[INTERNALS].error) {
		return Body.Promise.reject(this[INTERNALS].error);
	}

	let body = this.body;

	// body is null
	if (body === null) {
		return Body.Promise.resolve(Buffer.alloc(0));
	}

	// body is blob
	if (isBlob(body)) {
		body = body.stream();
	}

	// body is buffer
	if (Buffer.isBuffer(body)) {
		return Body.Promise.resolve(body);
	}

	// istanbul ignore if: should never happen
	if (!(body instanceof Stream)) {
		return Body.Promise.resolve(Buffer.alloc(0));
	}

	// body is stream
	// get ready to actually consume the body
	let accum = [];
	let accumBytes = 0;
	let abort = false;

	return new Body.Promise(function (resolve, reject) {
		let resTimeout;

		// allow timeout on slow response body
		if (_this4.timeout) {
			resTimeout = setTimeout(function () {
				abort = true;
				reject(new FetchError(`Response timeout while trying to fetch ${_this4.url} (over ${_this4.timeout}ms)`, 'body-timeout'));
			}, _this4.timeout);
		}

		// handle stream errors
		body.on('error', function (err) {
			if (err.name === 'AbortError') {
				// if the request was aborted, reject with this Error
				abort = true;
				reject(err);
			} else {
				// other errors, such as incorrect content-encoding
				reject(new FetchError(`Invalid response body while trying to fetch ${_this4.url}: ${err.message}`, 'system', err));
			}
		});

		body.on('data', function (chunk) {
			if (abort || chunk === null) {
				return;
			}

			if (_this4.size && accumBytes + chunk.length > _this4.size) {
				abort = true;
				reject(new FetchError(`content size at ${_this4.url} over limit: ${_this4.size}`, 'max-size'));
				return;
			}

			accumBytes += chunk.length;
			accum.push(chunk);
		});

		body.on('end', function () {
			if (abort) {
				return;
			}

			clearTimeout(resTimeout);

			try {
				resolve(Buffer.concat(accum, accumBytes));
			} catch (err) {
				// handle streams that have accumulated too much data (issue #414)
				reject(new FetchError(`Could not create Buffer from response body for ${_this4.url}: ${err.message}`, 'system', err));
			}
		});
	});
}

/**
 * Detect buffer encoding and convert to target encoding
 * ref: http://www.w3.org/TR/2011/WD-html5-20110113/parsing.html#determining-the-character-encoding
 *
 * @param   Buffer  buffer    Incoming buffer
 * @param   String  encoding  Target encoding
 * @return  String
 */
function convertBody(buffer, headers) {
	if (typeof convert !== 'function') {
		throw new Error('The package `encoding` must be installed to use the textConverted() function');
	}

	const ct = headers.get('content-type');
	let charset = 'utf-8';
	let res, str;

	// header
	if (ct) {
		res = /charset=([^;]*)/i.exec(ct);
	}

	// no charset in content type, peek at response body for at most 1024 bytes
	str = buffer.slice(0, 1024).toString();

	// html5
	if (!res && str) {
		res = /<meta.+?charset=(['"])(.+?)\1/i.exec(str);
	}

	// html4
	if (!res && str) {
		res = /<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(str);

		if (res) {
			res = /charset=(.*)/i.exec(res.pop());
		}
	}

	// xml
	if (!res && str) {
		res = /<\?xml.+?encoding=(['"])(.+?)\1/i.exec(str);
	}

	// found charset
	if (res) {
		charset = res.pop();

		// prevent decode issues when sites use incorrect encoding
		// ref: https://hsivonen.fi/encoding-menu/
		if (charset === 'gb2312' || charset === 'gbk') {
			charset = 'gb18030';
		}
	}

	// turn raw buffers into a single utf-8 buffer
	return convert(buffer, 'UTF-8', charset).toString();
}

/**
 * Detect a URLSearchParams object
 * ref: https://github.com/bitinn/node-fetch/issues/296#issuecomment-307598143
 *
 * @param   Object  obj     Object to detect by type or brand
 * @return  String
 */
function isURLSearchParams(obj) {
	// Duck-typing as a necessary condition.
	if (typeof obj !== 'object' || typeof obj.append !== 'function' || typeof obj.delete !== 'function' || typeof obj.get !== 'function' || typeof obj.getAll !== 'function' || typeof obj.has !== 'function' || typeof obj.set !== 'function') {
		return false;
	}

	// Brand-checking and more duck-typing as optional condition.
	return obj.constructor.name === 'URLSearchParams' || Object.prototype.toString.call(obj) === '[object URLSearchParams]' || typeof obj.sort === 'function';
}

/**
 * Check if `obj` is a W3C `Blob` object (which `File` inherits from)
 * @param  {*} obj
 * @return {boolean}
 */
function isBlob(obj) {
	return typeof obj === 'object' && typeof obj.arrayBuffer === 'function' && typeof obj.type === 'string' && typeof obj.stream === 'function' && typeof obj.constructor === 'function' && typeof obj.constructor.name === 'string' && /^(Blob|File)$/.test(obj.constructor.name) && /^(Blob|File)$/.test(obj[Symbol.toStringTag]);
}

/**
 * Clone body given Res/Req instance
 *
 * @param   Mixed  instance  Response or Request instance
 * @return  Mixed
 */
function clone(instance) {
	let p1, p2;
	let body = instance.body;

	// don't allow cloning a used body
	if (instance.bodyUsed) {
		throw new Error('cannot clone body after it is used');
	}

	// check that body is a stream and not form-data object
	// note: we can't clone the form-data object without having it as a dependency
	if (body instanceof Stream && typeof body.getBoundary !== 'function') {
		// tee instance body
		p1 = new PassThrough();
		p2 = new PassThrough();
		body.pipe(p1);
		body.pipe(p2);
		// set instance body to teed body and return the other teed body
		instance[INTERNALS].body = p1;
		body = p2;
	}

	return body;
}

/**
 * Performs the operation "extract a `Content-Type` value from |object|" as
 * specified in the specification:
 * https://fetch.spec.whatwg.org/#concept-bodyinit-extract
 *
 * This function assumes that instance.body is present.
 *
 * @param   Mixed  instance  Any options.body input
 */
function extractContentType(body) {
	if (body === null) {
		// body is null
		return null;
	} else if (typeof body === 'string') {
		// body is string
		return 'text/plain;charset=UTF-8';
	} else if (isURLSearchParams(body)) {
		// body is a URLSearchParams
		return 'application/x-www-form-urlencoded;charset=UTF-8';
	} else if (isBlob(body)) {
		// body is blob
		return body.type || null;
	} else if (Buffer.isBuffer(body)) {
		// body is buffer
		return null;
	} else if (Object.prototype.toString.call(body) === '[object ArrayBuffer]') {
		// body is ArrayBuffer
		return null;
	} else if (ArrayBuffer.isView(body)) {
		// body is ArrayBufferView
		return null;
	} else if (typeof body.getBoundary === 'function') {
		// detect form data input from form-data module
		return `multipart/form-data;boundary=${body.getBoundary()}`;
	} else if (body instanceof Stream) {
		// body is stream
		// can't really do much about this
		return null;
	} else {
		// Body constructor defaults other things to string
		return 'text/plain;charset=UTF-8';
	}
}

/**
 * The Fetch Standard treats this as if "total bytes" is a property on the body.
 * For us, we have to explicitly get it with a function.
 *
 * ref: https://fetch.spec.whatwg.org/#concept-body-total-bytes
 *
 * @param   Body    instance   Instance of Body
 * @return  Number?            Number of bytes, or null if not possible
 */
function getTotalBytes(instance) {
	const body = instance.body;


	if (body === null) {
		// body is null
		return 0;
	} else if (isBlob(body)) {
		return body.size;
	} else if (Buffer.isBuffer(body)) {
		// body is buffer
		return body.length;
	} else if (body && typeof body.getLengthSync === 'function') {
		// detect form data input from form-data module
		if (body._lengthRetrievers && body._lengthRetrievers.length == 0 || // 1.x
		body.hasKnownLength && body.hasKnownLength()) {
			// 2.x
			return body.getLengthSync();
		}
		return null;
	} else {
		// body is stream
		return null;
	}
}

/**
 * Write a Body to a Node.js WritableStream (e.g. http.Request) object.
 *
 * @param   Body    instance   Instance of Body
 * @return  Void
 */
function writeToStream(dest, instance) {
	const body = instance.body;


	if (body === null) {
		// body is null
		dest.end();
	} else if (isBlob(body)) {
		body.stream().pipe(dest);
	} else if (Buffer.isBuffer(body)) {
		// body is buffer
		dest.write(body);
		dest.end();
	} else {
		// body is stream
		body.pipe(dest);
	}
}

// expose Promise
Body.Promise = global.Promise;

/**
 * headers.js
 *
 * Headers class offers convenient helpers
 */

const invalidTokenRegex = /[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/;
const invalidHeaderCharRegex = /[^\t\x20-\x7e\x80-\xff]/;

function validateName(name) {
	name = `${name}`;
	if (invalidTokenRegex.test(name) || name === '') {
		throw new TypeError(`${name} is not a legal HTTP header name`);
	}
}

function validateValue(value) {
	value = `${value}`;
	if (invalidHeaderCharRegex.test(value)) {
		throw new TypeError(`${value} is not a legal HTTP header value`);
	}
}

/**
 * Find the key in the map object given a header name.
 *
 * Returns undefined if not found.
 *
 * @param   String  name  Header name
 * @return  String|Undefined
 */
function find(map, name) {
	name = name.toLowerCase();
	for (const key in map) {
		if (key.toLowerCase() === name) {
			return key;
		}
	}
	return undefined;
}

const MAP = Symbol('map');
class Headers {
	/**
  * Headers class
  *
  * @param   Object  headers  Response headers
  * @return  Void
  */
	constructor() {
		let init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;

		this[MAP] = Object.create(null);

		if (init instanceof Headers) {
			const rawHeaders = init.raw();
			const headerNames = Object.keys(rawHeaders);

			for (const headerName of headerNames) {
				for (const value of rawHeaders[headerName]) {
					this.append(headerName, value);
				}
			}

			return;
		}

		// We don't worry about converting prop to ByteString here as append()
		// will handle it.
		if (init == null) ; else if (typeof init === 'object') {
			const method = init[Symbol.iterator];
			if (method != null) {
				if (typeof method !== 'function') {
					throw new TypeError('Header pairs must be iterable');
				}

				// sequence<sequence<ByteString>>
				// Note: per spec we have to first exhaust the lists then process them
				const pairs = [];
				for (const pair of init) {
					if (typeof pair !== 'object' || typeof pair[Symbol.iterator] !== 'function') {
						throw new TypeError('Each header pair must be iterable');
					}
					pairs.push(Array.from(pair));
				}

				for (const pair of pairs) {
					if (pair.length !== 2) {
						throw new TypeError('Each header pair must be a name/value tuple');
					}
					this.append(pair[0], pair[1]);
				}
			} else {
				// record<ByteString, ByteString>
				for (const key of Object.keys(init)) {
					const value = init[key];
					this.append(key, value);
				}
			}
		} else {
			throw new TypeError('Provided initializer must be an object');
		}
	}

	/**
  * Return combined header value given name
  *
  * @param   String  name  Header name
  * @return  Mixed
  */
	get(name) {
		name = `${name}`;
		validateName(name);
		const key = find(this[MAP], name);
		if (key === undefined) {
			return null;
		}

		return this[MAP][key].join(', ');
	}

	/**
  * Iterate over all headers
  *
  * @param   Function  callback  Executed for each item with parameters (value, name, thisArg)
  * @param   Boolean   thisArg   `this` context for callback function
  * @return  Void
  */
	forEach(callback) {
		let thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

		let pairs = getHeaders(this);
		let i = 0;
		while (i < pairs.length) {
			var _pairs$i = pairs[i];
			const name = _pairs$i[0],
			      value = _pairs$i[1];

			callback.call(thisArg, value, name, this);
			pairs = getHeaders(this);
			i++;
		}
	}

	/**
  * Overwrite header values given name
  *
  * @param   String  name   Header name
  * @param   String  value  Header value
  * @return  Void
  */
	set(name, value) {
		name = `${name}`;
		value = `${value}`;
		validateName(name);
		validateValue(value);
		const key = find(this[MAP], name);
		this[MAP][key !== undefined ? key : name] = [value];
	}

	/**
  * Append a value onto existing header
  *
  * @param   String  name   Header name
  * @param   String  value  Header value
  * @return  Void
  */
	append(name, value) {
		name = `${name}`;
		value = `${value}`;
		validateName(name);
		validateValue(value);
		const key = find(this[MAP], name);
		if (key !== undefined) {
			this[MAP][key].push(value);
		} else {
			this[MAP][name] = [value];
		}
	}

	/**
  * Check for header name existence
  *
  * @param   String   name  Header name
  * @return  Boolean
  */
	has(name) {
		name = `${name}`;
		validateName(name);
		return find(this[MAP], name) !== undefined;
	}

	/**
  * Delete all header values given name
  *
  * @param   String  name  Header name
  * @return  Void
  */
	delete(name) {
		name = `${name}`;
		validateName(name);
		const key = find(this[MAP], name);
		if (key !== undefined) {
			delete this[MAP][key];
		}
	}

	/**
  * Return raw headers (non-spec api)
  *
  * @return  Object
  */
	raw() {
		return this[MAP];
	}

	/**
  * Get an iterator on keys.
  *
  * @return  Iterator
  */
	keys() {
		return createHeadersIterator(this, 'key');
	}

	/**
  * Get an iterator on values.
  *
  * @return  Iterator
  */
	values() {
		return createHeadersIterator(this, 'value');
	}

	/**
  * Get an iterator on entries.
  *
  * This is the default iterator of the Headers object.
  *
  * @return  Iterator
  */
	[Symbol.iterator]() {
		return createHeadersIterator(this, 'key+value');
	}
}
Headers.prototype.entries = Headers.prototype[Symbol.iterator];

Object.defineProperty(Headers.prototype, Symbol.toStringTag, {
	value: 'Headers',
	writable: false,
	enumerable: false,
	configurable: true
});

Object.defineProperties(Headers.prototype, {
	get: { enumerable: true },
	forEach: { enumerable: true },
	set: { enumerable: true },
	append: { enumerable: true },
	has: { enumerable: true },
	delete: { enumerable: true },
	keys: { enumerable: true },
	values: { enumerable: true },
	entries: { enumerable: true }
});

function getHeaders(headers) {
	let kind = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'key+value';

	const keys = Object.keys(headers[MAP]).sort();
	return keys.map(kind === 'key' ? function (k) {
		return k.toLowerCase();
	} : kind === 'value' ? function (k) {
		return headers[MAP][k].join(', ');
	} : function (k) {
		return [k.toLowerCase(), headers[MAP][k].join(', ')];
	});
}

const INTERNAL = Symbol('internal');

function createHeadersIterator(target, kind) {
	const iterator = Object.create(HeadersIteratorPrototype);
	iterator[INTERNAL] = {
		target,
		kind,
		index: 0
	};
	return iterator;
}

const HeadersIteratorPrototype = Object.setPrototypeOf({
	next() {
		// istanbul ignore if
		if (!this || Object.getPrototypeOf(this) !== HeadersIteratorPrototype) {
			throw new TypeError('Value of `this` is not a HeadersIterator');
		}

		var _INTERNAL = this[INTERNAL];
		const target = _INTERNAL.target,
		      kind = _INTERNAL.kind,
		      index = _INTERNAL.index;

		const values = getHeaders(target, kind);
		const len = values.length;
		if (index >= len) {
			return {
				value: undefined,
				done: true
			};
		}

		this[INTERNAL].index = index + 1;

		return {
			value: values[index],
			done: false
		};
	}
}, Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));

Object.defineProperty(HeadersIteratorPrototype, Symbol.toStringTag, {
	value: 'HeadersIterator',
	writable: false,
	enumerable: false,
	configurable: true
});

/**
 * Export the Headers object in a form that Node.js can consume.
 *
 * @param   Headers  headers
 * @return  Object
 */
function exportNodeCompatibleHeaders(headers) {
	const obj = Object.assign({ __proto__: null }, headers[MAP]);

	// http.request() only supports string as Host header. This hack makes
	// specifying custom Host header possible.
	const hostHeaderKey = find(headers[MAP], 'Host');
	if (hostHeaderKey !== undefined) {
		obj[hostHeaderKey] = obj[hostHeaderKey][0];
	}

	return obj;
}

/**
 * Create a Headers object from an object of headers, ignoring those that do
 * not conform to HTTP grammar productions.
 *
 * @param   Object  obj  Object of headers
 * @return  Headers
 */
function createHeadersLenient(obj) {
	const headers = new Headers();
	for (const name of Object.keys(obj)) {
		if (invalidTokenRegex.test(name)) {
			continue;
		}
		if (Array.isArray(obj[name])) {
			for (const val of obj[name]) {
				if (invalidHeaderCharRegex.test(val)) {
					continue;
				}
				if (headers[MAP][name] === undefined) {
					headers[MAP][name] = [val];
				} else {
					headers[MAP][name].push(val);
				}
			}
		} else if (!invalidHeaderCharRegex.test(obj[name])) {
			headers[MAP][name] = [obj[name]];
		}
	}
	return headers;
}

const INTERNALS$1 = Symbol('Response internals');

// fix an issue where "STATUS_CODES" aren't a named export for node <10
const STATUS_CODES = http.STATUS_CODES;

/**
 * Response class
 *
 * @param   Stream  body  Readable stream
 * @param   Object  opts  Response options
 * @return  Void
 */
class Response {
	constructor() {
		let body = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
		let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

		Body.call(this, body, opts);

		const status = opts.status || 200;
		const headers = new Headers(opts.headers);

		if (body != null && !headers.has('Content-Type')) {
			const contentType = extractContentType(body);
			if (contentType) {
				headers.append('Content-Type', contentType);
			}
		}

		this[INTERNALS$1] = {
			url: opts.url,
			status,
			statusText: opts.statusText || STATUS_CODES[status],
			headers,
			counter: opts.counter
		};
	}

	get url() {
		return this[INTERNALS$1].url || '';
	}

	get status() {
		return this[INTERNALS$1].status;
	}

	/**
  * Convenience property representing if the request ended normally
  */
	get ok() {
		return this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;
	}

	get redirected() {
		return this[INTERNALS$1].counter > 0;
	}

	get statusText() {
		return this[INTERNALS$1].statusText;
	}

	get headers() {
		return this[INTERNALS$1].headers;
	}

	/**
  * Clone this response
  *
  * @return  Response
  */
	clone() {
		return new Response(clone(this), {
			url: this.url,
			status: this.status,
			statusText: this.statusText,
			headers: this.headers,
			ok: this.ok,
			redirected: this.redirected
		});
	}
}

Body.mixIn(Response.prototype);

Object.defineProperties(Response.prototype, {
	url: { enumerable: true },
	status: { enumerable: true },
	ok: { enumerable: true },
	redirected: { enumerable: true },
	statusText: { enumerable: true },
	headers: { enumerable: true },
	clone: { enumerable: true }
});

Object.defineProperty(Response.prototype, Symbol.toStringTag, {
	value: 'Response',
	writable: false,
	enumerable: false,
	configurable: true
});

const INTERNALS$2 = Symbol('Request internals');

// fix an issue where "format", "parse" aren't a named export for node <10
const parse_url = Url.parse;
const format_url = Url.format;

const streamDestructionSupported = 'destroy' in Stream.Readable.prototype;

/**
 * Check if a value is an instance of Request.
 *
 * @param   Mixed   input
 * @return  Boolean
 */
function isRequest(input) {
	return typeof input === 'object' && typeof input[INTERNALS$2] === 'object';
}

function isAbortSignal(signal) {
	const proto = signal && typeof signal === 'object' && Object.getPrototypeOf(signal);
	return !!(proto && proto.constructor.name === 'AbortSignal');
}

/**
 * Request class
 *
 * @param   Mixed   input  Url or Request instance
 * @param   Object  init   Custom options
 * @return  Void
 */
class Request {
	constructor(input) {
		let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

		let parsedURL;

		// normalize input
		if (!isRequest(input)) {
			if (input && input.href) {
				// in order to support Node.js' Url objects; though WHATWG's URL objects
				// will fall into this branch also (since their `toString()` will return
				// `href` property anyway)
				parsedURL = parse_url(input.href);
			} else {
				// coerce input to a string before attempting to parse
				parsedURL = parse_url(`${input}`);
			}
			input = {};
		} else {
			parsedURL = parse_url(input.url);
		}

		let method = init.method || input.method || 'GET';
		method = method.toUpperCase();

		if ((init.body != null || isRequest(input) && input.body !== null) && (method === 'GET' || method === 'HEAD')) {
			throw new TypeError('Request with GET/HEAD method cannot have body');
		}

		let inputBody = init.body != null ? init.body : isRequest(input) && input.body !== null ? clone(input) : null;

		Body.call(this, inputBody, {
			timeout: init.timeout || input.timeout || 0,
			size: init.size || input.size || 0
		});

		const headers = new Headers(init.headers || input.headers || {});

		if (inputBody != null && !headers.has('Content-Type')) {
			const contentType = extractContentType(inputBody);
			if (contentType) {
				headers.append('Content-Type', contentType);
			}
		}

		let signal = isRequest(input) ? input.signal : null;
		if ('signal' in init) signal = init.signal;

		if (signal != null && !isAbortSignal(signal)) {
			throw new TypeError('Expected signal to be an instanceof AbortSignal');
		}

		this[INTERNALS$2] = {
			method,
			redirect: init.redirect || input.redirect || 'follow',
			headers,
			parsedURL,
			signal
		};

		// node-fetch-only options
		this.follow = init.follow !== undefined ? init.follow : input.follow !== undefined ? input.follow : 20;
		this.compress = init.compress !== undefined ? init.compress : input.compress !== undefined ? input.compress : true;
		this.counter = init.counter || input.counter || 0;
		this.agent = init.agent || input.agent;
	}

	get method() {
		return this[INTERNALS$2].method;
	}

	get url() {
		return format_url(this[INTERNALS$2].parsedURL);
	}

	get headers() {
		return this[INTERNALS$2].headers;
	}

	get redirect() {
		return this[INTERNALS$2].redirect;
	}

	get signal() {
		return this[INTERNALS$2].signal;
	}

	/**
  * Clone this request
  *
  * @return  Request
  */
	clone() {
		return new Request(this);
	}
}

Body.mixIn(Request.prototype);

Object.defineProperty(Request.prototype, Symbol.toStringTag, {
	value: 'Request',
	writable: false,
	enumerable: false,
	configurable: true
});

Object.defineProperties(Request.prototype, {
	method: { enumerable: true },
	url: { enumerable: true },
	headers: { enumerable: true },
	redirect: { enumerable: true },
	clone: { enumerable: true },
	signal: { enumerable: true }
});

/**
 * Convert a Request to Node.js http request options.
 *
 * @param   Request  A Request instance
 * @return  Object   The options object to be passed to http.request
 */
function getNodeRequestOptions(request) {
	const parsedURL = request[INTERNALS$2].parsedURL;
	const headers = new Headers(request[INTERNALS$2].headers);

	// fetch step 1.3
	if (!headers.has('Accept')) {
		headers.set('Accept', '*/*');
	}

	// Basic fetch
	if (!parsedURL.protocol || !parsedURL.hostname) {
		throw new TypeError('Only absolute URLs are supported');
	}

	if (!/^https?:$/.test(parsedURL.protocol)) {
		throw new TypeError('Only HTTP(S) protocols are supported');
	}

	if (request.signal && request.body instanceof Stream.Readable && !streamDestructionSupported) {
		throw new Error('Cancellation of streamed requests with AbortSignal is not supported in node < 8');
	}

	// HTTP-network-or-cache fetch steps 2.4-2.7
	let contentLengthValue = null;
	if (request.body == null && /^(POST|PUT)$/i.test(request.method)) {
		contentLengthValue = '0';
	}
	if (request.body != null) {
		const totalBytes = getTotalBytes(request);
		if (typeof totalBytes === 'number') {
			contentLengthValue = String(totalBytes);
		}
	}
	if (contentLengthValue) {
		headers.set('Content-Length', contentLengthValue);
	}

	// HTTP-network-or-cache fetch step 2.11
	if (!headers.has('User-Agent')) {
		headers.set('User-Agent', 'node-fetch/1.0 (+https://github.com/bitinn/node-fetch)');
	}

	// HTTP-network-or-cache fetch step 2.15
	if (request.compress && !headers.has('Accept-Encoding')) {
		headers.set('Accept-Encoding', 'gzip,deflate');
	}

	let agent = request.agent;
	if (typeof agent === 'function') {
		agent = agent(parsedURL);
	}

	if (!headers.has('Connection') && !agent) {
		headers.set('Connection', 'close');
	}

	// HTTP-network fetch step 4.2
	// chunked encoding is handled by Node.js

	return Object.assign({}, parsedURL, {
		method: request.method,
		headers: exportNodeCompatibleHeaders(headers),
		agent
	});
}

/**
 * abort-error.js
 *
 * AbortError interface for cancelled requests
 */

/**
 * Create AbortError instance
 *
 * @param   String      message      Error message for human
 * @return  AbortError
 */
function AbortError(message) {
  Error.call(this, message);

  this.type = 'aborted';
  this.message = message;

  // hide custom error implementation details from end-users
  Error.captureStackTrace(this, this.constructor);
}

AbortError.prototype = Object.create(Error.prototype);
AbortError.prototype.constructor = AbortError;
AbortError.prototype.name = 'AbortError';

// fix an issue where "PassThrough", "resolve" aren't a named export for node <10
const PassThrough$1 = Stream.PassThrough;
const resolve_url = Url.resolve;

/**
 * Fetch function
 *
 * @param   Mixed    url   Absolute url or Request instance
 * @param   Object   opts  Fetch options
 * @return  Promise
 */
function fetch$1(url, opts) {

	// allow custom promise
	if (!fetch$1.Promise) {
		throw new Error('native promise missing, set fetch.Promise to your favorite alternative');
	}

	Body.Promise = fetch$1.Promise;

	// wrap http.request into fetch
	return new fetch$1.Promise(function (resolve, reject) {
		// build request object
		const request = new Request(url, opts);
		const options = getNodeRequestOptions(request);

		const send = (options.protocol === 'https:' ? https : http).request;
		const signal = request.signal;

		let response = null;

		const abort = function abort() {
			let error = new AbortError('The user aborted a request.');
			reject(error);
			if (request.body && request.body instanceof Stream.Readable) {
				request.body.destroy(error);
			}
			if (!response || !response.body) return;
			response.body.emit('error', error);
		};

		if (signal && signal.aborted) {
			abort();
			return;
		}

		const abortAndFinalize = function abortAndFinalize() {
			abort();
			finalize();
		};

		// send request
		const req = send(options);
		let reqTimeout;

		if (signal) {
			signal.addEventListener('abort', abortAndFinalize);
		}

		function finalize() {
			req.abort();
			if (signal) signal.removeEventListener('abort', abortAndFinalize);
			clearTimeout(reqTimeout);
		}

		if (request.timeout) {
			req.once('socket', function (socket) {
				reqTimeout = setTimeout(function () {
					reject(new FetchError(`network timeout at: ${request.url}`, 'request-timeout'));
					finalize();
				}, request.timeout);
			});
		}

		req.on('error', function (err) {
			reject(new FetchError(`request to ${request.url} failed, reason: ${err.message}`, 'system', err));
			finalize();
		});

		req.on('response', function (res) {
			clearTimeout(reqTimeout);

			const headers = createHeadersLenient(res.headers);

			// HTTP fetch step 5
			if (fetch$1.isRedirect(res.statusCode)) {
				// HTTP fetch step 5.2
				const location = headers.get('Location');

				// HTTP fetch step 5.3
				const locationURL = location === null ? null : resolve_url(request.url, location);

				// HTTP fetch step 5.5
				switch (request.redirect) {
					case 'error':
						reject(new FetchError(`redirect mode is set to error: ${request.url}`, 'no-redirect'));
						finalize();
						return;
					case 'manual':
						// node-fetch-specific step: make manual redirect a bit easier to use by setting the Location header value to the resolved URL.
						if (locationURL !== null) {
							// handle corrupted header
							try {
								headers.set('Location', locationURL);
							} catch (err) {
								// istanbul ignore next: nodejs server prevent invalid response headers, we can't test this through normal request
								reject(err);
							}
						}
						break;
					case 'follow':
						// HTTP-redirect fetch step 2
						if (locationURL === null) {
							break;
						}

						// HTTP-redirect fetch step 5
						if (request.counter >= request.follow) {
							reject(new FetchError(`maximum redirect reached at: ${request.url}`, 'max-redirect'));
							finalize();
							return;
						}

						// HTTP-redirect fetch step 6 (counter increment)
						// Create a new Request object.
						const requestOpts = {
							headers: new Headers(request.headers),
							follow: request.follow,
							counter: request.counter + 1,
							agent: request.agent,
							compress: request.compress,
							method: request.method,
							body: request.body,
							signal: request.signal,
							timeout: request.timeout
						};

						// HTTP-redirect fetch step 9
						if (res.statusCode !== 303 && request.body && getTotalBytes(request) === null) {
							reject(new FetchError('Cannot follow redirect with body being a readable stream', 'unsupported-redirect'));
							finalize();
							return;
						}

						// HTTP-redirect fetch step 11
						if (res.statusCode === 303 || (res.statusCode === 301 || res.statusCode === 302) && request.method === 'POST') {
							requestOpts.method = 'GET';
							requestOpts.body = undefined;
							requestOpts.headers.delete('content-length');
						}

						// HTTP-redirect fetch step 15
						resolve(fetch$1(new Request(locationURL, requestOpts)));
						finalize();
						return;
				}
			}

			// prepare response
			res.once('end', function () {
				if (signal) signal.removeEventListener('abort', abortAndFinalize);
			});
			let body = res.pipe(new PassThrough$1());

			const response_options = {
				url: request.url,
				status: res.statusCode,
				statusText: res.statusMessage,
				headers: headers,
				size: request.size,
				timeout: request.timeout,
				counter: request.counter
			};

			// HTTP-network fetch step 12.1.1.3
			const codings = headers.get('Content-Encoding');

			// HTTP-network fetch step 12.1.1.4: handle content codings

			// in following scenarios we ignore compression support
			// 1. compression support is disabled
			// 2. HEAD request
			// 3. no Content-Encoding header
			// 4. no content response (204)
			// 5. content not modified response (304)
			if (!request.compress || request.method === 'HEAD' || codings === null || res.statusCode === 204 || res.statusCode === 304) {
				response = new Response(body, response_options);
				resolve(response);
				return;
			}

			// For Node v6+
			// Be less strict when decoding compressed responses, since sometimes
			// servers send slightly invalid responses that are still accepted
			// by common browsers.
			// Always using Z_SYNC_FLUSH is what cURL does.
			const zlibOptions = {
				flush: zlib.Z_SYNC_FLUSH,
				finishFlush: zlib.Z_SYNC_FLUSH
			};

			// for gzip
			if (codings == 'gzip' || codings == 'x-gzip') {
				body = body.pipe(zlib.createGunzip(zlibOptions));
				response = new Response(body, response_options);
				resolve(response);
				return;
			}

			// for deflate
			if (codings == 'deflate' || codings == 'x-deflate') {
				// handle the infamous raw deflate response from old servers
				// a hack for old IIS and Apache servers
				const raw = res.pipe(new PassThrough$1());
				raw.once('data', function (chunk) {
					// see http://stackoverflow.com/questions/37519828
					if ((chunk[0] & 0x0F) === 0x08) {
						body = body.pipe(zlib.createInflate());
					} else {
						body = body.pipe(zlib.createInflateRaw());
					}
					response = new Response(body, response_options);
					resolve(response);
				});
				return;
			}

			// for br
			if (codings == 'br' && typeof zlib.createBrotliDecompress === 'function') {
				body = body.pipe(zlib.createBrotliDecompress());
				response = new Response(body, response_options);
				resolve(response);
				return;
			}

			// otherwise, use response as-is
			response = new Response(body, response_options);
			resolve(response);
		});

		writeToStream(req, request);
	});
}
/**
 * Redirect code matching
 *
 * @param   Number   code  Status code
 * @return  Boolean
 */
fetch$1.isRedirect = function (code) {
	return code === 301 || code === 302 || code === 303 || code === 307 || code === 308;
};

// expose Promise
fetch$1.Promise = global.Promise;

function get_page_handler(
	manifest,
	session_getter
) {
	const get_build_info =  () => JSON.parse(fs.readFileSync(path.join(build_dir, 'build.json'), 'utf-8'))
		;

	const template =  () => read_template(src_dir)
		;

	const has_service_worker = fs.existsSync(path.join(build_dir, 'service-worker.js'));

	const { server_routes, pages } = manifest;
	const error_route = manifest.error;

	function bail(req, res, err) {
		console.error(err);

		const message =  escape_html(err.message) ;

		res.statusCode = 500;
		res.end(`<pre>${message}</pre>`);
	}

	function handle_error(req, res, statusCode, error) {
		handle_page({
			pattern: null,
			parts: [
				{ name: null, component: error_route }
			]
		}, req, res, statusCode, error || new Error('Unknown error in preload function'));
	}

	async function handle_page(page, req, res, status = 200, error = null) {
		const is_service_worker_index = req.path === '/service-worker-index.html';
		const build_info




 = get_build_info();

		res.setHeader('Content-Type', 'text/html');
		res.setHeader('Cache-Control',  'no-cache' );

		// preload main.js and current route
		// TODO detect other stuff we can preload? images, CSS, fonts?
		let preloaded_chunks = Array.isArray(build_info.assets.main) ? build_info.assets.main : [build_info.assets.main];
		if (!error && !is_service_worker_index) {
			page.parts.forEach(part => {
				if (!part) return;

				// using concat because it could be a string or an array. thanks webpack!
				preloaded_chunks = preloaded_chunks.concat(build_info.assets[part.name]);
			});
		}

		if (build_info.bundler === 'rollup') {
			// TODO add dependencies and CSS
			const link = preloaded_chunks
				.filter(file => file && !file.match(/\.map$/))
				.map(file => `<${req.baseUrl}/client/${file}>;rel="modulepreload"`)
				.join(', ');

			res.setHeader('Link', link);
		} else {
			const link = preloaded_chunks
				.filter(file => file && !file.match(/\.map$/))
				.map((file) => {
					const as = /\.css$/.test(file) ? 'style' : 'script';
					return `<${req.baseUrl}/client/${file}>;rel="preload";as="${as}"`;
				})
				.join(', ');

			res.setHeader('Link', link);
		}

		let session;
		try {
			session = await session_getter(req, res);
		} catch (err) {
			return bail(req, res, err);
		}

		let redirect;
		let preload_error;

		const preload_context = {
			redirect: (statusCode, location) => {
				if (redirect && (redirect.statusCode !== statusCode || redirect.location !== location)) {
					throw new Error(`Conflicting redirects`);
				}
				location = location.replace(/^\//g, ''); // leading slash (only)
				redirect = { statusCode, location };
			},
			error: (statusCode, message) => {
				preload_error = { statusCode, message };
			},
			fetch: (url, opts) => {
				const parsed = new Url.URL(url, `http://127.0.0.1:${process.env.PORT}${req.baseUrl ? req.baseUrl + '/' :''}`);

				opts = Object.assign({}, opts);

				const include_credentials = (
					opts.credentials === 'include' ||
					opts.credentials !== 'omit' && parsed.origin === `http://127.0.0.1:${process.env.PORT}`
				);

				if (include_credentials) {
					opts.headers = Object.assign({}, opts.headers);

					const cookies = Object.assign(
						{},
						cookie.parse(req.headers.cookie || ''),
						cookie.parse(opts.headers.cookie || '')
					);

					const set_cookie = res.getHeader('Set-Cookie');
					(Array.isArray(set_cookie) ? set_cookie : [set_cookie]).forEach(str => {
						const match = /([^=]+)=([^;]+)/.exec(str);
						if (match) cookies[match[1]] = match[2];
					});

					const str = Object.keys(cookies)
						.map(key => `${key}=${cookies[key]}`)
						.join('; ');

					opts.headers.cookie = str;

					if (!opts.headers.authorization && req.headers.authorization) {
						opts.headers.authorization = req.headers.authorization;
					}
				}

				return fetch$1(parsed.href, opts);
			}
		};

		let preloaded;
		let match;
		let params;

		try {
			const root_preloaded = manifest.root_preload
				? manifest.root_preload.call(preload_context, {
					host: req.headers.host,
					path: req.path,
					query: req.query,
					params: {}
				}, session)
				: {};

			match = error ? null : page.pattern.exec(req.path);


			let toPreload = [root_preloaded];
			if (!is_service_worker_index) {
				toPreload = toPreload.concat(page.parts.map(part => {
					if (!part) return null;

					// the deepest level is used below, to initialise the store
					params = part.params ? part.params(match) : {};

					return part.preload
						? part.preload.call(preload_context, {
							host: req.headers.host,
							path: req.path,
							query: req.query,
							params
						}, session)
						: {};
				}));
			}

			preloaded = await Promise.all(toPreload);
		} catch (err) {
			if (error) {
				return bail(req, res, err)
			}

			preload_error = { statusCode: 500, message: err };
			preloaded = []; // appease TypeScript
		}

		try {
			if (redirect) {
				const location = Url.resolve((req.baseUrl || '') + '/', redirect.location);

				res.statusCode = redirect.statusCode;
				res.setHeader('Location', location);
				res.end();

				return;
			}

			if (preload_error) {
				handle_error(req, res, preload_error.statusCode, preload_error.message);
				return;
			}

			const segments = req.path.split('/').filter(Boolean);

			// TODO make this less confusing
			const layout_segments = [segments[0]];
			let l = 1;

			page.parts.forEach((part, i) => {
				layout_segments[l] = segments[i + 1];
				if (!part) return null;
				l++;
			});

			const props = {
				stores: {
					page: {
						subscribe: writable({
							host: req.headers.host,
							path: req.path,
							query: req.query,
							params
						}).subscribe
					},
					preloading: {
						subscribe: writable(null).subscribe
					},
					session: writable(session)
				},
				segments: layout_segments,
				status: error ? status : 200,
				error: error ? error instanceof Error ? error : { message: error } : null,
				level0: {
					props: preloaded[0]
				},
				level1: {
					segment: segments[0],
					props: {}
				}
			};

			if (!is_service_worker_index) {
				let l = 1;
				for (let i = 0; i < page.parts.length; i += 1) {
					const part = page.parts[i];
					if (!part) continue;

					props[`level${l++}`] = {
						component: part.component,
						props: preloaded[i + 1] || {},
						segment: segments[i]
					};
				}
			}

			const { html, head, css } = App.render(props);

			const serialized = {
				preloaded: `[${preloaded.map(data => try_serialize(data)).join(',')}]`,
				session: session && try_serialize(session, err => {
					throw new Error(`Failed to serialize session data: ${err.message}`);
				}),
				error: error && serialize_error(props.error)
			};

			let script = `__SAPPER__={${[
				error && `error:${serialized.error},status:${status}`,
				`baseUrl:"${req.baseUrl}"`,
				serialized.preloaded && `preloaded:${serialized.preloaded}`,
				serialized.session && `session:${serialized.session}`
			].filter(Boolean).join(',')}};`;

			if (has_service_worker) {
				script += `if('serviceWorker' in navigator)navigator.serviceWorker.register('${req.baseUrl}/service-worker.js');`;
			}

			const file = [].concat(build_info.assets.main).filter(file => file && /\.js$/.test(file))[0];
			const main = `${req.baseUrl}/client/${file}`;

			if (build_info.bundler === 'rollup') {
				if (build_info.legacy_assets) {
					const legacy_main = `${req.baseUrl}/client/legacy/${build_info.legacy_assets.main}`;
					script += `(function(){try{eval("async function x(){}");var main="${main}"}catch(e){main="${legacy_main}"};var s=document.createElement("script");try{new Function("if(0)import('')")();s.src=main;s.type="module";s.crossOrigin="use-credentials";}catch(e){s.src="${req.baseUrl}/client/shimport@${build_info.shimport}.js";s.setAttribute("data-main",main);}document.head.appendChild(s);}());`;
				} else {
					script += `var s=document.createElement("script");try{new Function("if(0)import('')")();s.src="${main}";s.type="module";s.crossOrigin="use-credentials";}catch(e){s.src="${req.baseUrl}/client/shimport@${build_info.shimport}.js";s.setAttribute("data-main","${main}")}document.head.appendChild(s)`;
				}
			} else {
				script += `</script><script src="${main}">`;
			}

			let styles;

			// TODO make this consistent across apps
			// TODO embed build_info in placeholder.ts
			if (build_info.css && build_info.css.main) {
				const css_chunks = new Set();
				if (build_info.css.main) css_chunks.add(build_info.css.main);
				page.parts.forEach(part => {
					if (!part) return;
					const css_chunks_for_part = build_info.css.chunks[part.file];

					if (css_chunks_for_part) {
						css_chunks_for_part.forEach(file => {
							css_chunks.add(file);
						});
					}
				});

				styles = Array.from(css_chunks)
					.map(href => `<link rel="stylesheet" href="client/${href}">`)
					.join('');
			} else {
				styles = (css && css.code ? `<style>${css.code}</style>` : '');
			}

			// users can set a CSP nonce using res.locals.nonce
			const nonce_attr = (res.locals && res.locals.nonce) ? ` nonce="${res.locals.nonce}"` : '';

			const body = template()
				.replace('%sapper.base%', () => `<base href="${req.baseUrl}/">`)
				.replace('%sapper.scripts%', () => `<script${nonce_attr}>${script}</script>`)
				.replace('%sapper.html%', () => html)
				.replace('%sapper.head%', () => `<noscript id='sapper-head-start'></noscript>${head}<noscript id='sapper-head-end'></noscript>`)
				.replace('%sapper.styles%', () => styles);

			res.statusCode = status;
			res.end(body);
		} catch(err) {
			if (error) {
				bail(req, res, err);
			} else {
				handle_error(req, res, 500, err);
			}
		}
	}

	return function find_route(req, res, next) {
		if (req.path === '/service-worker-index.html') {
			const homePage = pages.find(page => page.pattern.test('/'));
			handle_page(homePage, req, res);
			return;
		}

		for (const page of pages) {
			if (page.pattern.test(req.path)) {
				handle_page(page, req, res);
				return;
			}
		}

		handle_error(req, res, 404, 'Not found');
	};
}

function read_template(dir = build_dir) {
	return fs.readFileSync(`${dir}/template.html`, 'utf-8');
}

function try_serialize(data, fail) {
	try {
		return devalue(data);
	} catch (err) {
		if (fail) fail(err);
		return null;
	}
}

// Ensure we return something truthy so the client will not re-render the page over the error
function serialize_error(error) {
	if (!error) return null;
	let serialized = try_serialize(error);
	if (!serialized) {
		const { name, message, stack } = error ;
		serialized = try_serialize({ name, message, stack });
	}
	if (!serialized) {
		serialized = '{}';
	}
	return serialized;
}

function escape_html(html) {
	const chars = {
		'"' : 'quot',
		"'": '#39',
		'&': 'amp',
		'<' : 'lt',
		'>' : 'gt'
	};

	return html.replace(/["'&<>]/g, c => `&${chars[c]};`);
}

function middleware(opts


 = {}) {
	const { session, ignore } = opts;

	let emitted_basepath = false;

	return compose_handlers(ignore, [
		(req, res, next) => {
			if (req.baseUrl === undefined) {
				let { originalUrl } = req;
				if (req.url === '/' && originalUrl[originalUrl.length - 1] !== '/') {
					originalUrl += '/';
				}

				req.baseUrl = originalUrl
					? originalUrl.slice(0, -req.url.length)
					: '';
			}

			if (!emitted_basepath && process.send) {
				process.send({
					__sapper__: true,
					event: 'basepath',
					basepath: req.baseUrl
				});

				emitted_basepath = true;
			}

			if (req.path === undefined) {
				req.path = req.url.replace(/\?.*/, '');
			}

			next();
		},

		fs.existsSync(path.join(build_dir, 'service-worker.js')) && serve({
			pathname: '/service-worker.js',
			cache_control: 'no-cache, no-store, must-revalidate'
		}),

		fs.existsSync(path.join(build_dir, 'service-worker.js.map')) && serve({
			pathname: '/service-worker.js.map',
			cache_control: 'no-cache, no-store, must-revalidate'
		}),

		serve({
			prefix: '/client/',
			cache_control:  'no-cache' 
		}),

		get_server_route_handler(manifest.server_routes),

		get_page_handler(manifest, session || noop$1)
	].filter(Boolean));
}

function compose_handlers(ignore, handlers) {
	const total = handlers.length;

	function nth_handler(n, req, res, next) {
		if (n >= total) {
			return next();
		}

		handlers[n](req, res, () => nth_handler(n+1, req, res, next));
	}

	return !ignore
		? (req, res, next) => nth_handler(0, req, res, next)
		: (req, res, next) => {
			if (should_ignore(req.path, ignore)) {
				next();
			} else {
				nth_handler(0, req, res, next);
			}
		};
}

function should_ignore(uri, val) {
	if (Array.isArray(val)) return val.some(x => should_ignore(uri, x));
	if (val instanceof RegExp) return val.test(uri);
	if (typeof val === 'function') return val(uri);
	return uri.startsWith(val.charCodeAt(0) === 47 ? val : `/${val}`);
}

function serve({ prefix, pathname, cache_control }



) {
	const filter = pathname
		? (req) => req.path === pathname
		: (req) => req.path.startsWith(prefix);

	const read =  (file) => fs.readFileSync(path.join(build_dir, file))
		;

	return (req, res, next) => {
		if (filter(req)) {
			const type = lite.getType(req.path);

			try {
				const file = path.posix.normalize(decodeURIComponent(req.path));
				const data = read(file);

				res.setHeader('Content-Type', type);
				res.setHeader('Cache-Control', cache_control);
				res.end(data);
			} catch (err) {
				res.statusCode = 404;
				res.end('not found');
			}
		} else {
			next();
		}
	};
}

function noop$1(){}

const { PORT, NODE_ENV } = process.env;
const dev = NODE_ENV === 'development';

polka() // You can also use Express
	.use(
		compression({ threshold: 0 }),
		sirv('static', { dev }),
		middleware()
	)
	.listen(PORT, err => {
		if (err) console.log('error', err);
	});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
