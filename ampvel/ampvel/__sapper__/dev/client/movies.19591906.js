import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, g as globals, Y as omxaddr, Z as movaddr, v as validate_slots, _ as localplayURL, B as validate_each_argument, e as element, c as claim_element, a as children, f as detach_dev, h as attr_dev, j as add_location, k as insert_dev, C as destroy_each, m as listen_dev, O as is_function, A as empty, n as noop, p as space, t as text, E as create_component, u as query_selector_all, q as claim_space, b as claim_text, F as claim_component, l as append_dev, G as mount_component, I as transition_out, P as check_outros, H as transition_in, J as destroy_component, r as run_all, Q as group_outros } from './client.bbdfb91c.js';
import { C as Controls } from './Controls.e790c73c.js';

/* src/components/MoviesListComp.svelte generated by Svelte v3.24.0 */

const { console: console_1 } = globals;
const file = "src/components/MoviesListComp.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[8] = list[i];
	return child_ctx;
}

// (39:0) {#if MYDATA != ""}
function create_if_block(ctx) {
	let nav;
	let each_value = /*MYDATA*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			nav = element("nav");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			nav = claim_element(nodes, "NAV", { class: true });
			var nav_nodes = children(nav);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nav_nodes);
			}

			nav_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(nav, "class", "svelte-156xawh");
			add_location(nav, file, 39, 4, 1009);
		},
		m: function mount(target, anchor) {
			insert_dev(target, nav, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(nav, null);
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*MYDATA, handlegetMovClick*/ 3) {
				each_value = /*MYDATA*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(nav, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(nav);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(39:0) {#if MYDATA != \\\"\\\"}",
		ctx
	});

	return block;
}

// (41:8) {#each MYDATA as mydat}
function create_each_block(ctx) {
	let img;
	let img_src_value;
	let img_alt_value;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			img = claim_element(nodes, "IMG", { src: true, alt: true, class: true });
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = /*mydat*/ ctx[8][9])) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", img_alt_value = /*mydat*/ ctx[8][7]);
			attr_dev(img, "class", "svelte-156xawh");
			add_location(img, file, 41, 12, 1059);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);

			if (!mounted) {
				dispose = listen_dev(
					img,
					"click",
					function () {
						if (is_function(/*handlegetMovClick*/ ctx[1](/*mydat*/ ctx[8][6]))) /*handlegetMovClick*/ ctx[1](/*mydat*/ ctx[8][6]).apply(this, arguments);
					},
					false,
					false,
					false
				);

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*MYDATA*/ 1 && img.src !== (img_src_value = /*mydat*/ ctx[8][9])) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty & /*MYDATA*/ 1 && img_alt_value !== (img_alt_value = /*mydat*/ ctx[8][7])) {
				attr_dev(img, "alt", img_alt_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(41:8) {#each MYDATA as mydat}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let if_block_anchor;
	let if_block = /*MYDATA*/ ctx[0] != "" && create_if_block(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, [dirty]) {
			if (/*MYDATA*/ ctx[0] != "") {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { MYDATA = [] } = $$props;
	let { movLOCALPLAY } = $$props;
	let omxaddr_value;

	const unsubampvel = omxaddr.subscribe(value => {
		omxaddr_value = value;
	});

	let movaddr_value;

	const unsubmovaddr = movaddr.subscribe(value => {
		movaddr_value = value;
	});

	async function getPlayMov(mov) {
		let addr = `${omxaddr_value}/playMediaReact?movie=${mov}`;
		console.log(addr);

		await fetch(addr, { mode: "cors", method: "GET" }).then(r => r.json()).then(data => {
			console.log(data);
		}).catch(err => console.log(err));
	}

	let handlegetMovClick = x => {
		if (movLOCALPLAY) {
			let foo = x.split("Movies", 2);
			let newpath = movaddr_value + foo[1];
			localplayURL.set(newpath);
			console.log(newpath);
		} else {
			let promise = getPlayMov(x).catch(err => console.log(err));
		}
	};

	const writable_props = ["MYDATA", "movLOCALPLAY"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<MoviesListComp> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("MoviesListComp", $$slots, []);

	$$self.$set = $$props => {
		if ("MYDATA" in $$props) $$invalidate(0, MYDATA = $$props.MYDATA);
		if ("movLOCALPLAY" in $$props) $$invalidate(2, movLOCALPLAY = $$props.movLOCALPLAY);
	};

	$$self.$capture_state = () => ({
		MYDATA,
		movLOCALPLAY,
		localplayURL,
		omxaddr,
		movaddr,
		omxaddr_value,
		unsubampvel,
		movaddr_value,
		unsubmovaddr,
		getPlayMov,
		handlegetMovClick
	});

	$$self.$inject_state = $$props => {
		if ("MYDATA" in $$props) $$invalidate(0, MYDATA = $$props.MYDATA);
		if ("movLOCALPLAY" in $$props) $$invalidate(2, movLOCALPLAY = $$props.movLOCALPLAY);
		if ("omxaddr_value" in $$props) omxaddr_value = $$props.omxaddr_value;
		if ("movaddr_value" in $$props) movaddr_value = $$props.movaddr_value;
		if ("handlegetMovClick" in $$props) $$invalidate(1, handlegetMovClick = $$props.handlegetMovClick);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [MYDATA, handlegetMovClick, movLOCALPLAY];
}

class MoviesListComp extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { MYDATA: 0, movLOCALPLAY: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "MoviesListComp",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*movLOCALPLAY*/ ctx[2] === undefined && !("movLOCALPLAY" in props)) {
			console_1.warn("<MoviesListComp> was created without expected prop 'movLOCALPLAY'");
		}
	}

	get MYDATA() {
		throw new Error("<MoviesListComp>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set MYDATA(value) {
		throw new Error("<MoviesListComp>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get movLOCALPLAY() {
		throw new Error("<MoviesListComp>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set movLOCALPLAY(value) {
		throw new Error("<MoviesListComp>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/routes/movies.svelte generated by Svelte v3.24.0 */

const { console: console_1$1 } = globals;
const file$1 = "src/routes/movies.svelte";

// (161:0) {:else}
function create_else_block(ctx) {
	let controls;
	let current;
	controls = new Controls({ $$inline: true });

	const block = {
		c: function create() {
			create_component(controls.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(controls.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(controls, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(controls.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(controls.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(controls, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(161:0) {:else}",
		ctx
	});

	return block;
}

// (156:0) {#if visible}
function create_if_block$1(ctx) {
	let div;
	let video;
	let video_src_value;

	const block = {
		c: function create() {
			div = element("div");
			video = element("video");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { id: true, class: true });
			var div_nodes = children(div);

			video = claim_element(div_nodes, "VIDEO", {
				controls: true,
				autoplay: true,
				src: true,
				class: true
			});

			children(video).forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			video.controls = true;
			video.autoplay = true;
			if (video.src !== (video_src_value = /*localplayURL_value*/ ctx[2])) attr_dev(video, "src", video_src_value);
			attr_dev(video, "class", "svelte-1hvc1od");
			add_location(video, file$1, 157, 2, 4147);
			attr_dev(div, "id", "vid1");
			attr_dev(div, "class", "svelte-1hvc1od");
			add_location(div, file$1, 156, 1, 4129);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, video);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*localplayURL_value*/ 4 && video.src !== (video_src_value = /*localplayURL_value*/ ctx[2])) {
				attr_dev(video, "src", video_src_value);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(156:0) {#if visible}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let t0;
	let input;
	let t1;
	let lable;
	let t2;
	let t3;
	let span;
	let t4;
	let current_block_type_index;
	let if_block;
	let t5;
	let nav;
	let ul;
	let button0;
	let t6;
	let t7;
	let button1;
	let t8;
	let t9;
	let button2;
	let t10;
	let t11;
	let button3;
	let t12;
	let t13;
	let button4;
	let t14;
	let t15;
	let button5;
	let t16;
	let t17;
	let button6;
	let t18;
	let t19;
	let button7;
	let t20;
	let t21;
	let button8;
	let t22;
	let t23;
	let button9;
	let t24;
	let t25;
	let button10;
	let t26;
	let t27;
	let button11;
	let t28;
	let t29;
	let button12;
	let t30;
	let t31;
	let button13;
	let t32;
	let t33;
	let button14;
	let t34;
	let t35;
	let button15;
	let t36;
	let t37;
	let button16;
	let t38;
	let t39;
	let button17;
	let t40;
	let t41;
	let button18;
	let t42;
	let t43;
	let button19;
	let t44;
	let t45;
	let movieslistcomp;
	let current;
	let mounted;
	let dispose;
	const if_block_creators = [create_if_block$1, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*visible*/ ctx[1]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	movieslistcomp = new MoviesListComp({
			props: {
				movLOCALPLAY: /*visible*/ ctx[1],
				MYDATA: /*NewDat*/ ctx[0]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			t0 = space();
			input = element("input");
			t1 = space();
			lable = element("lable");
			t2 = text("localplay");
			t3 = space();
			span = element("span");
			t4 = space();
			if_block.c();
			t5 = space();
			nav = element("nav");
			ul = element("ul");
			button0 = element("button");
			t6 = text("Action");
			t7 = space();
			button1 = element("button");
			t8 = text("Cartoons");
			t9 = space();
			button2 = element("button");
			t10 = text("Comedy");
			t11 = space();
			button3 = element("button");
			t12 = text("Drama");
			t13 = space();
			button4 = element("button");
			t14 = text("SciFi");
			t15 = space();
			button5 = element("button");
			t16 = text("Misc");
			t17 = space();
			button6 = element("button");
			t18 = text("Die Hard");
			t19 = space();
			button7 = element("button");
			t20 = text("Godzilla");
			t21 = space();
			button8 = element("button");
			t22 = text("Harry Potter");
			t23 = space();
			button9 = element("button");
			t24 = text("Indiana Jones");
			t25 = space();
			button10 = element("button");
			t26 = text("John Wayne");
			t27 = space();
			button11 = element("button");
			t28 = text("John Wick");
			t29 = space();
			button12 = element("button");
			t30 = text("Jurassic Park");
			t31 = space();
			button13 = element("button");
			t32 = text("KingsMen");
			t33 = space();
			button14 = element("button");
			t34 = text("Pirates");
			t35 = space();
			button15 = element("button");
			t36 = text("Star Trek");
			t37 = space();
			button16 = element("button");
			t38 = text("Star Wars");
			t39 = space();
			button17 = element("button");
			t40 = text("Super Heros");
			t41 = space();
			button18 = element("button");
			t42 = text("Tremors");
			t43 = space();
			button19 = element("button");
			t44 = text("Men In Black");
			t45 = space();
			create_component(movieslistcomp.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-qnk79e\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			input = claim_element(nodes, "INPUT", { type: true, value: true, class: true });
			t1 = claim_space(nodes);
			lable = claim_element(nodes, "LABLE", { class: true });
			var lable_nodes = children(lable);
			t2 = claim_text(lable_nodes, "localplay");
			lable_nodes.forEach(detach_dev);
			t3 = claim_space(nodes);
			span = claim_element(nodes, "SPAN", {});
			children(span).forEach(detach_dev);
			t4 = claim_space(nodes);
			if_block.l(nodes);
			t5 = claim_space(nodes);
			nav = claim_element(nodes, "NAV", {});
			var nav_nodes = children(nav);
			ul = claim_element(nav_nodes, "UL", {});
			var ul_nodes = children(ul);
			button0 = claim_element(ul_nodes, "BUTTON", {});
			var button0_nodes = children(button0);
			t6 = claim_text(button0_nodes, "Action");
			button0_nodes.forEach(detach_dev);
			t7 = claim_space(ul_nodes);
			button1 = claim_element(ul_nodes, "BUTTON", {});
			var button1_nodes = children(button1);
			t8 = claim_text(button1_nodes, "Cartoons");
			button1_nodes.forEach(detach_dev);
			t9 = claim_space(ul_nodes);
			button2 = claim_element(ul_nodes, "BUTTON", {});
			var button2_nodes = children(button2);
			t10 = claim_text(button2_nodes, "Comedy");
			button2_nodes.forEach(detach_dev);
			t11 = claim_space(ul_nodes);
			button3 = claim_element(ul_nodes, "BUTTON", {});
			var button3_nodes = children(button3);
			t12 = claim_text(button3_nodes, "Drama");
			button3_nodes.forEach(detach_dev);
			t13 = claim_space(ul_nodes);
			button4 = claim_element(ul_nodes, "BUTTON", {});
			var button4_nodes = children(button4);
			t14 = claim_text(button4_nodes, "SciFi");
			button4_nodes.forEach(detach_dev);
			t15 = claim_space(ul_nodes);
			button5 = claim_element(ul_nodes, "BUTTON", {});
			var button5_nodes = children(button5);
			t16 = claim_text(button5_nodes, "Misc");
			button5_nodes.forEach(detach_dev);
			t17 = claim_space(ul_nodes);
			button6 = claim_element(ul_nodes, "BUTTON", {});
			var button6_nodes = children(button6);
			t18 = claim_text(button6_nodes, "Die Hard");
			button6_nodes.forEach(detach_dev);
			t19 = claim_space(ul_nodes);
			button7 = claim_element(ul_nodes, "BUTTON", {});
			var button7_nodes = children(button7);
			t20 = claim_text(button7_nodes, "Godzilla");
			button7_nodes.forEach(detach_dev);
			t21 = claim_space(ul_nodes);
			button8 = claim_element(ul_nodes, "BUTTON", {});
			var button8_nodes = children(button8);
			t22 = claim_text(button8_nodes, "Harry Potter");
			button8_nodes.forEach(detach_dev);
			t23 = claim_space(ul_nodes);
			button9 = claim_element(ul_nodes, "BUTTON", {});
			var button9_nodes = children(button9);
			t24 = claim_text(button9_nodes, "Indiana Jones");
			button9_nodes.forEach(detach_dev);
			t25 = claim_space(ul_nodes);
			button10 = claim_element(ul_nodes, "BUTTON", {});
			var button10_nodes = children(button10);
			t26 = claim_text(button10_nodes, "John Wayne");
			button10_nodes.forEach(detach_dev);
			t27 = claim_space(ul_nodes);
			button11 = claim_element(ul_nodes, "BUTTON", {});
			var button11_nodes = children(button11);
			t28 = claim_text(button11_nodes, "John Wick");
			button11_nodes.forEach(detach_dev);
			t29 = claim_space(ul_nodes);
			button12 = claim_element(ul_nodes, "BUTTON", {});
			var button12_nodes = children(button12);
			t30 = claim_text(button12_nodes, "Jurassic Park");
			button12_nodes.forEach(detach_dev);
			t31 = claim_space(ul_nodes);
			button13 = claim_element(ul_nodes, "BUTTON", {});
			var button13_nodes = children(button13);
			t32 = claim_text(button13_nodes, "KingsMen");
			button13_nodes.forEach(detach_dev);
			t33 = claim_space(ul_nodes);
			button14 = claim_element(ul_nodes, "BUTTON", {});
			var button14_nodes = children(button14);
			t34 = claim_text(button14_nodes, "Pirates");
			button14_nodes.forEach(detach_dev);
			t35 = claim_space(ul_nodes);
			button15 = claim_element(ul_nodes, "BUTTON", {});
			var button15_nodes = children(button15);
			t36 = claim_text(button15_nodes, "Star Trek");
			button15_nodes.forEach(detach_dev);
			t37 = claim_space(ul_nodes);
			button16 = claim_element(ul_nodes, "BUTTON", {});
			var button16_nodes = children(button16);
			t38 = claim_text(button16_nodes, "Star Wars");
			button16_nodes.forEach(detach_dev);
			t39 = claim_space(ul_nodes);
			button17 = claim_element(ul_nodes, "BUTTON", {});
			var button17_nodes = children(button17);
			t40 = claim_text(button17_nodes, "Super Heros");
			button17_nodes.forEach(detach_dev);
			t41 = claim_space(ul_nodes);
			button18 = claim_element(ul_nodes, "BUTTON", {});
			var button18_nodes = children(button18);
			t42 = claim_text(button18_nodes, "Tremors");
			button18_nodes.forEach(detach_dev);
			t43 = claim_space(ul_nodes);
			button19 = claim_element(ul_nodes, "BUTTON", {});
			var button19_nodes = children(button19);
			t44 = claim_text(button19_nodes, "Men In Black");
			button19_nodes.forEach(detach_dev);
			ul_nodes.forEach(detach_dev);
			nav_nodes.forEach(detach_dev);
			t45 = claim_space(nodes);
			claim_component(movieslistcomp.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			document.title = "Movies";
			attr_dev(input, "type", "checkbox");
			input.__value = "fuck";
			input.value = input.__value;
			attr_dev(input, "class", "svelte-1hvc1od");
			add_location(input, file$1, 152, 0, 4015);
			attr_dev(lable, "class", "svelte-1hvc1od");
			add_location(lable, file$1, 153, 0, 4075);
			add_location(span, file$1, 154, 0, 4100);
			add_location(button0, file$1, 166, 2, 4318);
			add_location(button1, file$1, 167, 2, 4373);
			add_location(button2, file$1, 168, 2, 4432);
			add_location(button3, file$1, 169, 2, 4487);
			add_location(button4, file$1, 170, 2, 4540);
			add_location(button5, file$1, 171, 2, 4593);
			add_location(button6, file$1, 172, 2, 4644);
			add_location(button7, file$1, 173, 2, 4702);
			add_location(button8, file$1, 174, 2, 4761);
			add_location(button9, file$1, 175, 2, 4827);
			add_location(button10, file$1, 176, 2, 4895);
			add_location(button11, file$1, 177, 2, 4957);
			add_location(button12, file$1, 178, 2, 5017);
			add_location(button13, file$1, 179, 2, 5085);
			add_location(button14, file$1, 180, 2, 5144);
			add_location(button15, file$1, 181, 2, 5201);
			add_location(button16, file$1, 182, 2, 5261);
			add_location(button17, file$1, 183, 2, 5321);
			add_location(button18, file$1, 184, 2, 5385);
			add_location(button19, file$1, 185, 2, 5442);
			add_location(ul, file$1, 165, 1, 4311);
			add_location(nav, file$1, 164, 0, 4304);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, input, anchor);
			input.checked = /*visible*/ ctx[1];
			insert_dev(target, t1, anchor);
			insert_dev(target, lable, anchor);
			append_dev(lable, t2);
			insert_dev(target, t3, anchor);
			insert_dev(target, span, anchor);
			insert_dev(target, t4, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, t5, anchor);
			insert_dev(target, nav, anchor);
			append_dev(nav, ul);
			append_dev(ul, button0);
			append_dev(button0, t6);
			append_dev(ul, t7);
			append_dev(ul, button1);
			append_dev(button1, t8);
			append_dev(ul, t9);
			append_dev(ul, button2);
			append_dev(button2, t10);
			append_dev(ul, t11);
			append_dev(ul, button3);
			append_dev(button3, t12);
			append_dev(ul, t13);
			append_dev(ul, button4);
			append_dev(button4, t14);
			append_dev(ul, t15);
			append_dev(ul, button5);
			append_dev(button5, t16);
			append_dev(ul, t17);
			append_dev(ul, button6);
			append_dev(button6, t18);
			append_dev(ul, t19);
			append_dev(ul, button7);
			append_dev(button7, t20);
			append_dev(ul, t21);
			append_dev(ul, button8);
			append_dev(button8, t22);
			append_dev(ul, t23);
			append_dev(ul, button9);
			append_dev(button9, t24);
			append_dev(ul, t25);
			append_dev(ul, button10);
			append_dev(button10, t26);
			append_dev(ul, t27);
			append_dev(ul, button11);
			append_dev(button11, t28);
			append_dev(ul, t29);
			append_dev(ul, button12);
			append_dev(button12, t30);
			append_dev(ul, t31);
			append_dev(ul, button13);
			append_dev(button13, t32);
			append_dev(ul, t33);
			append_dev(ul, button14);
			append_dev(button14, t34);
			append_dev(ul, t35);
			append_dev(ul, button15);
			append_dev(button15, t36);
			append_dev(ul, t37);
			append_dev(ul, button16);
			append_dev(button16, t38);
			append_dev(ul, t39);
			append_dev(ul, button17);
			append_dev(button17, t40);
			append_dev(ul, t41);
			append_dev(ul, button18);
			append_dev(button18, t42);
			append_dev(ul, t43);
			append_dev(ul, button19);
			append_dev(button19, t44);
			insert_dev(target, t45, anchor);
			mount_component(movieslistcomp, target, anchor);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(input, "change", /*input_change_handler*/ ctx[23]),
					listen_dev(button0, "click", /*handleActionClick*/ ctx[3], false, false, false),
					listen_dev(button1, "click", /*handleCartoonsClick*/ ctx[4], false, false, false),
					listen_dev(button2, "click", /*handleComedyClick*/ ctx[5], false, false, false),
					listen_dev(button3, "click", /*handleDramaClick*/ ctx[6], false, false, false),
					listen_dev(button4, "click", /*handleSciFiClick*/ ctx[7], false, false, false),
					listen_dev(button5, "click", /*handleMiscClick*/ ctx[8], false, false, false),
					listen_dev(button6, "click", /*handleDieHardClick*/ ctx[9], false, false, false),
					listen_dev(button7, "click", /*handleGodzillaClick*/ ctx[10], false, false, false),
					listen_dev(button8, "click", /*handleHarryPotterClick*/ ctx[11], false, false, false),
					listen_dev(button9, "click", /*handleIndianaJonesClick*/ ctx[12], false, false, false),
					listen_dev(button10, "click", /*handleJohnWayneClick*/ ctx[13], false, false, false),
					listen_dev(button11, "click", /*handleJohnWickClick*/ ctx[14], false, false, false),
					listen_dev(button12, "click", /*handleJurassicParkClick*/ ctx[22], false, false, false),
					listen_dev(button13, "click", /*handleKingsMenClick*/ ctx[15], false, false, false),
					listen_dev(button14, "click", /*handlePiratesClick*/ ctx[16], false, false, false),
					listen_dev(button15, "click", /*handleStarTrekClick*/ ctx[17], false, false, false),
					listen_dev(button16, "click", /*handleStarWarsClick*/ ctx[18], false, false, false),
					listen_dev(button17, "click", /*handleSuperHerosClick*/ ctx[19], false, false, false),
					listen_dev(button18, "click", /*handleTremorsClick*/ ctx[20], false, false, false),
					listen_dev(button19, "click", /*handleMenInBlackClick*/ ctx[21], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*visible*/ 2) {
				input.checked = /*visible*/ ctx[1];
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(t5.parentNode, t5);
			}

			const movieslistcomp_changes = {};
			if (dirty & /*visible*/ 2) movieslistcomp_changes.movLOCALPLAY = /*visible*/ ctx[1];
			if (dirty & /*NewDat*/ 1) movieslistcomp_changes.MYDATA = /*NewDat*/ ctx[0];
			movieslistcomp.$set(movieslistcomp_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(movieslistcomp.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			transition_out(movieslistcomp.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(input);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(lable);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(span);
			if (detaching) detach_dev(t4);
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(t5);
			if (detaching) detach_dev(nav);
			if (detaching) detach_dev(t45);
			destroy_component(movieslistcomp, detaching);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let NewDat;

	async function getMovies(x) {
		await fetch(`http://192.168.0.42:8888/${x}`, { mode: "cors", method: "GET" }).then(r => r.json()).then(data => {
			// console.log(data)
			$$invalidate(0, NewDat = data.map(da => {
				// console.log(da.movname)
				const carosthumb = da.carosthumb;

				const catagory = da.catagory;
				const dirpath = da.dirpath;
				const filepath = da.filepath;
				const genre = da.genre;
				const mediaid = da.mediaid;
				const movfspath = da.movfspath;
				const movname = da.movname;
				const movyear = da.movyear;
				console.log(da.thumbpath);
				const addr = "http://192.168.0.42:8888/";
				let np = da.thumbpath.split("/");
				let newpath = np[1] + "/" + np[2];
				const thumbpath = addr + newpath;
				console.log(thumbpath);

				return [
					carosthumb,
					catagory,
					dirpath,
					filepath,
					genre,
					mediaid,
					movfspath,
					movname,
					movyear,
					thumbpath
				];
			}));
		}).catch(err => console.log(err));
	}

	let handleActionClick = () => {
		let movs = "intAction";
		let promise = getMovies(movs).catch(err => console.log(err));
	};

	let handleCartoonsClick = () => {
		let movs = "intCartoons";
		let promise = getMovies(movs).catch(err => console.log(err));
	};

	let handleComedyClick = () => {
		let movs = "intComedy";
		let promise = getMovies(movs).catch(err => console.log(err));
	};

	let handleDramaClick = () => {
		let movs = "intDrama";
		let promise = getMovies(movs).catch(err => console.log(err));
	};

	let handleSciFiClick = () => {
		let movs = "intSciFi";
		let promise = getMovies(movs).catch(err => console.log(err));
	};

	let handleMiscClick = () => {
		let movs = "intMisc";
		let promise = getMovies(movs).catch(err => console.log(err));
	};

	let handleDieHardClick = () => {
		let movs = "intDieHard";
		let promise = getMovies(movs).catch(err => console.log(err));
	};

	let handleGodzillaClick = () => {
		let movs = "intGodzilla";
		let promise = getMovies(movs).catch(err => console.log(err));
	};

	let handleHarryPotterClick = () => {
		let movs = "intHarryPotter";
		let promise = getMovies(movs).catch(err => console.log(err));
	};

	let handleIndianaJonesClick = () => {
		let movs = "intIndianaJones";
		let promise = getMovies(movs).catch(err => console.log(err));
	};

	let handleJohnWayneClick = () => {
		let movs = "intJohnWayne";
		let promise = getMovies(movs).catch(err => console.log(err));
	};

	let handleJohnWickClick = () => {
		let movs = "intJohnWick";
		let promise = getMovies(movs).catch(err => console.log(err));
	};

	let handleKingsMenClick = () => {
		let movs = "intKingsMan";
		let promise = getMovies(movs).catch(err => console.log(err));
	};

	let handlePiratesClick = () => {
		let movs = "intPirates";
		let promise = getMovies(movs).catch(err => console.log(err));
	};

	let handleStarTrekClick = () => {
		let movs = "intStarTrek";
		let promise = getMovies(movs).catch(err => console.log(err));
	};

	let handleStarWarsClick = () => {
		let movs = "intStarWars";
		let promise = getMovies(movs).catch(err => console.log(err));
	};

	let handleSuperHerosClick = () => {
		let movs = "intSuperHeros";
		let promise = getMovies(movs).catch(err => console.log(err));
	};

	let handleTremorsClick = () => {
		let movs = "intTremors";
		let promise = getMovies(movs).catch(err => console.log(err));
	};

	let handleMenInBlackClick = () => {
		let movs = "intMenInBlack";
		let promise = getMovies(movs).catch(err => console.log(err));
	};

	let handleJurassicParkClick = () => {
		let movs = "intJurassicPark";
		let promise = getMovies(movs).catch(err => console.log(err));
	};

	let visible = false;

	let fuck = () => {
		if (visible) {
			$$invalidate(1, visible = false);
		} else {
			$$invalidate(1, visible = true);
		}
	};

	let localplayURL_value;

	const unsubplid = localplayURL.subscribe(value => {
		$$invalidate(2, localplayURL_value = value);
	});

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$1.warn(`<Movies> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Movies", $$slots, []);

	function input_change_handler() {
		visible = this.checked;
		$$invalidate(1, visible);
	}

	$$self.$capture_state = () => ({
		MoviesListComp,
		Controls,
		localplayURL,
		NewDat,
		getMovies,
		handleActionClick,
		handleCartoonsClick,
		handleComedyClick,
		handleDramaClick,
		handleSciFiClick,
		handleMiscClick,
		handleDieHardClick,
		handleGodzillaClick,
		handleHarryPotterClick,
		handleIndianaJonesClick,
		handleJohnWayneClick,
		handleJohnWickClick,
		handleKingsMenClick,
		handlePiratesClick,
		handleStarTrekClick,
		handleStarWarsClick,
		handleSuperHerosClick,
		handleTremorsClick,
		handleMenInBlackClick,
		handleJurassicParkClick,
		visible,
		fuck,
		localplayURL_value,
		unsubplid
	});

	$$self.$inject_state = $$props => {
		if ("NewDat" in $$props) $$invalidate(0, NewDat = $$props.NewDat);
		if ("handleActionClick" in $$props) $$invalidate(3, handleActionClick = $$props.handleActionClick);
		if ("handleCartoonsClick" in $$props) $$invalidate(4, handleCartoonsClick = $$props.handleCartoonsClick);
		if ("handleComedyClick" in $$props) $$invalidate(5, handleComedyClick = $$props.handleComedyClick);
		if ("handleDramaClick" in $$props) $$invalidate(6, handleDramaClick = $$props.handleDramaClick);
		if ("handleSciFiClick" in $$props) $$invalidate(7, handleSciFiClick = $$props.handleSciFiClick);
		if ("handleMiscClick" in $$props) $$invalidate(8, handleMiscClick = $$props.handleMiscClick);
		if ("handleDieHardClick" in $$props) $$invalidate(9, handleDieHardClick = $$props.handleDieHardClick);
		if ("handleGodzillaClick" in $$props) $$invalidate(10, handleGodzillaClick = $$props.handleGodzillaClick);
		if ("handleHarryPotterClick" in $$props) $$invalidate(11, handleHarryPotterClick = $$props.handleHarryPotterClick);
		if ("handleIndianaJonesClick" in $$props) $$invalidate(12, handleIndianaJonesClick = $$props.handleIndianaJonesClick);
		if ("handleJohnWayneClick" in $$props) $$invalidate(13, handleJohnWayneClick = $$props.handleJohnWayneClick);
		if ("handleJohnWickClick" in $$props) $$invalidate(14, handleJohnWickClick = $$props.handleJohnWickClick);
		if ("handleKingsMenClick" in $$props) $$invalidate(15, handleKingsMenClick = $$props.handleKingsMenClick);
		if ("handlePiratesClick" in $$props) $$invalidate(16, handlePiratesClick = $$props.handlePiratesClick);
		if ("handleStarTrekClick" in $$props) $$invalidate(17, handleStarTrekClick = $$props.handleStarTrekClick);
		if ("handleStarWarsClick" in $$props) $$invalidate(18, handleStarWarsClick = $$props.handleStarWarsClick);
		if ("handleSuperHerosClick" in $$props) $$invalidate(19, handleSuperHerosClick = $$props.handleSuperHerosClick);
		if ("handleTremorsClick" in $$props) $$invalidate(20, handleTremorsClick = $$props.handleTremorsClick);
		if ("handleMenInBlackClick" in $$props) $$invalidate(21, handleMenInBlackClick = $$props.handleMenInBlackClick);
		if ("handleJurassicParkClick" in $$props) $$invalidate(22, handleJurassicParkClick = $$props.handleJurassicParkClick);
		if ("visible" in $$props) $$invalidate(1, visible = $$props.visible);
		if ("fuck" in $$props) fuck = $$props.fuck;
		if ("localplayURL_value" in $$props) $$invalidate(2, localplayURL_value = $$props.localplayURL_value);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		NewDat,
		visible,
		localplayURL_value,
		handleActionClick,
		handleCartoonsClick,
		handleComedyClick,
		handleDramaClick,
		handleSciFiClick,
		handleMiscClick,
		handleDieHardClick,
		handleGodzillaClick,
		handleHarryPotterClick,
		handleIndianaJonesClick,
		handleJohnWayneClick,
		handleJohnWickClick,
		handleKingsMenClick,
		handlePiratesClick,
		handleStarTrekClick,
		handleStarWarsClick,
		handleSuperHerosClick,
		handleTremorsClick,
		handleMenInBlackClick,
		handleJurassicParkClick,
		input_change_handler
	];
}

class Movies extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Movies",
			options,
			id: create_fragment$1.name
		});
	}
}

export default Movies;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
