import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, o as onMount, v as validate_slots, g as globals, e as element, t as text, c as claim_element, a as children, b as claim_text, f as detach_dev, h as attr_dev, j as add_location, k as insert_dev, l as append_dev, m as listen_dev, n as noop, p as space, q as query_selector_all, r as claim_space, u as set_data_dev } from './client.e0b8f8e8.js';

/* src/routes/index.svelte generated by Svelte v3.24.0 */

const { console: console_1 } = globals;
const file = "src/routes/index.svelte";

// (102:1) {:else}
function create_else_block_1(ctx) {
	let li;
	let span0;
	let t0;
	let span1;
	let t1;

	const block = {
		c: function create() {
			li = element("li");
			span0 = element("span");
			t0 = text("Movies:");
			span1 = element("span");
			t1 = text(/*movcount*/ ctx[4]);
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", { class: true });
			var li_nodes = children(li);
			span0 = claim_element(li_nodes, "SPAN", { id: true, class: true });
			var span0_nodes = children(span0);
			t0 = claim_text(span0_nodes, "Movies:");
			span0_nodes.forEach(detach_dev);
			span1 = claim_element(li_nodes, "SPAN", { id: true, class: true });
			var span1_nodes = children(span1);
			t1 = claim_text(span1_nodes, /*movcount*/ ctx[4]);
			span1_nodes.forEach(detach_dev);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span0, "id", "MovSetup2");
			attr_dev(span0, "class", "svelte-1pyv317");
			add_location(span0, file, 102, 6, 2370);
			attr_dev(span1, "id", "artspan");
			attr_dev(span1, "class", "svelte-1pyv317");
			add_location(span1, file, 102, 41, 2405);
			attr_dev(li, "class", "svelte-1pyv317");
			add_location(li, file, 102, 2, 2366);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, span0);
			append_dev(span0, t0);
			append_dev(li, span1);
			append_dev(span1, t1);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*movcount*/ 16) set_data_dev(t1, /*movcount*/ ctx[4]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_1.name,
		type: "else",
		source: "(102:1) {:else}",
		ctx
	});

	return block;
}

// (100:1) {#if movcount < 1}
function create_if_block_3(ctx) {
	let li;
	let span0;
	let t0;
	let span1;
	let t1;

	const block = {
		c: function create() {
			li = element("li");
			span0 = element("span");
			t0 = text("Movies:");
			span1 = element("span");
			t1 = text(/*movcount*/ ctx[4]);
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", { class: true });
			var li_nodes = children(li);
			span0 = claim_element(li_nodes, "SPAN", { id: true, class: true });
			var span0_nodes = children(span0);
			t0 = claim_text(span0_nodes, "Movies:");
			span0_nodes.forEach(detach_dev);
			span1 = claim_element(li_nodes, "SPAN", { id: true, class: true });
			var span1_nodes = children(span1);
			t1 = claim_text(span1_nodes, /*movcount*/ ctx[4]);
			span1_nodes.forEach(detach_dev);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span0, "id", "MovSetup1");
			attr_dev(span0, "class", "svelte-1pyv317");
			add_location(span0, file, 100, 6, 2278);
			attr_dev(span1, "id", "artspan");
			attr_dev(span1, "class", "svelte-1pyv317");
			add_location(span1, file, 100, 41, 2313);
			attr_dev(li, "class", "svelte-1pyv317");
			add_location(li, file, 100, 2, 2274);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, span0);
			append_dev(span0, t0);
			append_dev(li, span1);
			append_dev(span1, t1);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*movcount*/ 16) set_data_dev(t1, /*movcount*/ ctx[4]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(100:1) {#if movcount < 1}",
		ctx
	});

	return block;
}

// (108:1) {:else}
function create_else_block(ctx) {
	let li;
	let span0;
	let t0;
	let span1;
	let t1;

	const block = {
		c: function create() {
			li = element("li");
			span0 = element("span");
			t0 = text("TV Shows:");
			span1 = element("span");
			t1 = text(/*tvcount*/ ctx[5]);
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", { class: true });
			var li_nodes = children(li);
			span0 = claim_element(li_nodes, "SPAN", { id: true, class: true });
			var span0_nodes = children(span0);
			t0 = claim_text(span0_nodes, "TV Shows:");
			span0_nodes.forEach(detach_dev);
			span1 = claim_element(li_nodes, "SPAN", { id: true, class: true });
			var span1_nodes = children(span1);
			t1 = claim_text(span1_nodes, /*tvcount*/ ctx[5]);
			span1_nodes.forEach(detach_dev);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span0, "id", "TVSetup2");
			attr_dev(span0, "class", "svelte-1pyv317");
			add_location(span0, file, 108, 6, 2572);
			attr_dev(span1, "id", "artspan");
			attr_dev(span1, "class", "svelte-1pyv317");
			add_location(span1, file, 108, 42, 2608);
			attr_dev(li, "class", "svelte-1pyv317");
			add_location(li, file, 108, 2, 2568);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, span0);
			append_dev(span0, t0);
			append_dev(li, span1);
			append_dev(span1, t1);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*tvcount*/ 32) set_data_dev(t1, /*tvcount*/ ctx[5]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(108:1) {:else}",
		ctx
	});

	return block;
}

// (106:1) {#if tvcount < 1}
function create_if_block_2(ctx) {
	let li;
	let span0;
	let t0;
	let span1;
	let t1;

	const block = {
		c: function create() {
			li = element("li");
			span0 = element("span");
			t0 = text("TV Shows:");
			span1 = element("span");
			t1 = text(/*tvcount*/ ctx[5]);
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", { class: true });
			var li_nodes = children(li);
			span0 = claim_element(li_nodes, "SPAN", { id: true, class: true });
			var span0_nodes = children(span0);
			t0 = claim_text(span0_nodes, "TV Shows:");
			span0_nodes.forEach(detach_dev);
			span1 = claim_element(li_nodes, "SPAN", { id: true, class: true });
			var span1_nodes = children(span1);
			t1 = claim_text(span1_nodes, /*tvcount*/ ctx[5]);
			span1_nodes.forEach(detach_dev);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span0, "id", "TVSetup1");
			attr_dev(span0, "class", "svelte-1pyv317");
			add_location(span0, file, 106, 6, 2480);
			attr_dev(span1, "id", "artspan");
			attr_dev(span1, "class", "svelte-1pyv317");
			add_location(span1, file, 106, 42, 2516);
			attr_dev(li, "class", "svelte-1pyv317");
			add_location(li, file, 106, 2, 2476);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, span0);
			append_dev(span0, t0);
			append_dev(li, span1);
			append_dev(span1, t1);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*tvcount*/ 32) set_data_dev(t1, /*tvcount*/ ctx[5]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(106:1) {#if tvcount < 1}",
		ctx
	});

	return block;
}

// (114:1) {#if movcount < 1}
function create_if_block_1(ctx) {
	let button;
	let t;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			button = element("button");
			t = text("Movie Setup");
			this.h();
		},
		l: function claim(nodes) {
			button = claim_element(nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			t = claim_text(button_nodes, "Movie Setup");
			button_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(button, "class", "svelte-1pyv317");
			add_location(button, file, 114, 2, 2691);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			append_dev(button, t);

			if (!mounted) {
				dispose = listen_dev(button, "click", /*handleMovUpdateClick*/ ctx[6], false, false, false);
				mounted = true;
			}
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(114:1) {#if movcount < 1}",
		ctx
	});

	return block;
}

// (117:1) {#if tvcount < 1}
function create_if_block(ctx) {
	let button;
	let t;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			button = element("button");
			t = text("TVShows Setup");
			this.h();
		},
		l: function claim(nodes) {
			button = claim_element(nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			t = claim_text(button_nodes, "TVShows Setup");
			button_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(button, "class", "svelte-1pyv317");
			add_location(button, file, 117, 2, 2781);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			append_dev(button, t);

			if (!mounted) {
				dispose = listen_dev(button, "click", /*handleTVUpdateClick*/ ctx[7], false, false, false);
				mounted = true;
			}
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(117:1) {#if tvcount < 1}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let ul0;
	let li0;
	let a;
	let t1;
	let t2;
	let figure;
	let img;
	let img_src_value;
	let t3;
	let figcaption;
	let t4;
	let t5;
	let ul1;
	let li1;
	let span0;
	let t6;
	let t7;
	let span1;
	let t8;
	let t9;
	let li2;
	let span2;
	let t10;
	let span3;
	let t11;
	let t12;
	let li3;
	let span4;
	let t13;
	let span5;
	let t14;
	let t15;
	let ul2;
	let t16;
	let t17;
	let nav;
	let t18;
	let t19;
	let iframe0;
	let iframe0_src_value;
	let t20;
	let iframe1;
	let iframe1_src_value;

	function select_block_type(ctx, dirty) {
		if (/*movcount*/ ctx[4] < 1) return create_if_block_3;
		return create_else_block_1;
	}

	let current_block_type = select_block_type(ctx);
	let if_block0 = current_block_type(ctx);

	function select_block_type_1(ctx, dirty) {
		if (/*tvcount*/ ctx[5] < 1) return create_if_block_2;
		return create_else_block;
	}

	let current_block_type_1 = select_block_type_1(ctx);
	let if_block1 = current_block_type_1(ctx);
	let if_block2 = /*movcount*/ ctx[4] < 1 && create_if_block_1(ctx);
	let if_block3 = /*tvcount*/ ctx[5] < 1 && create_if_block(ctx);

	const block = {
		c: function create() {
			t0 = space();
			ul0 = element("ul");
			li0 = element("li");
			a = element("a");
			t1 = text("YTS-EZTV");
			t2 = space();
			figure = element("figure");
			img = element("img");
			t3 = space();
			figcaption = element("figcaption");
			t4 = text("NASA Pic Of The Day");
			t5 = space();
			ul1 = element("ul");
			li1 = element("li");
			span0 = element("span");
			t6 = text("Artists:");
			t7 = space();
			span1 = element("span");
			t8 = text(/*artist*/ ctx[0]);
			t9 = space();
			li2 = element("li");
			span2 = element("span");
			t10 = text("Albums:");
			span3 = element("span");
			t11 = text(/*albums*/ ctx[1]);
			t12 = space();
			li3 = element("li");
			span4 = element("span");
			t13 = text("Songs:");
			span5 = element("span");
			t14 = text(/*mp3*/ ctx[2]);
			t15 = space();
			ul2 = element("ul");
			if_block0.c();
			t16 = space();
			if_block1.c();
			t17 = space();
			nav = element("nav");
			if (if_block2) if_block2.c();
			t18 = space();
			if (if_block3) if_block3.c();
			t19 = space();
			iframe0 = element("iframe");
			t20 = space();
			iframe1 = element("iframe");
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-1295xmn\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			ul0 = claim_element(nodes, "UL", { class: true });
			var ul0_nodes = children(ul0);
			li0 = claim_element(ul0_nodes, "LI", { class: true });
			var li0_nodes = children(li0);
			a = claim_element(li0_nodes, "A", { href: true });
			var a_nodes = children(a);
			t1 = claim_text(a_nodes, "YTS-EZTV");
			a_nodes.forEach(detach_dev);
			li0_nodes.forEach(detach_dev);
			ul0_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			figure = claim_element(nodes, "FIGURE", { class: true });
			var figure_nodes = children(figure);
			img = claim_element(figure_nodes, "IMG", { alt: true, src: true, class: true });
			t3 = claim_space(figure_nodes);
			figcaption = claim_element(figure_nodes, "FIGCAPTION", {});
			var figcaption_nodes = children(figcaption);
			t4 = claim_text(figcaption_nodes, "NASA Pic Of The Day");
			figcaption_nodes.forEach(detach_dev);
			figure_nodes.forEach(detach_dev);
			t5 = claim_space(nodes);
			ul1 = claim_element(nodes, "UL", { class: true });
			var ul1_nodes = children(ul1);
			li1 = claim_element(ul1_nodes, "LI", { class: true });
			var li1_nodes = children(li1);
			span0 = claim_element(li1_nodes, "SPAN", {});
			var span0_nodes = children(span0);
			t6 = claim_text(span0_nodes, "Artists:");
			span0_nodes.forEach(detach_dev);
			t7 = claim_space(li1_nodes);
			span1 = claim_element(li1_nodes, "SPAN", { id: true, class: true });
			var span1_nodes = children(span1);
			t8 = claim_text(span1_nodes, /*artist*/ ctx[0]);
			span1_nodes.forEach(detach_dev);
			li1_nodes.forEach(detach_dev);
			t9 = claim_space(ul1_nodes);
			li2 = claim_element(ul1_nodes, "LI", { class: true });
			var li2_nodes = children(li2);
			span2 = claim_element(li2_nodes, "SPAN", {});
			var span2_nodes = children(span2);
			t10 = claim_text(span2_nodes, "Albums:");
			span2_nodes.forEach(detach_dev);
			span3 = claim_element(li2_nodes, "SPAN", { id: true, class: true });
			var span3_nodes = children(span3);
			t11 = claim_text(span3_nodes, /*albums*/ ctx[1]);
			span3_nodes.forEach(detach_dev);
			li2_nodes.forEach(detach_dev);
			t12 = claim_space(ul1_nodes);
			li3 = claim_element(ul1_nodes, "LI", { class: true });
			var li3_nodes = children(li3);
			span4 = claim_element(li3_nodes, "SPAN", {});
			var span4_nodes = children(span4);
			t13 = claim_text(span4_nodes, "Songs:");
			span4_nodes.forEach(detach_dev);
			span5 = claim_element(li3_nodes, "SPAN", { id: true, class: true });
			var span5_nodes = children(span5);
			t14 = claim_text(span5_nodes, /*mp3*/ ctx[2]);
			span5_nodes.forEach(detach_dev);
			li3_nodes.forEach(detach_dev);
			ul1_nodes.forEach(detach_dev);
			t15 = claim_space(nodes);
			ul2 = claim_element(nodes, "UL", { class: true });
			var ul2_nodes = children(ul2);
			if_block0.l(ul2_nodes);
			t16 = claim_space(ul2_nodes);
			if_block1.l(ul2_nodes);
			ul2_nodes.forEach(detach_dev);
			t17 = claim_space(nodes);
			nav = claim_element(nodes, "NAV", {});
			var nav_nodes = children(nav);
			if (if_block2) if_block2.l(nav_nodes);
			t18 = claim_space(nav_nodes);
			if (if_block3) if_block3.l(nav_nodes);
			nav_nodes.forEach(detach_dev);
			t19 = claim_space(nodes);
			iframe0 = claim_element(nodes, "IFRAME", { src: true, class: true });
			children(iframe0).forEach(detach_dev);
			t20 = claim_space(nodes);
			iframe1 = claim_element(nodes, "IFRAME", { src: true, class: true });
			children(iframe1).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "AmpVel";
			attr_dev(a, "href", "http://192.168.0.42:4566/");
			add_location(a, file, 83, 5, 1878);
			attr_dev(li0, "class", "svelte-1pyv317");
			add_location(li0, file, 83, 1, 1874);
			attr_dev(ul0, "class", "svelte-1pyv317");
			add_location(ul0, file, 82, 0, 1868);
			attr_dev(img, "alt", "Success Kid");
			if (img.src !== (img_src_value = /*NASA*/ ctx[3])) attr_dev(img, "src", img_src_value);
			attr_dev(img, "class", "svelte-1pyv317");
			add_location(img, file, 88, 1, 1950);
			add_location(figcaption, file, 89, 1, 1986);
			attr_dev(figure, "class", "svelte-1pyv317");
			add_location(figure, file, 87, 0, 1940);
			add_location(span0, file, 93, 5, 2052);
			attr_dev(span1, "id", "artspan");
			attr_dev(span1, "class", "svelte-1pyv317");
			add_location(span1, file, 93, 27, 2074);
			attr_dev(li1, "class", "svelte-1pyv317");
			add_location(li1, file, 93, 1, 2048);
			add_location(span2, file, 94, 5, 2119);
			attr_dev(span3, "id", "artspan");
			attr_dev(span3, "class", "svelte-1pyv317");
			add_location(span3, file, 94, 25, 2139);
			attr_dev(li2, "class", "svelte-1pyv317");
			add_location(li2, file, 94, 1, 2115);
			add_location(span4, file, 95, 5, 2184);
			attr_dev(span5, "id", "artspan");
			attr_dev(span5, "class", "svelte-1pyv317");
			add_location(span5, file, 95, 24, 2203);
			attr_dev(li3, "class", "svelte-1pyv317");
			add_location(li3, file, 95, 1, 2180);
			attr_dev(ul1, "class", "svelte-1pyv317");
			add_location(ul1, file, 92, 0, 2042);
			attr_dev(ul2, "class", "svelte-1pyv317");
			add_location(ul2, file, 98, 0, 2247);
			add_location(nav, file, 112, 0, 2663);
			if (iframe0.src !== (iframe0_src_value = "https://art19.com/shows/cbs-evening-news/embed\\")) attr_dev(iframe0, "src", iframe0_src_value);
			attr_dev(iframe0, "class", "svelte-1pyv317");
			add_location(iframe0, file, 121, 0, 2859);
			if (iframe1.src !== (iframe1_src_value = "https://art19.com/shows/cbs-this-morning/embed\\")) attr_dev(iframe1, "src", iframe1_src_value);
			attr_dev(iframe1, "class", "svelte-1pyv317");
			add_location(iframe1, file, 123, 0, 2932);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, ul0, anchor);
			append_dev(ul0, li0);
			append_dev(li0, a);
			append_dev(a, t1);
			insert_dev(target, t2, anchor);
			insert_dev(target, figure, anchor);
			append_dev(figure, img);
			append_dev(figure, t3);
			append_dev(figure, figcaption);
			append_dev(figcaption, t4);
			insert_dev(target, t5, anchor);
			insert_dev(target, ul1, anchor);
			append_dev(ul1, li1);
			append_dev(li1, span0);
			append_dev(span0, t6);
			append_dev(li1, t7);
			append_dev(li1, span1);
			append_dev(span1, t8);
			append_dev(ul1, t9);
			append_dev(ul1, li2);
			append_dev(li2, span2);
			append_dev(span2, t10);
			append_dev(li2, span3);
			append_dev(span3, t11);
			append_dev(ul1, t12);
			append_dev(ul1, li3);
			append_dev(li3, span4);
			append_dev(span4, t13);
			append_dev(li3, span5);
			append_dev(span5, t14);
			insert_dev(target, t15, anchor);
			insert_dev(target, ul2, anchor);
			if_block0.m(ul2, null);
			append_dev(ul2, t16);
			if_block1.m(ul2, null);
			insert_dev(target, t17, anchor);
			insert_dev(target, nav, anchor);
			if (if_block2) if_block2.m(nav, null);
			append_dev(nav, t18);
			if (if_block3) if_block3.m(nav, null);
			insert_dev(target, t19, anchor);
			insert_dev(target, iframe0, anchor);
			insert_dev(target, t20, anchor);
			insert_dev(target, iframe1, anchor);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*NASA*/ 8 && img.src !== (img_src_value = /*NASA*/ ctx[3])) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty & /*artist*/ 1) set_data_dev(t8, /*artist*/ ctx[0]);
			if (dirty & /*albums*/ 2) set_data_dev(t11, /*albums*/ ctx[1]);
			if (dirty & /*mp3*/ 4) set_data_dev(t14, /*mp3*/ ctx[2]);

			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block0) {
				if_block0.p(ctx, dirty);
			} else {
				if_block0.d(1);
				if_block0 = current_block_type(ctx);

				if (if_block0) {
					if_block0.c();
					if_block0.m(ul2, t16);
				}
			}

			if (current_block_type_1 === (current_block_type_1 = select_block_type_1(ctx)) && if_block1) {
				if_block1.p(ctx, dirty);
			} else {
				if_block1.d(1);
				if_block1 = current_block_type_1(ctx);

				if (if_block1) {
					if_block1.c();
					if_block1.m(ul2, null);
				}
			}

			if (/*movcount*/ ctx[4] < 1) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block_1(ctx);
					if_block2.c();
					if_block2.m(nav, t18);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (/*tvcount*/ ctx[5] < 1) {
				if (if_block3) {
					if_block3.p(ctx, dirty);
				} else {
					if_block3 = create_if_block(ctx);
					if_block3.c();
					if_block3.m(nav, null);
				}
			} else if (if_block3) {
				if_block3.d(1);
				if_block3 = null;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(ul0);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(figure);
			if (detaching) detach_dev(t5);
			if (detaching) detach_dev(ul1);
			if (detaching) detach_dev(t15);
			if (detaching) detach_dev(ul2);
			if_block0.d();
			if_block1.d();
			if (detaching) detach_dev(t17);
			if (detaching) detach_dev(nav);
			if (if_block2) if_block2.d();
			if (if_block3) if_block3.d();
			if (detaching) detach_dev(t19);
			if (detaching) detach_dev(iframe0);
			if (detaching) detach_dev(t20);
			if (detaching) detach_dev(iframe1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

async function getMovUpdate() {
	await fetch(`http://192.168.0.42:8888/Update`, { mode: "cors", method: "GET" }).then(r => r.json()).then(data => {
		console.log(data);
	});
}

async function getTVUpdate() {
	await fetch(`http://192.168.0.42:9999/Update`, { mode: "cors", method: "GET" }).then(r => r.json()).then(data => {
		console.log(data);
	});
}

function instance($$self, $$props, $$invalidate) {
	let STATS;
	let artist;
	let albums;
	let mp3;

	onMount(async () => {
		fetch(`http://192.168.0.74:6790/Stats`, { mode: "cors", method: "GET" }).then(r => r.json()).then(data => {
			STATS = data.stats;
			$$invalidate(0, artist = STATS.total_artists);
			$$invalidate(1, albums = STATS.total_albums);
			$$invalidate(2, mp3 = STATS.total_mp3);
		}).catch(err => console.log(err));
	});

	let NASA;

	onMount(async () => {
		fetch(`https://api.nasa.gov/planetary/apod?api_key=qdSdMLU2yc4wXQM9goawTdAA7sngW9KoLkDsVhWG`, { mode: "cors", method: "GET" }).then(r => r.json()).then(data => {
			$$invalidate(3, NASA = data.url);
		}).catch(err => console.log(err));
	});

	let movcount;

	onMount(async () => {
		fetch(`http://192.168.0.42:8888/MovDBCount`, { mode: "cors", method: "GET" }).then(r => r.json()).then(data => {
			console.log(data);
			$$invalidate(4, movcount = data);
		}).catch(err => console.log(err));
	});

	let tvcount;

	onMount(async () => {
		fetch(`http://192.168.0.42:9999/TVDBCount`, { mode: "cors", method: "GET" }).then(r => r.json()).then(data => {
			console.log(data);
			$$invalidate(5, tvcount = data);
		}).catch(err => console.log(err));
	});

	let handleMovUpdateClick = () => {
		let promise = getMovUpdate().catch(err => console.log(err));
	};

	let handleTVUpdateClick = () => {
		let promise = getTVUpdate().catch(err => console.log(err));
	};

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<Routes> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Routes", $$slots, []);

	$$self.$capture_state = () => ({
		onMount,
		STATS,
		artist,
		albums,
		mp3,
		NASA,
		movcount,
		tvcount,
		getMovUpdate,
		handleMovUpdateClick,
		getTVUpdate,
		handleTVUpdateClick
	});

	$$self.$inject_state = $$props => {
		if ("STATS" in $$props) STATS = $$props.STATS;
		if ("artist" in $$props) $$invalidate(0, artist = $$props.artist);
		if ("albums" in $$props) $$invalidate(1, albums = $$props.albums);
		if ("mp3" in $$props) $$invalidate(2, mp3 = $$props.mp3);
		if ("NASA" in $$props) $$invalidate(3, NASA = $$props.NASA);
		if ("movcount" in $$props) $$invalidate(4, movcount = $$props.movcount);
		if ("tvcount" in $$props) $$invalidate(5, tvcount = $$props.tvcount);
		if ("handleMovUpdateClick" in $$props) $$invalidate(6, handleMovUpdateClick = $$props.handleMovUpdateClick);
		if ("handleTVUpdateClick" in $$props) $$invalidate(7, handleTVUpdateClick = $$props.handleTVUpdateClick);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		artist,
		albums,
		mp3,
		NASA,
		movcount,
		tvcount,
		handleMovUpdateClick,
		handleTVUpdateClick
	];
}

class Routes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Routes",
			options,
			id: create_fragment.name
		});
	}
}

export default Routes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
