body{background-color:black}main.svelte-sq9ub{position:relative;max-width:56em;background-color:white;padding:2em;margin:0 auto;box-sizing:border-box;background-color:pink}nav.svelte-sq9ub{text-align:center}audio.svelte-sq9ub{width:100%;margin-top:7px}button.svelte-sq9ub{background-color:black;color:gold;border:none;width:25%}
h1.svelte-8od9u6,p.svelte-8od9u6{margin:0 auto}h1.svelte-8od9u6{font-size:2.8em;font-weight:700;margin:0 0 0.5em 0}p.svelte-8od9u6{margin:1em auto}@media(min-width: 480px){h1.svelte-8od9u6{font-size:4em}}
iframe.svelte-1pyv317{width:720px;height:505px;border:0 none}#MovSetup1.svelte-1pyv317{padding:7px;color:red}#MovSetup2.svelte-1pyv317{padding:7px;color:black}#TVSetup1.svelte-1pyv317{padding:7px;color:red}#TVSetup2.svelte-1pyv317{padding:7px;color:black}#artspan.svelte-1pyv317{color:blue;margin-left:10px}ul.svelte-1pyv317{list-style-type:none;text-align:center}li.svelte-1pyv317{display:inline;padding-left:20px;padding-right:20px;color:black}figure.svelte-1pyv317{text-align:center;margin:0 auto}figure.svelte-1pyv317{margin:0 0 1em 0}img.svelte-1pyv317{width:100%;max-width:400px;margin:0 0 1em 0}button.svelte-1pyv317{width:49%}
.bar.svelte-33flk0{background-color:tomato;border:black;border-style:solid;border-radius:15px;text-align:center;list-style-type:none;width:100%;margin-top:20px}
#vid2.svelte-calnre{text-align:center}video.svelte-calnre{width:85%}
#pad.svelte-a1wug1{margin-bottom:100px}
lable.svelte-1hvc1od,input.svelte-1hvc1od{margin-bottom:25px}video.svelte-1hvc1od{width:85%}div#vid1.svelte-1hvc1od{text-align:center}
nav.svelte-aiqo7t{border-bottom:1px solid rgba(255,62,0,0.1);font-weight:300;padding:0 1em}ul.svelte-aiqo7t{margin:0;padding:0}ul.svelte-aiqo7t::after{content:'';display:block;clear:both}li.svelte-aiqo7t{display:block;float:left}a.svelte-aiqo7t{text-decoration:none;padding:1em 0.5em;display:block;color:white}
nav.svelte-hk3op{margin-bottom:10px}ul.svelte-hk3op{list-style-type:none}
button.svelte-1fzjfwg{background-color:lawngreen;border-radius:7px;border-color:black;padding:7px;width:24%;color:black}
button.svelte-rppcvz{float:right;margin-right:25px}.card.svelte-rppcvz{box-shadow:0 4px 8px 0 rgba(0,0,0,0.2);transition:0.3s;width:100%;margin-top:20px;margin-bottom:20px;background-color:yellowgreen;border:black;border-style:solid;border-radius:15px}.card.svelte-rppcvz:hover{box-shadow:0 8px 16px 0 rgba(0,0,0,0.2)}.container.svelte-rppcvz{padding-top:20px;padding-right:35px;float:right}img.svelte-rppcvz{padding-top:10px;padding-bottom:4px;padding-left:10px}ul.svelte-rppcvz{background-color:tomato;border:black;border-style:solid;border-radius:15px;list-style-type:none}li.svelte-rppcvz{padding:10px;width:100%}
nav.svelte-156xawh{text-align:center}img.svelte-156xawh{width:130px;height:195px;padding:1px}
ul.svelte-1dvefsq{background-color:tomato;border:black;border-style:solid;border-radius:15px;text-align:center;list-style-type:none;width:95%}li.svelte-1dvefsq{color:black}
nav.svelte-14m8txd{text-align:center}
ul#bobo.svelte-1enwpj0::after{content:'';display:block;clear:both}img.svelte-1enwpj0{text-align:center}ul#bobo.svelte-1enwpj0{display:inline;list-style-type:none}button.playadd.svelte-1enwpj0{margin-bottom:20px}button.play.svelte-1enwpj0{margin-bottom:20px}.playall.svelte-1enwpj0{width:100%;font-size:17px;padding:7px;background-color:lawngreen;border-radius:15px}
#SongsPageButton.svelte-aplvvr{color:black}#SongsPageButton.svelte-aplvvr{border-radius:10px;font-size:17px;padding:7px;width:100%;background-color:lawngreen}.pageUL.svelte-aplvvr{text-align:center;list-style-type:none;font-size:19px}.pageLI.svelte-aplvvr{display:inline;margin:20px}span.svelte-aplvvr{padding-left:17px}
form.svelte-1wja0j{margin-bottom:10px}
ol.svelte-1fl1oc6.svelte-1fl1oc6{list-style:none;margin:0;padding:0}ol.svelte-1fl1oc6 li.svelte-1fl1oc6{margin:0;list-style:decimal outside}.svelte-1fl1oc6.svelte-1fl1oc6{-webkit-tap-highlight-color:rgba(0,0,0,0);-webkit-tap-highlight-color:transparent}.player-wrap.svelte-1fl1oc6.svelte-1fl1oc6{margin:0 0 1em;padding:0;background-color:white}.playlist-wrap.svelte-1fl1oc6.svelte-1fl1oc6{background-color:#222}.playlist-wrap.svelte-1fl1oc6 li.svelte-1fl1oc6{margin:0 0 0 3em;padding:.25em 0 .25em .5em;list-style:decimal outside}
img.svelte-rmqprw{float:right;margin-right:50px}
span.svelte-11aboip{margin-left:20px}ul.svelte-11aboip{list-style:none}li.svelte-11aboip{margin:10px;text-decoration:underline}a.svelte-11aboip{color:blue}
span.svelte-13j0val{margin-left:20px}ul.svelte-13j0val{list-style:none}li.svelte-13j0val{margin:10px;text-decoration:underline}a.svelte-13j0val{color:blue}
nav.svelte-1kwrqte{position:fixed;left:0;bottom:0;width:100%;background-color:yellowgreen;color:white;text-align:center}ul.svelte-1kwrqte{list-style-type:none}li.svelte-1kwrqte{display:inline;margin:20px}span.svelte-1kwrqte{color:black
	}audio.svelte-1kwrqte{width:50%;padding:7px}
span.svelte-nhp1xt{margin-left:20px}ul.svelte-nhp1xt{list-style:none}li.svelte-nhp1xt{margin:10px;text-decoration:underline}a.svelte-nhp1xt{color:blue}
span.svelte-nhp1xt{margin-left:20px}ul.svelte-nhp1xt{list-style:none}li.svelte-nhp1xt{margin:10px;text-decoration:underline}a.svelte-nhp1xt{color:blue}
span.svelte-10dqnzh{margin-left:20px}ul.svelte-10dqnzh{list-style:none}li.svelte-10dqnzh{margin:10px;text-decoration:underline}a.svelte-10dqnzh{color:blue}
span.svelte-1omye9l{margin-left:20px}ul.svelte-1omye9l{list-style:none}li.svelte-1omye9l{margin:10px;text-decoration:underline}a.svelte-1omye9l{color:blue}
span.svelte-10dqnzh{margin-left:20px}ul.svelte-10dqnzh{list-style:none}li.svelte-10dqnzh{margin:10px;text-decoration:underline}a.svelte-10dqnzh{color:blue}
button#delete.svelte-1le1i94{background-color:red;color:white;border:none;padding:7px}
span.svelte-nhp1xt{margin-left:20px}ul.svelte-nhp1xt{list-style:none}li.svelte-nhp1xt{margin:10px;text-decoration:underline}a.svelte-nhp1xt{color:blue}
ul.svelte-1bwgj62{list-style-type:none}button#removeBtn.svelte-1bwgj62{float:right}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */