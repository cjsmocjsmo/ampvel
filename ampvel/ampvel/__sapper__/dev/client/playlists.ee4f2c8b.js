import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, g as globals, e as element, p as space, t as text, c as claim_element, a as children, r as claim_space, b as claim_text, f as detach_dev, h as attr_dev, j as add_location, k as insert_dev, l as append_dev, m as listen_dev, w as prevent_default, n as noop, x as empty, y as validate_each_argument, u as set_data_dev, z as destroy_each, o as onMount, A as create_component, B as claim_component, C as mount_component, D as transition_in, E as transition_out, F as destroy_component, G as prop_dev, q as query_selector_all } from './client.3aded818.js';
import { p as playliststore, a as playlistidstore } from './PlaylistListStore.6445c07a.js';

/* src/components/PlaylistComps/AddRandomPlaylist.svelte generated by Svelte v3.24.0 */

const { console: console_1 } = globals;
const file = "src/components/PlaylistComps/AddRandomPlaylist.svelte";

// (37:0) {#if radvisible}
function create_if_block(ctx) {
	let form;
	let input0;
	let t0;
	let label0;
	let t1;
	let br0;
	let t2;
	let input1;
	let t3;
	let label1;
	let t4;
	let br1;
	let t5;
	let input2;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			form = element("form");
			input0 = element("input");
			t0 = space();
			label0 = element("label");
			t1 = text("Playlist Name");
			br0 = element("br");
			t2 = space();
			input1 = element("input");
			t3 = space();
			label1 = element("label");
			t4 = text("Number Of Songs");
			br1 = element("br");
			t5 = space();
			input2 = element("input");
			this.h();
		},
		l: function claim(nodes) {
			form = claim_element(nodes, "FORM", { class: true });
			var form_nodes = children(form);
			input0 = claim_element(form_nodes, "INPUT", { id: true, name: true, type: true });
			t0 = claim_space(form_nodes);
			label0 = claim_element(form_nodes, "LABEL", {});
			var label0_nodes = children(label0);
			t1 = claim_text(label0_nodes, "Playlist Name");
			label0_nodes.forEach(detach_dev);
			br0 = claim_element(form_nodes, "BR", {});
			t2 = claim_space(form_nodes);
			input1 = claim_element(form_nodes, "INPUT", { id: true, name: true, type: true });
			t3 = claim_space(form_nodes);
			label1 = claim_element(form_nodes, "LABEL", {});
			var label1_nodes = children(label1);
			t4 = claim_text(label1_nodes, "Number Of Songs");
			label1_nodes.forEach(detach_dev);
			br1 = claim_element(form_nodes, "BR", {});
			t5 = claim_space(form_nodes);
			input2 = claim_element(form_nodes, "INPUT", { type: true, value: true });
			form_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(input0, "id", "plname");
			attr_dev(input0, "name", "plname");
			attr_dev(input0, "type", "text");
			add_location(input0, file, 38, 8, 1031);
			add_location(label0, file, 39, 8, 1087);
			add_location(br0, file, 39, 36, 1115);
			attr_dev(input1, "id", "plcount");
			attr_dev(input1, "name", "plcount");
			attr_dev(input1, "type", "text");
			add_location(input1, file, 40, 8, 1130);
			add_location(label1, file, 41, 8, 1188);
			add_location(br1, file, 41, 38, 1218);
			attr_dev(input2, "type", "submit");
			input2.value = "Add";
			add_location(input2, file, 42, 8, 1233);
			attr_dev(form, "class", "svelte-1wja0j");
			add_location(form, file, 37, 4, 974);
		},
		m: function mount(target, anchor) {
			insert_dev(target, form, anchor);
			append_dev(form, input0);
			append_dev(form, t0);
			append_dev(form, label0);
			append_dev(label0, t1);
			append_dev(form, br0);
			append_dev(form, t2);
			append_dev(form, input1);
			append_dev(form, t3);
			append_dev(form, label1);
			append_dev(label1, t4);
			append_dev(form, br1);
			append_dev(form, t5);
			append_dev(form, input2);

			if (!mounted) {
				dispose = listen_dev(form, "submit", prevent_default(/*handleSubmit*/ ctx[2]), false, true, false);
				mounted = true;
			}
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(form);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(37:0) {#if radvisible}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let button;
	let t0;
	let t1;
	let if_block_anchor;
	let mounted;
	let dispose;
	let if_block = /*radvisible*/ ctx[0] && create_if_block(ctx);

	const block = {
		c: function create() {
			button = element("button");
			t0 = text("Add Random Playlist");
			t1 = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			button = claim_element(nodes, "BUTTON", {});
			var button_nodes = children(button);
			t0 = claim_text(button_nodes, "Add Random Playlist");
			button_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
			this.h();
		},
		h: function hydrate() {
			add_location(button, file, 34, 0, 895);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			append_dev(button, t0);
			insert_dev(target, t1, anchor);
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);

			if (!mounted) {
				dispose = listen_dev(button, "click", /*randvis*/ ctx[1], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (/*radvisible*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			if (detaching) detach_dev(t1);
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let radvisible = false;

	let randvis = () => {
		if (radvisible) {
			$$invalidate(0, radvisible = false);
		} else {
			$$invalidate(0, radvisible = true);
		}
	};

	let plname;
	let plcount;
	let playlists;

	async function handleSubmit(event) {
		$$invalidate(0, radvisible = false);
		plname = event.target.plname.value;
		plcount = event.target.plcount.value;
		let promise = getAddRandomPlaylist().catch(err => console.log(err));
	}

	async function getAddRandomPlaylist() {
		await fetch(`http://192.168.0.31:6789/AddRandomPlaylist?playlistname=${plname}&playlistcount=${plcount}`, { mode: "cors", method: "GET" }).then(r => r.json()).then(data => {
			playlists = data.plists;
			playliststore.set(playlists);
		}).catch(err => console.log(err));
	}

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<AddRandomPlaylist> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("AddRandomPlaylist", $$slots, []);

	$$self.$capture_state = () => ({
		playliststore,
		radvisible,
		randvis,
		plname,
		plcount,
		playlists,
		handleSubmit,
		getAddRandomPlaylist
	});

	$$self.$inject_state = $$props => {
		if ("radvisible" in $$props) $$invalidate(0, radvisible = $$props.radvisible);
		if ("randvis" in $$props) $$invalidate(1, randvis = $$props.randvis);
		if ("plname" in $$props) plname = $$props.plname;
		if ("plcount" in $$props) plcount = $$props.plcount;
		if ("playlists" in $$props) playlists = $$props.playlists;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [radvisible, randvis, handleSubmit];
}

class AddRandomPlaylist extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "AddRandomPlaylist",
			options,
			id: create_fragment.name
		});
	}
}

/* src/components/PlaylistComps/AddEmptyPlaylist.svelte generated by Svelte v3.24.0 */

const { console: console_1$1 } = globals;
const file$1 = "src/components/PlaylistComps/AddEmptyPlaylist.svelte";

// (34:0) {#if visible}
function create_if_block$1(ctx) {
	let form;
	let input0;
	let t0;
	let label;
	let t1;
	let br;
	let t2;
	let input1;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			form = element("form");
			input0 = element("input");
			t0 = space();
			label = element("label");
			t1 = text("Playlist Name");
			br = element("br");
			t2 = space();
			input1 = element("input");
			this.h();
		},
		l: function claim(nodes) {
			form = claim_element(nodes, "FORM", {});
			var form_nodes = children(form);

			input0 = claim_element(form_nodes, "INPUT", {
				id: true,
				name: true,
				type: true,
				value: true
			});

			t0 = claim_space(form_nodes);
			label = claim_element(form_nodes, "LABEL", {});
			var label_nodes = children(label);
			t1 = claim_text(label_nodes, "Playlist Name");
			label_nodes.forEach(detach_dev);
			br = claim_element(form_nodes, "BR", {});
			t2 = claim_space(form_nodes);
			input1 = claim_element(form_nodes, "INPUT", { type: true, value: true });
			form_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(input0, "id", "plname");
			attr_dev(input0, "name", "plname");
			attr_dev(input0, "type", "text");
			input0.value = "";
			add_location(input0, file$1, 35, 8, 987);
			add_location(label, file$1, 36, 8, 1051);
			add_location(br, file$1, 36, 36, 1079);
			attr_dev(input1, "type", "submit");
			input1.value = "Add";
			add_location(input1, file$1, 37, 8, 1094);
			add_location(form, file$1, 34, 4, 911);
		},
		m: function mount(target, anchor) {
			insert_dev(target, form, anchor);
			append_dev(form, input0);
			append_dev(form, t0);
			append_dev(form, label);
			append_dev(label, t1);
			append_dev(form, br);
			append_dev(form, t2);
			append_dev(form, input1);

			if (!mounted) {
				dispose = listen_dev(form, "submit", prevent_default(/*handleAddPlayListNameToDBSubmit*/ ctx[2]), false, true, false);
				mounted = true;
			}
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(form);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(34:0) {#if visible}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let button;
	let t0;
	let t1;
	let if_block_anchor;
	let mounted;
	let dispose;
	let if_block = /*visible*/ ctx[0] && create_if_block$1(ctx);

	const block = {
		c: function create() {
			button = element("button");
			t0 = text("Add Empty Playlist");
			t1 = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			button = claim_element(nodes, "BUTTON", {});
			var button_nodes = children(button);
			t0 = claim_text(button_nodes, "Add Empty Playlist");
			button_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
			this.h();
		},
		h: function hydrate() {
			add_location(button, file$1, 31, 0, 840);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			append_dev(button, t0);
			insert_dev(target, t1, anchor);
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);

			if (!mounted) {
				dispose = listen_dev(button, "click", /*fuck*/ ctx[1], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (/*visible*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$1(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			if (detaching) detach_dev(t1);
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let visible = false;

	let fuck = () => {
		if (visible) {
			$$invalidate(0, visible = false);
		} else {
			$$invalidate(0, visible = true);
		}
	};

	let newplname;

	async function handleAddPlayListNameToDBSubmit(event) {
		$$invalidate(0, visible = false);
		newplname = event.target.plname.value;
		let promise = getAddPlayListNameToDB().catch(err => console.log(err));
	}

	async function getAddPlayListNameToDB() {
		fetch(`http://192.168.0.31:6789/AddPlayListNameToDB?playlistname=${newplname}`, { mode: "cors", method: "GET" }).then(r => r.json()).then(data => {
			let pname = data.pnames;
			playliststore.set(pname);
		}).catch(err => console.log(err));
	}

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$1.warn(`<AddEmptyPlaylist> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("AddEmptyPlaylist", $$slots, []);

	$$self.$capture_state = () => ({
		text,
		playliststore,
		visible,
		fuck,
		newplname,
		handleAddPlayListNameToDBSubmit,
		getAddPlayListNameToDB
	});

	$$self.$inject_state = $$props => {
		if ("visible" in $$props) $$invalidate(0, visible = $$props.visible);
		if ("fuck" in $$props) $$invalidate(1, fuck = $$props.fuck);
		if ("newplname" in $$props) newplname = $$props.newplname;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [visible, fuck, handleAddPlayListNameToDBSubmit];
}

class AddEmptyPlaylist extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "AddEmptyPlaylist",
			options,
			id: create_fragment$1.name
		});
	}
}

/* src/components/PlaylistComps/DeletePlaylist.svelte generated by Svelte v3.24.0 */

const { console: console_1$2 } = globals;
const file$2 = "src/components/PlaylistComps/DeletePlaylist.svelte";

function create_fragment$2(ctx) {
	let button;
	let t;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			button = element("button");
			t = text("Delete");
			this.h();
		},
		l: function claim(nodes) {
			button = claim_element(nodes, "BUTTON", { id: true, class: true });
			var button_nodes = children(button);
			t = claim_text(button_nodes, "Delete");
			button_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(button, "id", "delete");
			attr_dev(button, "class", "svelte-1le1i94");
			add_location(button, file$2, 18, 0, 520);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			append_dev(button, t);

			if (!mounted) {
				dispose = listen_dev(button, "click", /*deleteClick*/ ctx[0], false, false, false);
				mounted = true;
			}
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let { PLID } = $$props;
	let NPL;

	async function getDeletePlaylistFromDB() {
		fetch(`http://192.168.0.31:6789/DeletePlaylistFromDB?playlistid=${PLID}`, { mode: "cors", method: "GET" }).then(r => r.json()).then(data => {
			NPL = data.npl;
			playliststore.set(NPL);
		});
	}

	let deleteClick = () => {
		let promise = getDeletePlaylistFromDB().catch(err => console.log(err));
	};

	const writable_props = ["PLID"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$2.warn(`<DeletePlaylist> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("DeletePlaylist", $$slots, []);

	$$self.$set = $$props => {
		if ("PLID" in $$props) $$invalidate(1, PLID = $$props.PLID);
	};

	$$self.$capture_state = () => ({
		playliststore,
		PLID,
		NPL,
		getDeletePlaylistFromDB,
		deleteClick
	});

	$$self.$inject_state = $$props => {
		if ("PLID" in $$props) $$invalidate(1, PLID = $$props.PLID);
		if ("NPL" in $$props) NPL = $$props.NPL;
		if ("deleteClick" in $$props) $$invalidate(0, deleteClick = $$props.deleteClick);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [deleteClick, PLID];
}

class DeletePlaylist extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, { PLID: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "DeletePlaylist",
			options,
			id: create_fragment$2.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*PLID*/ ctx[1] === undefined && !("PLID" in props)) {
			console_1$2.warn("<DeletePlaylist> was created without expected prop 'PLID'");
		}
	}

	get PLID() {
		throw new Error("<DeletePlaylist>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set PLID(value) {
		throw new Error("<DeletePlaylist>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/PlaylistComps/LoadPlaylist.svelte generated by Svelte v3.24.0 */

const { console: console_1$3 } = globals;
const file$3 = "src/components/PlaylistComps/LoadPlaylist.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i];
	return child_ctx;
}

// (39:0) {:else}
function create_else_block(ctx) {
	let p;
	let t;

	const block = {
		c: function create() {
			p = element("p");
			t = text("Whoops no Playlist selected");
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			t = claim_text(p_nodes, "Whoops no Playlist selected");
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(p, file$3, 39, 4, 1087);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(39:0) {:else}",
		ctx
	});

	return block;
}

// (30:0) {#if PLID !== ""}
function create_if_block$2(ctx) {
	let each_1_anchor;
	let each_value = /*SONGS*/ ctx[1];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l: function claim(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*SONGS*/ 2) {
				each_value = /*SONGS*/ ctx[1];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$2.name,
		type: "if",
		source: "(30:0) {#if PLID !== \\\"\\\"}",
		ctx
	});

	return block;
}

// (31:4) {#each SONGS as s}
function create_each_block(ctx) {
	let div;
	let img;
	let img_src_value;
	let t0;
	let p0;
	let t1_value = /*s*/ ctx[4].artist + "";
	let t1;
	let t2;
	let p1;
	let t3_value = /*s*/ ctx[4].album + "";
	let t3;
	let t4;
	let p2;
	let t5_value = /*s*/ ctx[4].name + "";
	let t5;
	let t6;

	const block = {
		c: function create() {
			div = element("div");
			img = element("img");
			t0 = space();
			p0 = element("p");
			t1 = text(t1_value);
			t2 = space();
			p1 = element("p");
			t3 = text(t3_value);
			t4 = space();
			p2 = element("p");
			t5 = text(t5_value);
			t6 = space();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", {});
			var div_nodes = children(div);
			img = claim_element(div_nodes, "IMG", { src: true, alt: true, class: true });
			t0 = claim_space(div_nodes);
			p0 = claim_element(div_nodes, "P", {});
			var p0_nodes = children(p0);
			t1 = claim_text(p0_nodes, t1_value);
			p0_nodes.forEach(detach_dev);
			t2 = claim_space(div_nodes);
			p1 = claim_element(div_nodes, "P", {});
			var p1_nodes = children(p1);
			t3 = claim_text(p1_nodes, t3_value);
			p1_nodes.forEach(detach_dev);
			t4 = claim_space(div_nodes);
			p2 = claim_element(div_nodes, "P", {});
			var p2_nodes = children(p2);
			t5 = claim_text(p2_nodes, t5_value);
			p2_nodes.forEach(detach_dev);
			t6 = claim_space(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = /*s*/ ctx[4].thumbnail)) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "fuck");
			attr_dev(img, "class", "svelte-rmqprw");
			add_location(img, file$3, 32, 12, 925);
			add_location(p0, file$3, 33, 12, 973);
			add_location(p1, file$3, 34, 12, 1003);
			add_location(p2, file$3, 35, 12, 1032);
			add_location(div, file$3, 31, 8, 907);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, img);
			append_dev(div, t0);
			append_dev(div, p0);
			append_dev(p0, t1);
			append_dev(div, t2);
			append_dev(div, p1);
			append_dev(p1, t3);
			append_dev(div, t4);
			append_dev(div, p2);
			append_dev(p2, t5);
			append_dev(div, t6);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*SONGS*/ 2 && img.src !== (img_src_value = /*s*/ ctx[4].thumbnail)) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty & /*SONGS*/ 2 && t1_value !== (t1_value = /*s*/ ctx[4].artist + "")) set_data_dev(t1, t1_value);
			if (dirty & /*SONGS*/ 2 && t3_value !== (t3_value = /*s*/ ctx[4].album + "")) set_data_dev(t3, t3_value);
			if (dirty & /*SONGS*/ 2 && t5_value !== (t5_value = /*s*/ ctx[4].name + "")) set_data_dev(t5, t5_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(31:4) {#each SONGS as s}",
		ctx
	});

	return block;
}

function create_fragment$3(ctx) {
	let button;
	let t0;
	let t1;
	let if_block_anchor;
	let mounted;
	let dispose;

	function select_block_type(ctx, dirty) {
		if (/*PLID*/ ctx[0] !== "") return create_if_block$2;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			button = element("button");
			t0 = text("Load");
			t1 = space();
			if_block.c();
			if_block_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			button = claim_element(nodes, "BUTTON", { id: true });
			var button_nodes = children(button);
			t0 = claim_text(button_nodes, "Load");
			button_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			if_block.l(nodes);
			if_block_anchor = empty();
			this.h();
		},
		h: function hydrate() {
			attr_dev(button, "id", "playlistLoadBtn");
			add_location(button, file$3, 27, 0, 785);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			append_dev(button, t0);
			insert_dev(target, t1, anchor);
			if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);

			if (!mounted) {
				dispose = listen_dev(button, "click", /*handleLoadSubmit*/ ctx[2], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			if (detaching) detach_dev(t1);
			if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$3($$self, $$props, $$invalidate) {
	let { PLID } = $$props;
	let SONGS = [];

	async function getCreatePlayerPlaylist() {
		let addr = `http://192.168.0.31:6789/CreatePlayerPlaylist?playlistid=${PLID}`;
		console.log(addr);

		await fetch(addr, { mode: "cors", method: "GET" }).then(r => r.json()).then(data => {
			$$invalidate(1, SONGS = data.makePL);
			console.log(SONGS[0]);
		}).catch(err => console.log(err));
	}

	// async function handleLoadSubmit(event) {
	async function handleLoadSubmit() {
		// console.log(event.target.SONGS)
		// plname = event.target.plname.value;
		let promise = getCreatePlayerPlaylist().catch(err => console.log(err));

		console.log("this is songs from loadplaylist page");
		console.log(SONGS);
	}

	const writable_props = ["PLID"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$3.warn(`<LoadPlaylist> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("LoadPlaylist", $$slots, []);

	$$self.$set = $$props => {
		if ("PLID" in $$props) $$invalidate(0, PLID = $$props.PLID);
	};

	$$self.$capture_state = () => ({
		PLID,
		SONGS,
		getCreatePlayerPlaylist,
		handleLoadSubmit
	});

	$$self.$inject_state = $$props => {
		if ("PLID" in $$props) $$invalidate(0, PLID = $$props.PLID);
		if ("SONGS" in $$props) $$invalidate(1, SONGS = $$props.SONGS);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [PLID, SONGS, handleLoadSubmit];
}

class LoadPlaylist extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$3, create_fragment$3, safe_not_equal, { PLID: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "LoadPlaylist",
			options,
			id: create_fragment$3.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*PLID*/ ctx[0] === undefined && !("PLID" in props)) {
			console_1$3.warn("<LoadPlaylist> was created without expected prop 'PLID'");
		}
	}

	get PLID() {
		throw new Error("<LoadPlaylist>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set PLID(value) {
		throw new Error("<LoadPlaylist>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/PlaylistComps/EditPlaylist.svelte generated by Svelte v3.24.0 */

const { console: console_1$4 } = globals;
const file$4 = "src/components/PlaylistComps/EditPlaylist.svelte";

function get_each_context$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	return child_ctx;
}

// (38:0) {#if editvisible}
function create_if_block$3(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (/*songlist_count*/ ctx[1] > 1) return create_if_block_1;
		return create_else_block$1;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		d: function destroy(detaching) {
			if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$3.name,
		type: "if",
		source: "(38:0) {#if editvisible}",
		ctx
	});

	return block;
}

// (48:4) {:else}
function create_else_block$1(ctx) {
	let p;
	let t;

	const block = {
		c: function create() {
			p = element("p");
			t = text("Whoops zero songs");
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			t = claim_text(p_nodes, "Whoops zero songs");
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(p, file$4, 48, 8, 1269);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$1.name,
		type: "else",
		source: "(48:4) {:else}",
		ctx
	});

	return block;
}

// (39:4) {#if songlist_count > 1}
function create_if_block_1(ctx) {
	let t0;
	let button;
	let t1;
	let mounted;
	let dispose;
	let each_value = /*songlist*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t0 = space();
			button = element("button");
			t1 = text("Complete");
			this.h();
		},
		l: function claim(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			t0 = claim_space(nodes);
			button = claim_element(nodes, "BUTTON", {});
			var button_nodes = children(button);
			t1 = claim_text(button_nodes, "Complete");
			button_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(button, file$4, 46, 8, 1207);
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, t0, anchor);
			insert_dev(target, button, anchor);
			append_dev(button, t1);

			if (!mounted) {
				dispose = listen_dev(button, "click", /*edvi*/ ctx[4], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*songlist*/ 1) {
				each_value = /*songlist*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$1(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(t0.parentNode, t0);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(button);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(39:4) {#if songlist_count > 1}",
		ctx
	});

	return block;
}

// (40:8) {#each songlist as song}
function create_each_block$1(ctx) {
	let ul;
	let li;
	let p;
	let t0_value = /*song*/ ctx[7][0] + "";
	let t0;
	let button;
	let t1;
	let p_id_value;

	const block = {
		c: function create() {
			ul = element("ul");
			li = element("li");
			p = element("p");
			t0 = text(t0_value);
			button = element("button");
			t1 = text("Remove");
			this.h();
		},
		l: function claim(nodes) {
			ul = claim_element(nodes, "UL", { class: true });
			var ul_nodes = children(ul);
			li = claim_element(ul_nodes, "LI", {});
			var li_nodes = children(li);
			p = claim_element(li_nodes, "P", { id: true });
			var p_nodes = children(p);
			t0 = claim_text(p_nodes, t0_value);
			button = claim_element(p_nodes, "BUTTON", { id: true, class: true });
			var button_nodes = children(button);
			t1 = claim_text(button_nodes, "Remove");
			button_nodes.forEach(detach_dev);
			p_nodes.forEach(detach_dev);
			li_nodes.forEach(detach_dev);
			ul_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(button, "id", "removeBtn");
			attr_dev(button, "class", "svelte-1bwgj62");
			add_location(button, file$4, 42, 45, 1100);
			attr_dev(p, "id", p_id_value = /*song*/ ctx[7][1]);
			add_location(p, file$4, 42, 20, 1075);
			add_location(li, file$4, 41, 16, 1050);
			attr_dev(ul, "class", "svelte-1bwgj62");
			add_location(ul, file$4, 40, 12, 1029);
		},
		m: function mount(target, anchor) {
			insert_dev(target, ul, anchor);
			append_dev(ul, li);
			append_dev(li, p);
			append_dev(p, t0);
			append_dev(p, button);
			append_dev(button, t1);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*songlist*/ 1 && t0_value !== (t0_value = /*song*/ ctx[7][0] + "")) set_data_dev(t0, t0_value);

			if (dirty & /*songlist*/ 1 && p_id_value !== (p_id_value = /*song*/ ctx[7][1])) {
				attr_dev(p, "id", p_id_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(ul);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$1.name,
		type: "each",
		source: "(40:8) {#each songlist as song}",
		ctx
	});

	return block;
}

function create_fragment$4(ctx) {
	let button;
	let t0;
	let t1;
	let if_block_anchor;
	let mounted;
	let dispose;
	let if_block = /*editvisible*/ ctx[2] && create_if_block$3(ctx);

	const block = {
		c: function create() {
			button = element("button");
			t0 = text("Edit");
			t1 = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			button = claim_element(nodes, "BUTTON", {});
			var button_nodes = children(button);
			t0 = claim_text(button_nodes, "Edit");
			button_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
			this.h();
		},
		h: function hydrate() {
			add_location(button, file$4, 36, 0, 869);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			append_dev(button, t0);
			insert_dev(target, t1, anchor);
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);

			if (!mounted) {
				dispose = listen_dev(button, "click", /*handleAllPlaylistSongsFromDBSubmit*/ ctx[3], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (/*editvisible*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$3(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			if (detaching) detach_dev(t1);
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$4.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$4($$self, $$props, $$invalidate) {
	let { PLID } = $$props;

	let handleAllPlaylistSongsFromDBSubmit = () => {
		$$invalidate(2, editvisible = true);
		let promise = getAllPlaylistSongsFromDB().catch(err => console.log(err));
	};

	let songlist;
	let songlist_count;

	async function getAllPlaylistSongsFromDB() {
		fetch(`http://192.168.0.31:6789/AllPlaylistSongsFromDB?playlistid=${PLID}`, { mode: "cors", method: "GET" }).then(r => r.json()).then(data => {
			$$invalidate(0, songlist = data.taz);
			$$invalidate(1, songlist_count = songlist.length);
		}).catch(err => console.log(err));
	}

	let editvisible = true;

	let edvi = () => {
		if (editvisible) {
			$$invalidate(2, editvisible = false);
		} else {
			$$invalidate(2, editvisible = true);
		}
	};

	const writable_props = ["PLID"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$4.warn(`<EditPlaylist> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("EditPlaylist", $$slots, []);

	$$self.$set = $$props => {
		if ("PLID" in $$props) $$invalidate(5, PLID = $$props.PLID);
	};

	$$self.$capture_state = () => ({
		PLID,
		handleAllPlaylistSongsFromDBSubmit,
		songlist,
		songlist_count,
		getAllPlaylistSongsFromDB,
		editvisible,
		edvi
	});

	$$self.$inject_state = $$props => {
		if ("PLID" in $$props) $$invalidate(5, PLID = $$props.PLID);
		if ("handleAllPlaylistSongsFromDBSubmit" in $$props) $$invalidate(3, handleAllPlaylistSongsFromDBSubmit = $$props.handleAllPlaylistSongsFromDBSubmit);
		if ("songlist" in $$props) $$invalidate(0, songlist = $$props.songlist);
		if ("songlist_count" in $$props) $$invalidate(1, songlist_count = $$props.songlist_count);
		if ("editvisible" in $$props) $$invalidate(2, editvisible = $$props.editvisible);
		if ("edvi" in $$props) $$invalidate(4, edvi = $$props.edvi);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		songlist,
		songlist_count,
		editvisible,
		handleAllPlaylistSongsFromDBSubmit,
		edvi,
		PLID
	];
}

class EditPlaylist extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$4, create_fragment$4, safe_not_equal, { PLID: 5 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "EditPlaylist",
			options,
			id: create_fragment$4.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*PLID*/ ctx[5] === undefined && !("PLID" in props)) {
			console_1$4.warn("<EditPlaylist> was created without expected prop 'PLID'");
		}
	}

	get PLID() {
		throw new Error("<EditPlaylist>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set PLID(value) {
		throw new Error("<EditPlaylist>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/PlaylistList.svelte generated by Svelte v3.24.0 */
const file$5 = "src/components/PlaylistList.svelte";

function get_each_context$2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[12] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[12] = list[i];
	return child_ctx;
}

// (62:12) {:else}
function create_else_block_1(ctx) {
	const block = {
		c: noop,
		l: noop,
		m: noop,
		p: noop,
		d: noop
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_1.name,
		type: "else",
		source: "(62:12) {:else}",
		ctx
	});

	return block;
}

// (60:34) 
function create_if_block_3(ctx) {
	let p;
	let t;

	const block = {
		c: function create() {
			p = element("p");
			t = text("Whoops no playlists found");
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			t = claim_text(p_nodes, "Whoops no playlists found");
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(p, file$5, 60, 16, 1888);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(60:34) ",
		ctx
	});

	return block;
}

// (53:12) {#if PLCOUNT > 1}
function create_if_block_2(ctx) {
	let each_1_anchor;
	let each_value_1 = /*PLNAMES*/ ctx[1];
	validate_each_argument(each_value_1);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l: function claim(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*PLNAMES, plid*/ 3) {
				each_value_1 = /*PLNAMES*/ ctx[1];
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(53:12) {#if PLCOUNT > 1}",
		ctx
	});

	return block;
}

// (54:16) {#each PLNAMES as pln}
function create_each_block_1(ctx) {
	let li;
	let label;
	let t0_value = /*pln*/ ctx[12][0] + "";
	let t0;
	let label_for_value;
	let t1;
	let input;
	let input_id_value;
	let input_name_value;
	let input_value_value;
	let t2;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			li = element("li");
			label = element("label");
			t0 = text(t0_value);
			t1 = space();
			input = element("input");
			t2 = space();
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", {});
			var li_nodes = children(li);
			label = claim_element(li_nodes, "LABEL", { for: true });
			var label_nodes = children(label);
			t0 = claim_text(label_nodes, t0_value);
			label_nodes.forEach(detach_dev);
			t1 = claim_space(li_nodes);

			input = claim_element(li_nodes, "INPUT", {
				id: true,
				name: true,
				type: true,
				value: true
			});

			t2 = claim_space(li_nodes);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(label, "for", label_for_value = /*pln*/ ctx[12][1]);
			add_location(label, file$5, 55, 24, 1646);
			attr_dev(input, "id", input_id_value = /*pln*/ ctx[12][1]);
			attr_dev(input, "name", input_name_value = /*pln*/ ctx[12][1]);
			attr_dev(input, "type", "radio");
			input.__value = input_value_value = /*pln*/ ctx[12][1];
			input.value = input.__value;
			/*$$binding_groups*/ ctx[6][0].push(input);
			add_location(input, file$5, 56, 24, 1707);
			add_location(li, file$5, 54, 20, 1617);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, label);
			append_dev(label, t0);
			append_dev(li, t1);
			append_dev(li, input);
			input.checked = input.__value === /*plid*/ ctx[0];
			append_dev(li, t2);

			if (!mounted) {
				dispose = listen_dev(input, "change", /*input_change_handler*/ ctx[5]);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*PLNAMES*/ 2 && t0_value !== (t0_value = /*pln*/ ctx[12][0] + "")) set_data_dev(t0, t0_value);

			if (dirty & /*PLNAMES*/ 2 && label_for_value !== (label_for_value = /*pln*/ ctx[12][1])) {
				attr_dev(label, "for", label_for_value);
			}

			if (dirty & /*PLNAMES*/ 2 && input_id_value !== (input_id_value = /*pln*/ ctx[12][1])) {
				attr_dev(input, "id", input_id_value);
			}

			if (dirty & /*PLNAMES*/ 2 && input_name_value !== (input_name_value = /*pln*/ ctx[12][1])) {
				attr_dev(input, "name", input_name_value);
			}

			if (dirty & /*PLNAMES*/ 2 && input_value_value !== (input_value_value = /*pln*/ ctx[12][1])) {
				prop_dev(input, "__value", input_value_value);
				input.value = input.__value;
			}

			if (dirty & /*plid*/ 1) {
				input.checked = input.__value === /*plid*/ ctx[0];
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
			/*$$binding_groups*/ ctx[6][0].splice(/*$$binding_groups*/ ctx[6][0].indexOf(input), 1);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(54:16) {#each PLNAMES as pln}",
		ctx
	});

	return block;
}

// (76:12) {:else}
function create_else_block$2(ctx) {
	let p;
	let t0;
	let t1_value = /*PPLNAMES*/ ctx[3][0]["playlistid"] + "";
	let t1;
	let t2;
	let label;
	let t3_value = /*PPLNAMES*/ ctx[3][0]["playlistname"] + "";
	let t3;
	let label_for_value;
	let t4;
	let input;
	let input_id_value;
	let input_name_value;
	let input_value_value;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			p = element("p");
			t0 = text("this is pplnames: ");
			t1 = text(t1_value);
			t2 = space();
			label = element("label");
			t3 = text(t3_value);
			t4 = space();
			input = element("input");
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			t0 = claim_text(p_nodes, "this is pplnames: ");
			t1 = claim_text(p_nodes, t1_value);
			p_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			label = claim_element(nodes, "LABEL", { for: true });
			var label_nodes = children(label);
			t3 = claim_text(label_nodes, t3_value);
			label_nodes.forEach(detach_dev);
			t4 = claim_space(nodes);

			input = claim_element(nodes, "INPUT", {
				id: true,
				name: true,
				type: true,
				value: true
			});

			this.h();
		},
		h: function hydrate() {
			add_location(p, file$5, 76, 12, 2678);
			attr_dev(label, "for", label_for_value = /*PPLNAMES*/ ctx[3][0]["playlistid"]);
			add_location(label, file$5, 77, 16, 2747);
			attr_dev(input, "id", input_id_value = /*PPLNAMES*/ ctx[3][0]["playlistid"]);
			attr_dev(input, "name", input_name_value = /*PPLNAMES*/ ctx[3][0]["playlistname"]);
			attr_dev(input, "type", "radio");
			input.__value = input_value_value = /*PPLNAMES*/ ctx[3][0]["playlistname"];
			input.value = input.__value;
			/*$$binding_groups*/ ctx[6][0].push(input);
			add_location(input, file$5, 78, 16, 2840);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t0);
			append_dev(p, t1);
			insert_dev(target, t2, anchor);
			insert_dev(target, label, anchor);
			append_dev(label, t3);
			insert_dev(target, t4, anchor);
			insert_dev(target, input, anchor);
			input.checked = input.__value === /*plid*/ ctx[0];

			if (!mounted) {
				dispose = listen_dev(input, "change", /*input_change_handler_2*/ ctx[8]);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*PPLNAMES*/ 8 && t1_value !== (t1_value = /*PPLNAMES*/ ctx[3][0]["playlistid"] + "")) set_data_dev(t1, t1_value);
			if (dirty & /*PPLNAMES*/ 8 && t3_value !== (t3_value = /*PPLNAMES*/ ctx[3][0]["playlistname"] + "")) set_data_dev(t3, t3_value);

			if (dirty & /*PPLNAMES*/ 8 && label_for_value !== (label_for_value = /*PPLNAMES*/ ctx[3][0]["playlistid"])) {
				attr_dev(label, "for", label_for_value);
			}

			if (dirty & /*PPLNAMES*/ 8 && input_id_value !== (input_id_value = /*PPLNAMES*/ ctx[3][0]["playlistid"])) {
				attr_dev(input, "id", input_id_value);
			}

			if (dirty & /*PPLNAMES*/ 8 && input_name_value !== (input_name_value = /*PPLNAMES*/ ctx[3][0]["playlistname"])) {
				attr_dev(input, "name", input_name_value);
			}

			if (dirty & /*PPLNAMES*/ 8 && input_value_value !== (input_value_value = /*PPLNAMES*/ ctx[3][0]["playlistname"])) {
				prop_dev(input, "__value", input_value_value);
				input.value = input.__value;
			}

			if (dirty & /*plid*/ 1) {
				input.checked = input.__value === /*plid*/ ctx[0];
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(label);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(input);
			/*$$binding_groups*/ ctx[6][0].splice(/*$$binding_groups*/ ctx[6][0].indexOf(input), 1);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$2.name,
		type: "else",
		source: "(76:12) {:else}",
		ctx
	});

	return block;
}

// (74:35) 
function create_if_block_1$1(ctx) {
	let p;
	let t;

	const block = {
		c: function create() {
			p = element("p");
			t = text("Whoops no playlists found");
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			t = claim_text(p_nodes, "Whoops no playlists found");
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(p, file$5, 74, 16, 2613);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$1.name,
		type: "if",
		source: "(74:35) ",
		ctx
	});

	return block;
}

// (67:12) {#if PPLCOUNT > 1}
function create_if_block$4(ctx) {
	let each_1_anchor;
	let each_value = /*PPLNAMES*/ ctx[3];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l: function claim(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*PPLNAMES, plid*/ 9) {
				each_value = /*PPLNAMES*/ ctx[3];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$2(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$2(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$4.name,
		type: "if",
		source: "(67:12) {#if PPLCOUNT > 1}",
		ctx
	});

	return block;
}

// (68:16) {#each PPLNAMES as pln}
function create_each_block$2(ctx) {
	let li;
	let label;
	let t0_value = /*pln*/ ctx[12]["playlistname"] + "";
	let t0;
	let label_for_value;
	let t1;
	let input;
	let input_id_value;
	let input_name_value;
	let input_value_value;
	let t2;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			li = element("li");
			label = element("label");
			t0 = text(t0_value);
			t1 = space();
			input = element("input");
			t2 = space();
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", {});
			var li_nodes = children(li);
			label = claim_element(li_nodes, "LABEL", { for: true });
			var label_nodes = children(label);
			t0 = claim_text(label_nodes, t0_value);
			label_nodes.forEach(detach_dev);
			t1 = claim_space(li_nodes);

			input = claim_element(li_nodes, "INPUT", {
				id: true,
				name: true,
				type: true,
				value: true
			});

			t2 = claim_space(li_nodes);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(label, "for", label_for_value = /*pln*/ ctx[12]["playlistid"]);
			add_location(label, file$5, 69, 24, 2312);
			attr_dev(input, "id", input_id_value = /*pln*/ ctx[12]["playlistid"]);
			attr_dev(input, "name", input_name_value = /*pln*/ ctx[12]["playlistid"]);
			attr_dev(input, "type", "radio");
			input.__value = input_value_value = /*pln*/ ctx[12]["playlistid"];
			input.value = input.__value;
			/*$$binding_groups*/ ctx[6][0].push(input);
			add_location(input, file$5, 70, 24, 2397);
			add_location(li, file$5, 68, 20, 2283);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, label);
			append_dev(label, t0);
			append_dev(li, t1);
			append_dev(li, input);
			input.checked = input.__value === /*plid*/ ctx[0];
			append_dev(li, t2);

			if (!mounted) {
				dispose = listen_dev(input, "change", /*input_change_handler_1*/ ctx[7]);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*PPLNAMES*/ 8 && t0_value !== (t0_value = /*pln*/ ctx[12]["playlistname"] + "")) set_data_dev(t0, t0_value);

			if (dirty & /*PPLNAMES*/ 8 && label_for_value !== (label_for_value = /*pln*/ ctx[12]["playlistid"])) {
				attr_dev(label, "for", label_for_value);
			}

			if (dirty & /*PPLNAMES*/ 8 && input_id_value !== (input_id_value = /*pln*/ ctx[12]["playlistid"])) {
				attr_dev(input, "id", input_id_value);
			}

			if (dirty & /*PPLNAMES*/ 8 && input_name_value !== (input_name_value = /*pln*/ ctx[12]["playlistid"])) {
				attr_dev(input, "name", input_name_value);
			}

			if (dirty & /*PPLNAMES*/ 8 && input_value_value !== (input_value_value = /*pln*/ ctx[12]["playlistid"])) {
				prop_dev(input, "__value", input_value_value);
				input.value = input.__value;
			}

			if (dirty & /*plid*/ 1) {
				input.checked = input.__value === /*plid*/ ctx[0];
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
			/*$$binding_groups*/ ctx[6][0].splice(/*$$binding_groups*/ ctx[6][0].indexOf(input), 1);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$2.name,
		type: "each",
		source: "(68:16) {#each PPLNAMES as pln}",
		ctx
	});

	return block;
}

function create_fragment$5(ctx) {
	let div;
	let p;
	let t0;
	let t1;
	let t2;
	let form;
	let ul;
	let t3;
	let t4;
	let nav;
	let loadplaylist;
	let t5;
	let deleteplaylist;
	let t6;
	let editplaylist;
	let current;

	function select_block_type(ctx, dirty) {
		if (/*PLCOUNT*/ ctx[2] > 1) return create_if_block_2;
		if (/*PLCOUNT*/ ctx[2] < 1) return create_if_block_3;
		return create_else_block_1;
	}

	let current_block_type = select_block_type(ctx);
	let if_block0 = current_block_type(ctx);

	function select_block_type_1(ctx, dirty) {
		if (/*PPLCOUNT*/ ctx[4] > 1) return create_if_block$4;
		if (/*PPLCOUNT*/ ctx[4] < 1) return create_if_block_1$1;
		return create_else_block$2;
	}

	let current_block_type_1 = select_block_type_1(ctx);
	let if_block1 = current_block_type_1(ctx);

	loadplaylist = new LoadPlaylist({
			props: { PLID: /*plid*/ ctx[0] },
			$$inline: true
		});

	deleteplaylist = new DeletePlaylist({
			props: { PLID: /*plid*/ ctx[0] },
			$$inline: true
		});

	editplaylist = new EditPlaylist({
			props: { PLID: /*plid*/ ctx[0] },
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			p = element("p");
			t0 = text("Currently selected playlist: ");
			t1 = text(/*plid*/ ctx[0]);
			t2 = space();
			form = element("form");
			ul = element("ul");
			if_block0.c();
			t3 = space();
			if_block1.c();
			t4 = space();
			nav = element("nav");
			create_component(loadplaylist.$$.fragment);
			t5 = space();
			create_component(deleteplaylist.$$.fragment);
			t6 = space();
			create_component(editplaylist.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", {});
			var div_nodes = children(div);
			p = claim_element(div_nodes, "P", {});
			var p_nodes = children(p);
			t0 = claim_text(p_nodes, "Currently selected playlist: ");
			t1 = claim_text(p_nodes, /*plid*/ ctx[0]);
			p_nodes.forEach(detach_dev);
			t2 = claim_space(div_nodes);
			form = claim_element(div_nodes, "FORM", {});
			var form_nodes = children(form);
			ul = claim_element(form_nodes, "UL", { class: true });
			var ul_nodes = children(ul);
			if_block0.l(ul_nodes);
			t3 = claim_space(ul_nodes);
			if_block1.l(ul_nodes);
			ul_nodes.forEach(detach_dev);
			form_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			t4 = claim_space(nodes);
			nav = claim_element(nodes, "NAV", { class: true });
			var nav_nodes = children(nav);
			claim_component(loadplaylist.$$.fragment, nav_nodes);
			t5 = claim_space(nav_nodes);
			claim_component(deleteplaylist.$$.fragment, nav_nodes);
			t6 = claim_space(nav_nodes);
			claim_component(editplaylist.$$.fragment, nav_nodes);
			nav_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(p, file$5, 49, 4, 1461);
			attr_dev(ul, "class", "svelte-hk3op");
			add_location(ul, file$5, 51, 8, 1523);
			add_location(form, file$5, 50, 4, 1508);
			add_location(div, file$5, 48, 0, 1451);
			attr_dev(nav, "class", "svelte-hk3op");
			add_location(nav, file$5, 84, 0, 3033);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, p);
			append_dev(p, t0);
			append_dev(p, t1);
			append_dev(div, t2);
			append_dev(div, form);
			append_dev(form, ul);
			if_block0.m(ul, null);
			append_dev(ul, t3);
			if_block1.m(ul, null);
			insert_dev(target, t4, anchor);
			insert_dev(target, nav, anchor);
			mount_component(loadplaylist, nav, null);
			append_dev(nav, t5);
			mount_component(deleteplaylist, nav, null);
			append_dev(nav, t6);
			mount_component(editplaylist, nav, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (!current || dirty & /*plid*/ 1) set_data_dev(t1, /*plid*/ ctx[0]);

			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block0) {
				if_block0.p(ctx, dirty);
			} else {
				if_block0.d(1);
				if_block0 = current_block_type(ctx);

				if (if_block0) {
					if_block0.c();
					if_block0.m(ul, t3);
				}
			}

			if (current_block_type_1 === (current_block_type_1 = select_block_type_1(ctx)) && if_block1) {
				if_block1.p(ctx, dirty);
			} else {
				if_block1.d(1);
				if_block1 = current_block_type_1(ctx);

				if (if_block1) {
					if_block1.c();
					if_block1.m(ul, null);
				}
			}

			const loadplaylist_changes = {};
			if (dirty & /*plid*/ 1) loadplaylist_changes.PLID = /*plid*/ ctx[0];
			loadplaylist.$set(loadplaylist_changes);
			const deleteplaylist_changes = {};
			if (dirty & /*plid*/ 1) deleteplaylist_changes.PLID = /*plid*/ ctx[0];
			deleteplaylist.$set(deleteplaylist_changes);
			const editplaylist_changes = {};
			if (dirty & /*plid*/ 1) editplaylist_changes.PLID = /*plid*/ ctx[0];
			editplaylist.$set(editplaylist_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(loadplaylist.$$.fragment, local);
			transition_in(deleteplaylist.$$.fragment, local);
			transition_in(editplaylist.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(loadplaylist.$$.fragment, local);
			transition_out(deleteplaylist.$$.fragment, local);
			transition_out(editplaylist.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if_block0.d();
			if_block1.d();
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(nav);
			destroy_component(loadplaylist);
			destroy_component(deleteplaylist);
			destroy_component(editplaylist);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$5.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$5($$self, $$props, $$invalidate) {
	let plid = "";
	let PLNAMES;
	let PLCOUNT = 0;

	onMount(async function getAllPlaylists() {
		fetch(`http://192.168.0.31:6789/AllPlaylists`, { mode: "cors", method: "GET" }).then(r => r.json()).then(data => {
			let cunt = [];
			let voo;

			let moo = data.plnames.map(da => {
				voo = { playlistname: da[0], playlistid: da[1] };
				cunt.push(voo);
			});

			$$invalidate(1, PLNAMES = cunt);
			playliststore.set(PLNAMES);
			playlistidstore.set(plid);

			if (PLNAMES != undefined) {
				$$invalidate(2, PLCOUNT = PLNAMES.length);
			}
		});
	});

	let PPLNAMES;
	let PPLCOUNT;

	const unsubscribe = playliststore.subscribe(value => {
		$$invalidate(1, PLNAMES = undefined);
		$$invalidate(2, PLCOUNT = undefined);
		$$invalidate(3, PPLNAMES = value);
		$$invalidate(4, PPLCOUNT = PPLNAMES.length);
	});

	let playlistidstore_value;

	const unsubplid = playlistidstore.subscribe(value => {
		playlistidstore_value = value;
	});

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<PlaylistList> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("PlaylistList", $$slots, []);
	const $$binding_groups = [[]];

	function input_change_handler() {
		plid = this.__value;
		$$invalidate(0, plid);
	}

	function input_change_handler_1() {
		plid = this.__value;
		$$invalidate(0, plid);
	}

	function input_change_handler_2() {
		plid = this.__value;
		$$invalidate(0, plid);
	}

	$$self.$capture_state = () => ({
		DeletePlaylist,
		LoadPlaylist,
		EditPlaylist,
		playliststore,
		playlistidstore,
		onMount,
		plid,
		PLNAMES,
		PLCOUNT,
		PPLNAMES,
		PPLCOUNT,
		unsubscribe,
		playlistidstore_value,
		unsubplid
	});

	$$self.$inject_state = $$props => {
		if ("plid" in $$props) $$invalidate(0, plid = $$props.plid);
		if ("PLNAMES" in $$props) $$invalidate(1, PLNAMES = $$props.PLNAMES);
		if ("PLCOUNT" in $$props) $$invalidate(2, PLCOUNT = $$props.PLCOUNT);
		if ("PPLNAMES" in $$props) $$invalidate(3, PPLNAMES = $$props.PPLNAMES);
		if ("PPLCOUNT" in $$props) $$invalidate(4, PPLCOUNT = $$props.PPLCOUNT);
		if ("playlistidstore_value" in $$props) playlistidstore_value = $$props.playlistidstore_value;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		plid,
		PLNAMES,
		PLCOUNT,
		PPLNAMES,
		PPLCOUNT,
		input_change_handler,
		$$binding_groups,
		input_change_handler_1,
		input_change_handler_2
	];
}

class PlaylistList extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$5, create_fragment$5, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "PlaylistList",
			options,
			id: create_fragment$5.name
		});
	}
}

/* src/components/PlaylistComps/AudioPlayer.svelte generated by Svelte v3.24.0 */

const file$6 = "src/components/PlaylistComps/AudioPlayer.svelte";

function create_fragment$6(ctx) {
	let div0;
	let audio;
	let audio_src_value;
	let t0;
	let div2;
	let div1;
	let ol;
	let li0;
	let a0;
	let t1;
	let t2;
	let li1;
	let a1;
	let t3;

	const block = {
		c: function create() {
			div0 = element("div");
			audio = element("audio");
			t0 = space();
			div2 = element("div");
			div1 = element("div");
			ol = element("ol");
			li0 = element("li");
			a0 = element("a");
			t1 = text("Boo1");
			t2 = space();
			li1 = element("li");
			a1 = element("a");
			t3 = text("Boo2");
			this.h();
		},
		l: function claim(nodes) {
			div0 = claim_element(nodes, "DIV", {
				class: true,
				"data-url": true,
				"data-title": true
			});

			var div0_nodes = children(div0);
			audio = claim_element(div0_nodes, "AUDIO", { src: true, controls: true, class: true });
			children(audio).forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			div2 = claim_element(nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			ol = claim_element(div1_nodes, "OL", { class: true });
			var ol_nodes = children(ol);
			li0 = claim_element(ol_nodes, "LI", { class: true });
			var li0_nodes = children(li0);
			a0 = claim_element(li0_nodes, "A", { href: true, class: true });
			var a0_nodes = children(a0);
			t1 = claim_text(a0_nodes, "Boo1");
			a0_nodes.forEach(detach_dev);
			li0_nodes.forEach(detach_dev);
			t2 = claim_space(ol_nodes);
			li1 = claim_element(ol_nodes, "LI", { class: true });
			var li1_nodes = children(li1);
			a1 = claim_element(li1_nodes, "A", { href: true, class: true });
			var a1_nodes = children(a1);
			t3 = claim_text(a1_nodes, "Boo2");
			a1_nodes.forEach(detach_dev);
			li1_nodes.forEach(detach_dev);
			ol_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (audio.src !== (audio_src_value = "")) attr_dev(audio, "src", audio_src_value);
			audio.controls = true;
			attr_dev(audio, "class", "svelte-1fl1oc6");
			add_location(audio, file$6, 274, 4, 14037);
			attr_dev(div0, "class", "player-wrap svelte-1fl1oc6");
			attr_dev(div0, "data-url", "boo1.mp3");
			attr_dev(div0, "data-title", "Boo1");
			add_location(div0, file$6, 273, 0, 13968);
			attr_dev(a0, "href", "boo1.mp3");
			attr_dev(a0, "class", "svelte-1fl1oc6");
			add_location(a0, file$6, 281, 7, 14128);
			attr_dev(li0, "class", "svelte-1fl1oc6");
			add_location(li0, file$6, 281, 3, 14124);
			attr_dev(a1, "href", "boo2.mp3");
			attr_dev(a1, "class", "svelte-1fl1oc6");
			add_location(a1, file$6, 282, 7, 14168);
			attr_dev(li1, "class", "svelte-1fl1oc6");
			add_location(li1, file$6, 282, 3, 14164);
			attr_dev(ol, "class", "svelte-1fl1oc6");
			add_location(ol, file$6, 280, 2, 14116);
			attr_dev(div1, "class", "playlist-wrap svelte-1fl1oc6");
			add_location(div1, file$6, 279, 1, 14086);
			attr_dev(div2, "class", "svelte-1fl1oc6");
			add_location(div2, file$6, 278, 0, 14079);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			append_dev(div0, audio);
			insert_dev(target, t0, anchor);
			insert_dev(target, div2, anchor);
			append_dev(div2, div1);
			append_dev(div1, ol);
			append_dev(ol, li0);
			append_dev(li0, a0);
			append_dev(a0, t1);
			append_dev(ol, t2);
			append_dev(ol, li1);
			append_dev(li1, a1);
			append_dev(a1, t3);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div0);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$6.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$6($$self, $$props, $$invalidate) {
	let jsPlayer = document.querySelector(".player-wrap");

	if (jsPlayer) {
		jsPlayer = {
			wrap: jsPlayer,
			player: jsPlayer.querySelector("audio"),
			//         player: (jsPlayer.querySelector('audio') || { play: function(){}, pause: function(){} }),
			//         play: (jsPlayer.querySelector('.play') || {}),
			//         pause: (jsPlayer.querySelector('.pause') || {}),
			//         seek: (jsPlayer.querySelector('.seek') || {}),
			//         prev: (jsPlayer.querySelector('.prev') || {}),
			next: jsPlayer.querySelector(".next") || {},
			//         button: (jsPlayer.querySelector('.button') || { style: {} }),
			//         wrapList: (document.querySelector('.playlist-wrap') || {}),
			//         action: (jsPlayer.querySelector('.action') || {}),
			//         title: (jsPlayer.querySelector('.title') || {}),
			//         current: (jsPlayer.querySelector('.current') || {}),
			//         duration: (jsPlayer.querySelector('.duration') || {}),
			trackCount: 0,
			//     seeking: null,
			playing: false,
			tracks: [],
			track: [],
			idx: 0
		};

		//     jsPlayer.playClicked = function jsPlayerPlayClicked(){
		//         jsPlayer.button.style.visibility = 'hidden';
		//         jsPlayer.pause.style.display = 'block';
		//         jsPlayer.play.style.display = 'none';
		//         jsPlayer.playing = true;
		//         jsPlayer.action.innerHTML = 'Now Playing&hellip;';
		//         jsPlayer.player.play();
		//         jsPlayer.updateSeek();
		//     };
		//     jsPlayer.pauseClicked = function jsPlayerPauseClicked(){
		//         jsPlayer.play.style.display = 'block';
		//         jsPlayer.pause.style.display = 'none';
		//         clearTimeout(jsPlayer.seeking);
		//         jsPlayer.playing = false;
		//         jsPlayer.action.innerHTML = 'Paused&hellip;';
		//         jsPlayer.player.pause();
		//     };
		//     jsPlayer.loadPlaylist = function jaPlayerLoadPlaylist(){
		//         jsPlayer.playlist = jsPlayer.wrapList? jsPlayer.wrapList.querySelectorAll('ol > li') : [];
		//         var len = jsPlayer.playlist.length,
		//             tmp, i;
		//         for (i = 0; i < len; i++) {
		//             if (!jsPlayer.playlist[i].dataset) {
		//                 jsPlayer.playlist[i].dataset = {};
		//             }
		//             tmp = jsPlayer.playlist[i].querySelector('a');
		//             if (tmp && !jsPlayer.playlist[i].dataset.idx) {
		//                 jsPlayer.playlist[i].dataset.idx = i + 1;
		//                 jsPlayer.trackCount++;
		//                 jsPlayer.tracks.push({
		//                     "file": tmp.href,
		//                     "name": (tmp.textContent || tmp.innerText).replace(/^\s+|\s+$/g, ''),
		//                     "track": i + 1
		//                 });
		//             }
		//         }
		//     };
		//     jsPlayer.loadTrack = function jsPlayerLoadTrack(idx){
		//         var len = jsPlayer.playlist.length,
		//             i;
		//         for (i=0; i < len; i++) {
		//             if (jsPlayer.playlist[i].classList) {
		//                 if (i === idx) {
		//                     jsPlayer.playlist[i].classList.add('sel');
		//                 } else {
		//                     jsPlayer.playlist[i].classList.remove('sel');
		//                 }
		//             }
		//         }
		//         jsPlayer.title.innerHTML = jsPlayer.tracks[idx].name;
		//         jsPlayer.player.src = jsPlayer.tracks[idx].file + '.mp3';
		//     };
		//     jsPlayer.playTrack = function jsPlayerPlayTrack(idx){
		//         jsPlayer.loadTrack(idx);
		//         jsPlayer.playing = true;
		//         jsPlayer.playClicked();
		//     };
		jsPlayer.init = function jsPlayerInit() {
			var track = jsPlayer.wrap && jsPlayer.wrap.dataset && jsPlayer.wrap.dataset.url
				? jsPlayer.wrap
				: null;
		}; //         if (!!document.createElement('audio').canPlayType('audio/mpeg')) {
		//             if (jsPlayer.wrapList && jsPlayer.wrapList.querySelectorAll('ol > li').length > 0) {
		//                 jsPlayer.loadPlaylist();
		//             } else if (track) {

		//                 jsPlayer.tracks = [{
		//                     "file": track.dataset.url,
		//                     "name": (track.dataset.title || ''),
		//                     "track": 1
		//                 }];
		//             }
		//             if (jsPlayer.tracks.length > 0) {
		//                 if (jsPlayer.player) {
		//                     jsPlayer.player.addEventListener('ended', function playerEnded(){
		//                         if (jsPlayer.idx + 1 < jsPlayer.trackCount) {
		//                             jsPlayer.idx++;
		//                             jsPlayer.playTrack(jsPlayer.idx);
		//                         } else {
		//                             jsPlayer.action.innerHTML = 'Paused&hellip;';
		//                             jsPlayer.player.pause();
		//                             jsPlayer.idx = 0;
		//                             jsPlayer.loadTrack(jsPlayer.idx);
		//                         }
		//                     }, true);
		//                     jsPlayer.player.addEventListener('loadeddata', function playerLoadeddata(){
		//                         jsPlayer.setDuration();
		//                     }, true);
		//                 }
		//                 if (jsPlayer.play) {
		//                     jsPlayer.play.addEventListener('click', jsPlayer.playClicked, true);
		//                 }
		//                 if (jsPlayer.pause) {
		//                     jsPlayer.pause.addEventListener('click', jsPlayer.pauseClicked, true);
		//                 }
		//                 if (jsPlayer.button) {
		//                     jsPlayer.button.addEventListener('click', function buttonClicked(event){
		//                         event.preventDefault();
		//                         jsPlayer.playClicked();
		//                     }, true);
		//                 }
		//                 if (jsPlayer.prev) {
		//                     jsPlayer.prev.addEventListener('click', function prevClicked(event){
		//                         event.preventDefault();
		//                         if (jsPlayer.idx - 1 > -1) {
		//                             jsPlayer.idx--;
		//                             jsPlayer.loadTrack(jsPlayer.idx);
		//                             if (jsPlayer.playing) {
		//                                 jsPlayer.action.innerHTML = 'Now Playing&hellip;';
		//                                 jsPlayer.player.play();
		//                             }
		//                         } else {
		//                             jsPlayer.action.innerHTML = 'Paused&hellip;';
		//                             jsPlayer.playing = false;
		//                             jsPlayer.player.pause();
		//                             jsPlayer.idx = 0;
		//                             jsPlayer.loadTrack(jsPlayer.idx);
		//                         }
		//                     }, true);
		//                 }
		//                 if (jsPlayer.next) {
		//                     jsPlayer.next.addEventListener('click', function nextClicked(event){
		//                         event.preventDefault();
		//                         if (jsPlayer.idx + 1 < jsPlayer.trackCount) {
		//                             jsPlayer.idx++;
		//                             jsPlayer.loadTrack(jsPlayer.idx);
		//                             if (jsPlayer.playing) {
		//                                 jsPlayer.action.innerHTML = 'Now Playing&hellip;';
		//                                 jsPlayer.player.play();
		//                             }
		//                         } else {
		//                             jsPlayer.action.innerHTML = 'Paused&hellip;';
		//                             jsPlayer.playing = false;
		//                             jsPlayer.player.pause();
		//                             jsPlayer.idx = 0;
		//                             jsPlayer.loadTrack(jsPlayer.idx);
		//                         }
		//                     }, true);
		//                 }
		//                 if (jsPlayer.seek) {
		//                     jsPlayer.seek.addEventListener('mousedown', function seekClicked(){
		//                         clearTimeout(jsPlayer.seeking);
		//                         jsPlayer.action.innerHTML = 'Paused&hellip;';
		//                         jsPlayer.player.pause();
		//                     }, true);
		//                     jsPlayer.seek.addEventListener('mouseup', function seekReleased(){
		//                         jsPlayer.player.currentTime = jsPlayer.seek.value * jsPlayer.player.duration / 100;
		//                         jsPlayer.updateSeek();
		//                         if (jsPlayer.playing) {
		//                             jsPlayer.action.innerHTML = 'Now Playing&hellip;';
		//                             jsPlayer.player.play();
		//                         }
		//                     }, true);
		//                 }
		//                 if (jsPlayer.wrapList) {
		//                     jsPlayer.wrapList.addEventListener('click', function listClicked(event){
		//                         var parent = event.target.parentNode;
		//                         if (parent.parentNode.tagName.toLowerCase() === 'ol') {
		//                             event.preventDefault();
		//                             var len = jsPlayer.playlist.length,
		//                             i;
		//                             for (i = 0; i < len; i++) {
		//                                 if (parent.dataset.idx == i + 1) {
		//                                     jsPlayer.idx = i;
		//                                     jsPlayer.playTrack(jsPlayer.idx);
		//                                     i = len;
		//                                 }
		//                             }
		//                         }
		//                     }, true);
		//                 }
		//                 jsPlayer.setDuration = function setDuration() {
		//                     jsPlayer.duration.innerHTML = jsPlayer.formatTime(jsPlayer.player.duration);
		//                     jsPlayer.current.innerHTML = jsPlayer.formatTime(jsPlayer.player.currentTime);
		//                     jsPlayer.seek.value = jsPlayer.player.currentTime / jsPlayer.player.duration;
		//                 };
		//                 jsPlayer.updateSeek = function updateSeek() {
		//                     jsPlayer.seek.value = 100 * jsPlayer.player.currentTime / jsPlayer.player.duration;
		//                     jsPlayer.current.innerHTML = jsPlayer.formatTime(jsPlayer.player.currentTime);
		//                     if (jsPlayer.playing) {
		//                         jsPlayer.seeking = setTimeout(jsPlayer.updateSeek, 500);
		//                     }
		//                 };
		//                 jsPlayer.formatTime = function formatTime(val) {
		//                     var h = 0, m = 0, s;
		//                     val = parseInt(val, 10);
		//                     if (val > 60 * 60) {
		//                         h = parseInt(val / (60 * 60), 10);
		//                         val -= h * 60 * 60;
		//                     }
		//                     if (val > 60) {
		//                         m = parseInt(val / 60, 10);
		//                         val -= m * 60;
		//                     }
		//                     s = val;
		//                     val = (h > 0)? h + ':' : '';
		//                     val += (m > 0)? ((m < 10 && h > 0)? '0' : '') + m + ':' : '0:';
		//                     val += ((s < 10)? '0' : '') + s;
		//                     return val;
		//                 };
		//             }
		//         }
		//         if (jsPlayer.tracks.length > 0) {
		//             jsPlayer.wrap.className += ' enabled';
		//             jsPlayer.loadTrack(jsPlayer.idx);
		//         }
		jsPlayer.init();
	}

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<AudioPlayer> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("AudioPlayer", $$slots, []);
	$$self.$capture_state = () => ({ jsPlayer });

	$$self.$inject_state = $$props => {
		if ("jsPlayer" in $$props) jsPlayer = $$props.jsPlayer;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [];
}

class AudioPlayer extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$6, create_fragment$6, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "AudioPlayer",
			options,
			id: create_fragment$6.name
		});
	}
}

/* src/routes/playlists.svelte generated by Svelte v3.24.0 */

const file$7 = "src/routes/playlists.svelte";

function create_fragment$7(ctx) {
	let t0;
	let h2;
	let t1;
	let t2;
	let addrandomplaylist;
	let t3;
	let addemptyplaylist;
	let t4;
	let playlistlist;
	let t5;
	let audioplayer;
	let current;
	addrandomplaylist = new AddRandomPlaylist({ $$inline: true });
	addemptyplaylist = new AddEmptyPlaylist({ $$inline: true });
	playlistlist = new PlaylistList({ $$inline: true });
	audioplayer = new AudioPlayer({ $$inline: true });

	const block = {
		c: function create() {
			t0 = space();
			h2 = element("h2");
			t1 = text("Playlists");
			t2 = space();
			create_component(addrandomplaylist.$$.fragment);
			t3 = space();
			create_component(addemptyplaylist.$$.fragment);
			t4 = space();
			create_component(playlistlist.$$.fragment);
			t5 = space();
			create_component(audioplayer.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-kgurgq\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			h2 = claim_element(nodes, "H2", {});
			var h2_nodes = children(h2);
			t1 = claim_text(h2_nodes, "Playlists");
			h2_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			claim_component(addrandomplaylist.$$.fragment, nodes);
			t3 = claim_space(nodes);
			claim_component(addemptyplaylist.$$.fragment, nodes);
			t4 = claim_space(nodes);
			claim_component(playlistlist.$$.fragment, nodes);
			t5 = claim_space(nodes);
			claim_component(audioplayer.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			document.title = "Playlists";
			add_location(h2, file$7, 15, 0, 506);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, h2, anchor);
			append_dev(h2, t1);
			insert_dev(target, t2, anchor);
			mount_component(addrandomplaylist, target, anchor);
			insert_dev(target, t3, anchor);
			mount_component(addemptyplaylist, target, anchor);
			insert_dev(target, t4, anchor);
			mount_component(playlistlist, target, anchor);
			insert_dev(target, t5, anchor);
			mount_component(audioplayer, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(addrandomplaylist.$$.fragment, local);
			transition_in(addemptyplaylist.$$.fragment, local);
			transition_in(playlistlist.$$.fragment, local);
			transition_in(audioplayer.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(addrandomplaylist.$$.fragment, local);
			transition_out(addemptyplaylist.$$.fragment, local);
			transition_out(playlistlist.$$.fragment, local);
			transition_out(audioplayer.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(h2);
			if (detaching) detach_dev(t2);
			destroy_component(addrandomplaylist, detaching);
			if (detaching) detach_dev(t3);
			destroy_component(addemptyplaylist, detaching);
			if (detaching) detach_dev(t4);
			destroy_component(playlistlist, detaching);
			if (detaching) detach_dev(t5);
			destroy_component(audioplayer, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$7.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$7($$self, $$props, $$invalidate) {
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Playlists> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Playlists", $$slots, []);

	$$self.$capture_state = () => ({
		AddRandomPlaylist,
		AddEmptyPlaylist,
		PlaylistList,
		AudioPlayer
	});

	return [];
}

class Playlists extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$7, create_fragment$7, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Playlists",
			options,
			id: create_fragment$7.name
		});
	}
}

export default Playlists;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
