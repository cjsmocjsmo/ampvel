import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, O as createEventDispatcher, o as onMount, v as validate_slots, y as validate_each_argument, e as element, c as claim_element, a as children, f as detach_dev, h as attr_dev, j as add_location, k as insert_dev, l as append_dev, z as destroy_each, t as text, b as claim_text, m as listen_dev, L as is_function, u as set_data_dev, p as space, x as empty, r as claim_space, n as noop } from './client.2bd3457a.js';

/* src/components/PageComp.svelte generated by Svelte v3.24.0 */
const file = "src/components/PageComp.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[9] = list[i];
	return child_ctx;
}

// (52:0) {#if visible}
function create_if_block(ctx) {
	let nav;
	let ul;
	let each_value = /*AS*/ ctx[1];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			nav = element("nav");
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			nav = claim_element(nodes, "NAV", {});
			var nav_nodes = children(nav);
			ul = claim_element(nav_nodes, "UL", { class: true });
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach_dev);
			nav_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(ul, "class", "pageUL svelte-aplvvr");
			add_location(ul, file, 53, 2, 991);
			add_location(nav, file, 52, 1, 983);
		},
		m: function mount(target, anchor) {
			insert_dev(target, nav, anchor);
			append_dev(nav, ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*alphasel, AS*/ 18) {
				each_value = /*AS*/ ctx[1];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(nav);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(52:0) {#if visible}",
		ctx
	});

	return block;
}

// (55:3) {#each AS as p}
function create_each_block(ctx) {
	let li;
	let button;
	let t_value = /*p*/ ctx[9] + "";
	let t;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			li = element("li");
			button = element("button");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", { class: true });
			var li_nodes = children(li);
			button = claim_element(li_nodes, "BUTTON", {});
			var button_nodes = children(button);
			t = claim_text(button_nodes, t_value);
			button_nodes.forEach(detach_dev);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(button, file, 55, 23, 1053);
			attr_dev(li, "class", "pageLI svelte-aplvvr");
			add_location(li, file, 55, 4, 1034);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, button);
			append_dev(button, t);

			if (!mounted) {
				dispose = listen_dev(
					button,
					"click",
					function () {
						if (is_function(/*alphasel*/ ctx[4](/*p*/ ctx[9]))) /*alphasel*/ ctx[4](/*p*/ ctx[9]).apply(this, arguments);
					},
					false,
					false,
					false
				);

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*AS*/ 2 && t_value !== (t_value = /*p*/ ctx[9] + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(55:3) {#each AS as p}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let button;
	let t0;
	let span;
	let t1;
	let t2;
	let if_block_anchor;
	let mounted;
	let dispose;
	let if_block = /*visible*/ ctx[2] && create_if_block(ctx);

	const block = {
		c: function create() {
			button = element("button");
			t0 = text("Page");
			span = element("span");
			t1 = text(/*selected*/ ctx[0]);
			t2 = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			button = claim_element(nodes, "BUTTON", { id: true, class: true });
			var button_nodes = children(button);
			t0 = claim_text(button_nodes, "Page");
			span = claim_element(button_nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t1 = claim_text(span_nodes, /*selected*/ ctx[0]);
			span_nodes.forEach(detach_dev);
			button_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "class", "svelte-aplvvr");
			add_location(span, file, 49, 49, 934);
			attr_dev(button, "id", "SongsPageButton");
			attr_dev(button, "class", "svelte-aplvvr");
			add_location(button, file, 49, 0, 885);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			append_dev(button, t0);
			append_dev(button, span);
			append_dev(span, t1);
			insert_dev(target, t2, anchor);
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);

			if (!mounted) {
				dispose = listen_dev(button, "click", /*fuck*/ ctx[3], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*selected*/ 1) set_data_dev(t1, /*selected*/ ctx[0]);

			if (/*visible*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			if (detaching) detach_dev(t2);
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	const dispatch = createEventDispatcher();
	let selected = 1;

	function dispatchMyPageEvent() {
		dispatch("message", { text: selected });
	}

	let { ALPHA } = $$props;
	const ADDR = `http://192.168.0.:6789/${ALPHA}`;
	let AS = [];

	onMount(async () => {
		await fetch(ADDR, { mode: "cors", method: "GET" }).then(r => r.json()).then(data => {
			if (ALPHA === "ArtistAlpha") {
				$$invalidate(1, AS = data.artal);
			}

			if (ALPHA === "AlbumAlpha") {
				$$invalidate(1, AS = data.albal);
			}

			if (ALPHA === "SongAlpha") {
				$$invalidate(1, AS = data.songal);
			}
		});
	});

	let visible = false;

	let fuck = () => {
		if (visible) {
			$$invalidate(2, visible = false);
		} else {
			$$invalidate(2, visible = true);
		}
	};

	let alphasel = asel => {
		$$invalidate(0, selected = asel);
		$$invalidate(2, visible = false);
		dispatchMyPageEvent();
	};

	const writable_props = ["ALPHA"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<PageComp> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("PageComp", $$slots, []);

	$$self.$set = $$props => {
		if ("ALPHA" in $$props) $$invalidate(5, ALPHA = $$props.ALPHA);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		dispatch,
		onMount,
		selected,
		dispatchMyPageEvent,
		ALPHA,
		ADDR,
		AS,
		visible,
		fuck,
		alphasel
	});

	$$self.$inject_state = $$props => {
		if ("selected" in $$props) $$invalidate(0, selected = $$props.selected);
		if ("ALPHA" in $$props) $$invalidate(5, ALPHA = $$props.ALPHA);
		if ("AS" in $$props) $$invalidate(1, AS = $$props.AS);
		if ("visible" in $$props) $$invalidate(2, visible = $$props.visible);
		if ("fuck" in $$props) $$invalidate(3, fuck = $$props.fuck);
		if ("alphasel" in $$props) $$invalidate(4, alphasel = $$props.alphasel);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [selected, AS, visible, fuck, alphasel, ALPHA];
}

class PageComp extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { ALPHA: 5 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "PageComp",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*ALPHA*/ ctx[5] === undefined && !("ALPHA" in props)) {
			console.warn("<PageComp> was created without expected prop 'ALPHA'");
		}
	}

	get ALPHA() {
		throw new Error("<PageComp>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set ALPHA(value) {
		throw new Error("<PageComp>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { PageComp as P };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGFnZUNvbXAuYTVkYjRkNDUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1BhZ2VDb21wLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxuXHRpbXBvcnQgeyBjcmVhdGVFdmVudERpc3BhdGNoZXIgfSBmcm9tICdzdmVsdGUnO1xuXHRjb25zdCBkaXNwYXRjaCA9IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpO1xuXG5cdGltcG9ydCB7IG9uTW91bnQgfSBmcm9tICdzdmVsdGUnO1xuXHRsZXQgc2VsZWN0ZWQgPSAxO1xuXG5cdGZ1bmN0aW9uIGRpc3BhdGNoTXlQYWdlRXZlbnQoKSB7XG5cdFx0ZGlzcGF0Y2goXCJtZXNzYWdlXCIsIHtcblx0XHRcdHRleHQ6IHNlbGVjdGVkXG5cdFx0fSlcblx0fVxuXG5cdGV4cG9ydCBsZXQgQUxQSEE7XG4gICAgY29uc3QgQUREUiA9IGBodHRwOi8vMTkyLjE2OC4wLjo2Nzg5LyR7QUxQSEF9YFxuXG5cdGxldCBBUyA9IFtdO1xuXHRvbk1vdW50KGFzeW5jICgpID0+IHtcblx0XHRhd2FpdCBmZXRjaChBRERSLCB7bW9kZTogXCJjb3JzXCIsIG1ldGhvZDogXCJHRVRcIn0pXG5cdFx0LnRoZW4ociA9PiByLmpzb24oKSlcblx0XHQudGhlbihkYXRhID0+IHtcblx0XHRcdGlmIChBTFBIQSA9PT0gXCJBcnRpc3RBbHBoYVwiKSB7XG5cdFx0XHRcdEFTID0gZGF0YS5hcnRhbFxuXHRcdFx0fSBcblx0XHRcdGlmIChBTFBIQSA9PT0gXCJBbGJ1bUFscGhhXCIpIHtcblx0XHRcdFx0QVMgPSBkYXRhLmFsYmFsXG5cdFx0XHR9XG5cdFx0XHRpZiAoQUxQSEEgPT09IFwiU29uZ0FscGhhXCIpIHtcblx0XHRcdFx0QVMgPSBkYXRhLnNvbmdhbDtcblx0XHRcdH1cblx0XHR9KVxuXHR9KVxuXG5cdGxldCB2aXNpYmxlID0gZmFsc2U7XG4gICAgbGV0IGZ1Y2sgPSAoKSA9PiB7XG4gICAgICAgIGlmICh2aXNpYmxlKSB7XG4gICAgICAgICAgICB2aXNpYmxlID0gZmFsc2VcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZpc2libGUgPSB0cnVlXG4gICAgICAgIH1cblx0fVxuXG5cdGxldCBhbHBoYXNlbCA9IChhc2VsKSA9PiB7XG5cdFx0c2VsZWN0ZWQgPSBhc2VsXG5cdFx0dmlzaWJsZSA9IGZhbHNlXG5cdFx0ZGlzcGF0Y2hNeVBhZ2VFdmVudCgpXG5cdH1cbjwvc2NyaXB0PlxuXG48YnV0dG9uIGlkPVwiU29uZ3NQYWdlQnV0dG9uXCIgb246Y2xpY2s9e2Z1Y2t9PlBhZ2U8c3Bhbj57c2VsZWN0ZWR9PC9zcGFuPjwvYnV0dG9uPlxuXG57I2lmIHZpc2libGV9XG5cdDxuYXY+XG5cdFx0PHVsIGNsYXNzPVwicGFnZVVMXCI+XG5cdFx0XHR7I2VhY2ggQVMgYXMgcH1cblx0XHRcdFx0PGxpIGNsYXNzPVwicGFnZUxJXCI+PGJ1dHRvbiBvbjpjbGljaz17YWxwaGFzZWwocCl9PntwfTwvYnV0dG9uPjwvbGk+XG5cdFx0XHR7L2VhY2h9XG5cdFx0PC91bD5cblx0PC9uYXY+XG57L2lmfVxuXG48c3R5bGU+XG5cdCNTb25nc1BhZ2VCdXR0b24ge1xuXHRcdGNvbG9yOiBibGFjaztcblx0fVxuXHQjU29uZ3NQYWdlQnV0dG9uIHtcblx0XHRib3JkZXItcmFkaXVzOiAxMHB4O1xuXHRcdGZvbnQtc2l6ZTogMTdweDtcblx0XHRwYWRkaW5nOiA3cHg7XG5cdFx0d2lkdGg6IDEwMCU7XG5cdFx0YmFja2dyb3VuZC1jb2xvcjogbGF3bmdyZWVuO1xuXHR9XG5cdC5wYWdlVUwge1xuXHRcdHRleHQtYWxpZ246IGNlbnRlcjtcblx0XHRsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XG5cdFx0Zm9udC1zaXplOiAxOXB4O1xuXHR9XG5cdC5wYWdlTEkge1xuXHRcdGRpc3BsYXk6IGlubGluZTtcblx0XHRtYXJnaW46IDIwcHg7XG5cdH1cblx0c3BhbiB7XG5cdFx0cGFkZGluZy1sZWZ0OiAxN3B4O1xuXHR9XG48L3N0eWxlPiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7eUJBc0RVLEdBQUU7Ozs7Z0NBQVAsTUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7d0JBQUMsR0FBRTs7OzsrQkFBUCxNQUFJOzs7Ozs7Ozs7Ozs7Ozs7O29DQUFKLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztxQkFDOEMsR0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzttQ0FBZixHQUFRLFVBQUMsR0FBQyxvQkFBVixHQUFRLFVBQUMsR0FBQzs7Ozs7Ozs7Ozs7O3dEQUFJLEdBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzRCQUpuRCxHQUFPOzs7Ozs7OzBCQUY0QyxHQUFROzs7Ozs7Ozs7Ozs7NENBQVIsR0FBUTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzttREFBekIsR0FBSTs7Ozs7NkRBQWEsR0FBUTs7bUJBRTNELEdBQU87Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7T0FqREwsUUFBUSxHQUFHLHFCQUFxQjtLQUdsQyxRQUFRLEdBQUcsQ0FBQzs7VUFFUCxtQkFBbUI7RUFDM0IsUUFBUSxDQUFDLFNBQVMsSUFDakIsSUFBSSxFQUFFLFFBQVE7OztPQUlMLEtBQUs7T0FDUCxJQUFJLDZCQUE2QixLQUFLO0tBRTNDLEVBQUU7O0NBQ04sT0FBTztRQUNBLEtBQUssQ0FBQyxJQUFJLElBQUcsSUFBSSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsS0FBSyxJQUM3QyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLElBQ2hCLElBQUksQ0FBQyxJQUFJO09BQ0wsS0FBSyxLQUFLLGFBQWE7b0JBQzFCLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSzs7O09BRVosS0FBSyxLQUFLLFlBQVk7b0JBQ3pCLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSzs7O09BRVosS0FBSyxLQUFLLFdBQVc7b0JBQ3hCLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTTs7Ozs7S0FLZixPQUFPLEdBQUcsS0FBSzs7S0FDWixJQUFJO01BQ0EsT0FBTzttQkFDUCxPQUFPLEdBQUcsS0FBSzs7bUJBRWYsT0FBTyxHQUFHLElBQUk7Ozs7S0FJckIsUUFBUSxHQUFJLElBQUk7a0JBQ25CLFFBQVEsR0FBRyxJQUFJO2tCQUNmLE9BQU8sR0FBRyxLQUFLO0VBQ2YsbUJBQW1COzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
